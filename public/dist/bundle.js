!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=".",n(n.s=184)}([function(t,e,n){"use strict";n.d(e,"x",function(){return i}),n.d(e,"e",function(){return a}),n.d(e,"b",function(){return s}),n.d(e,"a",function(){return l}),n.d(e,"c",function(){return c}),n.d(e,"d",function(){return f}),n.d(e,"r",function(){return h}),n.d(e,"u",function(){return p}),n.d(e,"o",function(){return g}),n.d(e,"h",function(){return v}),n.d(e,"q",function(){return b}),n.d(e,"v",function(){return w}),n.d(e,"w",function(){return x}),n.d(e,"f",function(){return C}),n.d(e,"l",function(){return S}),n.d(e,"g",function(){return E}),n.d(e,"m",function(){return k}),n.d(e,"j",function(){return _}),n.d(e,"y",function(){return P}),n.d(e,"t",function(){return M}),n.d(e,"s",function(){return L}),n.d(e,"n",function(){return A}),n.d(e,"z",function(){return j}),n.d(e,"p",function(){return N}),n.d(e,"k",function(){return R}),n.d(e,"A",function(){return F}),n.d(e,"i",function(){return I});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(t){return"@@redux-saga/"+t},a=i("TASK"),u=i("HELPER"),s=i("MATCH"),l=i("CANCEL_PROMISE"),c=i("SAGA_ACTION"),f=i("SELF_CANCELLATION"),d=function(t){return function(){return t}},h=d(!0),p=function(){},g=function(t){return t};function v(t,e,n){if(!e(t))throw L("error","uncaught at check",n),new Error(n)}var y=Object.prototype.hasOwnProperty;function m(t,e){return b.notUndef(t)&&y.call(t,e)}var b={undef:function(t){return null===t||void 0===t},notUndef:function(t){return null!==t&&void 0!==t},func:function(t){return"function"==typeof t},number:function(t){return"number"==typeof t},string:function(t){return"string"==typeof t},array:Array.isArray,object:function(t){return t&&!b.array(t)&&"object"===(void 0===t?"undefined":o(t))},promise:function(t){return t&&b.func(t.then)},iterator:function(t){return t&&b.func(t.next)&&b.func(t.throw)},iterable:function(t){return t&&b.func(Symbol)?b.func(t[Symbol.iterator]):b.array(t)},task:function(t){return t&&t[a]},observable:function(t){return t&&b.func(t.subscribe)},buffer:function(t){return t&&b.func(t.isEmpty)&&b.func(t.take)&&b.func(t.put)},pattern:function(t){return t&&(b.string(t)||"symbol"===(void 0===t?"undefined":o(t))||b.func(t)||b.array(t))},channel:function(t){return t&&b.func(t.take)&&b.func(t.close)},helper:function(t){return t&&t[u]},stringableFunc:function(t){return b.func(t)&&m(t,"toString")}},w={assign:function(t,e){for(var n in e)m(e,n)&&(t[n]=e[n])}};function x(t,e){var n=t.indexOf(e);n>=0&&t.splice(n,1)}var C={from:function(t){var e=Array(t.length);for(var n in t)m(t,n)&&(e[n]=t[n]);return e}};function S(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=r({},t),n=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=n,e}function E(t){for(var e=[],n=0;n<t;n++)e.push(S());return e}function k(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(e)},t)});return r[l]=function(){return clearTimeout(n)},r}function _(){var t,e=!0,n=void 0,r=void 0;return(t={})[a]=!0,t.isRunning=function(){return e},t.result=function(){return n},t.error=function(){return r},t.setRunning=function(t){return e=t},t.setResult=function(t){return n=t},t.setError=function(t){return r=t},t}var P=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return function(){return++t}}(),O=function(t){throw t},T=function(t){return{value:t,done:!0}};function M(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:O,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:t,throw:e,return:T};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}function L(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+t+": "+e+"\n"+(n&&n.stack||n)):console[t](e,n)}function A(t,e){return function(){return t.apply(void 0,arguments)}}var j=function(t,e){return t+" has been deprecated in favor of "+e+", please update your code"},N=function(t){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+t+"\n")},R=function(t,e){return(t?t+".":"")+"setContext(props): argument "+e+" is not a plain object"},F=function(t){return function(e){return t(Object.defineProperty(e,c,{value:!0}))}},I=function t(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=[],a=e.apply(void 0,r);return{next:function(t){return i.push(t),a.next(t)},clone:function(){var n=t(e).apply(void 0,r);return i.forEach(function(t){return n.next(t)}),n},return:function(t){return a.return(t)},throw:function(t){return a.throw(t)}}}}},function(t,e,n){"use strict";n.d(e,"i",function(){return S}),n.d(e,"s",function(){return E}),n.d(e,"v",function(){return k}),n.d(e,"n",function(){return _}),n.d(e,"b",function(){return P}),n.d(e,"o",function(){return O}),n.d(e,"e",function(){return M}),n.d(e,"c",function(){return L}),n.d(e,"h",function(){return A}),n.d(e,"k",function(){return j}),n.d(e,"r",function(){return N}),n.d(e,"m",function(){return R}),n.d(e,"f",function(){return F}),n.d(e,"p",function(){return I}),n.d(e,"a",function(){return D}),n.d(e,"g",function(){return U}),n.d(e,"j",function(){return z}),n.d(e,"l",function(){return q}),n.d(e,"q",function(){return W}),n.d(e,"t",function(){return B}),n.d(e,"u",function(){return H}),n.d(e,"w",function(){return V}),n.d(e,"d",function(){return K});var r=n(0),o=n(8),i=Object(r.x)("IO"),a="TAKE",u="PUT",s="ALL",l="RACE",c="CALL",f="CPS",d="FORK",h="JOIN",p="CANCEL",g="SELECT",v="ACTION_CHANNEL",y="CANCELLED",m="FLUSH",b="GET_CONTEXT",w="SET_CONTEXT",x="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",C=function(t,e){var n;return(n={})[i]=!0,n[t]=e,n},S=function(t){return Object(r.h)(K.fork(t),r.q.object,"detach(eff): argument must be a fork effect"),t[d].detached=!0,t};function E(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&Object(r.h)(arguments[0],r.q.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),r.q.pattern(t))return C(a,{pattern:t});if(r.q.channel(t))return C(a,{channel:t});throw new Error("take(patternOrChannel): argument "+String(t)+" is not valid channel or a valid pattern")}E.maybe=function(){var t=E.apply(void 0,arguments);return t[a].maybe=!0,t};var k=Object(r.n)(E.maybe,Object(r.z)("takem","take.maybe"));function _(t,e){return arguments.length>1?(Object(r.h)(t,r.q.notUndef,"put(channel, action): argument channel is undefined"),Object(r.h)(t,r.q.channel,"put(channel, action): argument "+t+" is not a valid channel"),Object(r.h)(e,r.q.notUndef,"put(channel, action): argument action is undefined")):(Object(r.h)(t,r.q.notUndef,"put(action): argument action is undefined"),e=t,t=null),C(u,{channel:t,action:e})}function P(t){return C(s,t)}function O(t){return C(l,t)}function T(t,e,n){Object(r.h)(e,r.q.notUndef,t+": argument fn is undefined");var o=null;if(r.q.array(e)){var i=e;o=i[0],e=i[1]}else if(e.fn){var a=e;o=a.context,e=a.fn}return o&&r.q.string(e)&&r.q.func(o[e])&&(e=o[e]),Object(r.h)(e,r.q.func,t+": argument "+e+" is not a function"),{context:o,fn:e,args:n}}function M(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return C(c,T("call",t,n))}function L(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return C(c,T("apply",{context:t,fn:e},n))}function A(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return C(f,T("cps",t,n))}function j(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return C(d,T("fork",t,n))}function N(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return S(j.apply(void 0,[t].concat(n)))}function R(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(e.length>1)return P(e.map(function(t){return R(t)}));var o=e[0];return Object(r.h)(o,r.q.notUndef,"join(task): argument task is undefined"),Object(r.h)(o,r.q.task,"join(task): argument "+o+" is not a valid Task object "+x),C(h,o)}function F(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(e.length>1)return P(e.map(function(t){return F(t)}));var o=e[0];return 1===e.length&&(Object(r.h)(o,r.q.notUndef,"cancel(task): argument task is undefined"),Object(r.h)(o,r.q.task,"cancel(task): argument "+o+" is not a valid Task object "+x)),C(p,o||r.d)}function I(t){for(var e=arguments.length,n=Array(e>1?e-1:0),o=1;o<e;o++)n[o-1]=arguments[o];return 0===arguments.length?t=r.o:(Object(r.h)(t,r.q.notUndef,"select(selector,[...]): argument selector is undefined"),Object(r.h)(t,r.q.func,"select(selector,[...]): argument "+t+" is not a function")),C(g,{selector:t,args:n})}function D(t,e){return Object(r.h)(t,r.q.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(Object(r.h)(e,r.q.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),Object(r.h)(e,r.q.buffer,"actionChannel(pattern, buffer): argument "+e+" is not a valid buffer")),C(v,{pattern:t,buffer:e})}function U(){return C(y,{})}function z(t){return Object(r.h)(t,r.q.channel,"flush(channel): argument "+t+" is not valid channel"),C(m,t)}function q(t){return Object(r.h)(t,r.q.string,"getContext(prop): argument "+t+" is not a string"),C(b,t)}function W(t){return Object(r.h)(t,r.q.object,Object(r.k)(null,t)),C(w,t)}function B(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return j.apply(void 0,[o.b,t,e].concat(r))}function H(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return j.apply(void 0,[o.d,t,e].concat(r))}function V(t,e,n){for(var r=arguments.length,i=Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];return j.apply(void 0,[o.f,t,e,n].concat(i))}_.resolve=function(){var t=_.apply(void 0,arguments);return t[u].resolve=!0,t},_.sync=Object(r.n)(_.resolve,Object(r.z)("put.sync","put.resolve"));var G=function(t){return function(e){return e&&e[i]&&e[t]}},K={take:G(a),put:G(u),all:G(s),race:G(l),call:G(c),cps:G(f),fork:G(d),join:G(h),cancel:G(p),select:G(g),actionChannel:G(v),cancelled:G(y),flush:G(m),getContext:G(b),setContext:G(w)}},function(t,e,n){"use strict";t.exports=n(183)},function(t,e,n){"use strict";n.d(e,"a",function(){return u}),n.d(e,"e",function(){return s}),n.d(e,"c",function(){return l}),n.d(e,"b",function(){return d}),n.d(e,"d",function(){return h}),n.d(e,"f",function(){return p});var r=n(0),o=n(6),i=n(19),a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u={type:"@@redux-saga/CHANNEL_END"},s=function(t){return t&&"@@redux-saga/CHANNEL_END"===t.type};function l(){var t=[];return{subscribe:function(e){return t.push(e),function(){return Object(r.w)(t,e)}},emit:function(e){for(var n=t.slice(),r=0,o=n.length;r<o;r++)n[r](e)}}}var c="invalid buffer passed to channel factory function",f="Saga was provided with an undefined action";function d(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.a.fixed(),e=!1,n=[];function i(){if(e&&n.length)throw Object(r.p)("Cannot have a closed channel with pending takers");if(n.length&&!t.isEmpty())throw Object(r.p)("Cannot have pending takers with non empty buffer")}return Object(r.h)(t,r.q.buffer,c),{take:function(o){i(),Object(r.h)(o,r.q.func,"channel.take's callback must be a function"),e&&t.isEmpty()?o(u):t.isEmpty()?(n.push(o),o.cancel=function(){return Object(r.w)(n,o)}):o(t.take())},put:function(o){if(i(),Object(r.h)(o,r.q.notUndef,f),!e){if(!n.length)return t.put(o);for(var a=0;a<n.length;a++){var u=n[a];if(!u[r.b]||u[r.b](o))return n.splice(a,1),u(o)}}},flush:function(n){i(),Object(r.h)(n,r.q.func,"channel.flush' callback must be a function"),e&&t.isEmpty()?n(u):n(t.flush())},close:function(){if(i(),!e&&(e=!0,n.length)){var t=n;n=[];for(var r=0,o=t.length;r<o;r++)t[r](u)}},get __takers__(){return n},get __closed__(){return e}}}function h(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.a.none(),n=arguments[2];arguments.length>2&&Object(r.h)(n,r.q.func,"Invalid match function passed to eventChannel");var i=d(e),a=function(){i.__closed__||(u&&u(),i.close())},u=t(function(t){s(t)?a():n&&!n(t)||i.put(t)});if(i.__closed__&&u(),!r.q.func(u))throw new Error("in eventChannel: subscribe should return a function to unsubscribe");return{take:i.take,flush:i.flush,close:a}}function p(t){var e=h(function(e){return t(function(t){t[r.c]?e(t):Object(i.a)(function(){return e(t)})})});return a({},e,{take:function(t,n){arguments.length>1&&(Object(r.h)(n,r.q.func,"channel.take's matcher argument must be a function"),t[r.b]=n),e.take(t)}})}},function(t,e,n){t.exports=n(175)()},function(t,e,n){"use strict";var r=n(73),o=n(165),i=Object.prototype.toString;function a(t){return"[object Array]"===i.call(t)}function u(t){return null!==t&&"object"==typeof t}function s(t){return"[object Function]"===i.call(t)}function l(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),a(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:o,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:u,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:s,isStream:function(t){return u(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r=n(0),o="Channel's Buffer overflow!",i=1,a=3,u=4,s={isEmpty:r.r,put:r.u,take:r.u};function l(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,e=arguments[1],n=new Array(t),r=0,s=0,l=0,c=function(e){n[s]=e,s=(s+1)%t,r++},f=function(){if(0!=r){var e=n[l];return n[l]=null,r--,l=(l+1)%t,e}},d=function(){for(var t=[];r;)t.push(f());return t};return{isEmpty:function(){return 0==r},put:function(f){if(r<t)c(f);else{var h=void 0;switch(e){case i:throw new Error(o);case a:n[s]=f,l=s=(s+1)%t;break;case u:h=2*t,n=d(),r=n.length,s=n.length,l=0,n.length=h,t=h,c(f)}}},take:f,flush:d}}var c={none:function(){return s},fixed:function(t){return l(t,i)},dropping:function(t){return l(t,2)},sliding:function(t){return l(t,a)},expanding:function(t){return l(t,u)}}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){"use strict";var r=n(0),o={done:!0,value:void 0},i={};function a(t){return r.q.channel(t)?"channel":Array.isArray(t)?String(t.map(function(t){return String(t)})):String(t)}function u(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",a=void 0,u=e;function s(e,n){if(u===i)return o;if(n)throw u=i,n;a&&a(e);var r=t[u](),s=r[0],l=r[1],c=r[2];return a=c,(u=s)===i?o:l}return Object(r.t)(s,function(t){return s(null,t)},n,!0)}var s=n(1),l=n(3);function c(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var c={done:!1,value:Object(s.s)(t)},f=void 0,d=function(t){return f=t};return u({q1:function(){return["q2",c,d]},q2:function(){return f===l.a?[i]:["q1",(t=f,{done:!1,value:s.k.apply(void 0,[e].concat(r,[t]))})];var t}},"q1","takeEvery("+a(t)+", "+e.name+")")}function f(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var c={done:!1,value:Object(s.s)(t)},f=function(t){return{done:!1,value:s.k.apply(void 0,[e].concat(r,[t]))}},d=void 0,h=void 0,p=function(t){return d=t},g=function(t){return h=t};return u({q1:function(){return["q2",c,g]},q2:function(){return h===l.a?[i]:d?["q3",function(t){return{done:!1,value:Object(s.f)(t)}}(d)]:["q1",f(h),p]},q3:function(){return["q1",f(h),p]}},"q1","takeLatest("+a(t)+", "+e.name+")")}var d=n(6);function h(t,e,n){for(var o=arguments.length,c=Array(o>3?o-3:0),f=3;f<o;f++)c[f-3]=arguments[f];var h=void 0,p=void 0,g={done:!1,value:Object(s.a)(e,d.a.sliding(1))},v={done:!1,value:Object(s.e)(r.m,t)},y=function(t){return h=t},m=function(t){return p=t};return u({q1:function(){return["q2",g,m]},q2:function(){return["q3",{done:!1,value:Object(s.s)(p)},y]},q3:function(){return h===l.a?[i]:["q4",(t=h,{done:!1,value:s.k.apply(void 0,[n].concat(c,[t]))})];var t},q4:function(){return["q2",v]}},"q1","throttle("+a(e)+", "+n.name+")")}n.d(e,"a",function(){return g}),n.d(e,"c",function(){return v}),n.d(e,"e",function(){return y}),n.d(e,"b",function(){return c}),n.d(e,"d",function(){return f}),n.d(e,"f",function(){return h});var p=function(t){return"import { "+t+" } from 'redux-saga' has been deprecated in favor of import { "+t+" } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield "+t+" will return task descriptor to your saga and execute next lines of code."},g=Object(r.n)(c,p("takeEvery")),v=Object(r.n)(f,p("takeLatest")),y=Object(r.n)(h,p("throttle"))},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=!n(20)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(21),o=n(67),i=n(45),a=Object.defineProperty;e.f=n(10)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e){var n=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";n.r(e);var r=n(2),o=n(4),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function s(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||e+"Subscription",o=function(t){function o(n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,n,r));return i[e]=n.store,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(o,t),o.prototype.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((t={})[e]=u.isRequired,t[n]=a,t),o}var l=s(),c=n(77),f=n.n(c),d=n(32),h=n.n(d);var p=null,g={notify:function(){}};var v=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.store=e,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=g}return t.prototype.addNestedSub=function(t){return this.trySubscribe(),this.listeners.subscribe(t)},t.prototype.notifyNestedSubs=function(){this.listeners.notify()},t.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},t.prototype.trySubscribe=function(){var t,e;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(t=[],e=[],{clear:function(){e=p,t=p},notify:function(){for(var n=t=e,r=0;r<n.length;r++)n[r]()},get:function(){return e},subscribe:function(n){var r=!0;return e===t&&(e=t.slice()),e.push(n),function(){r&&t!==p&&(r=!1,e===t&&(e=t.slice()),e.splice(e.indexOf(n),1))}}}))},t.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=g)},t}(),y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var m=0,b={};function w(){}function x(t){var e,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,s=void 0===i?function(t){return"ConnectAdvanced("+t+")"}:i,l=o.methodName,c=void 0===l?"connectAdvanced":l,d=o.renderCountProp,p=void 0===d?void 0:d,g=o.shouldHandleStateChanges,x=void 0===g||g,C=o.storeKey,S=void 0===C?"store":C,E=o.withRef,k=void 0!==E&&E,_=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),P=S+"Subscription",O=m++,T=((e={})[S]=u,e[P]=a,e),M=((n={})[P]=a,n);return function(e){h()("function"==typeof e,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(e));var n=e.displayName||e.name||"Component",o=s(n),i=y({},_,{getDisplayName:s,methodName:c,renderCountProp:p,shouldHandleStateChanges:x,storeKey:S,withRef:k,displayName:o,wrappedComponentName:n,WrappedComponent:e}),a=function(n){function a(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,n.call(this,t,e));return r.version=O,r.state={},r.renderCount=0,r.store=t[S]||e[S],r.propsMode=Boolean(t[S]),r.setWrappedInstance=r.setWrappedInstance.bind(r),h()(r.store,'Could not find "'+S+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+S+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(a,n),a.prototype.getChildContext=function(){var t,e=this.propsMode?null:this.subscription;return(t={})[P]=e||this.context[P],t},a.prototype.componentDidMount=function(){x&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(t){this.selector.run(t)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return h()(k,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(t){this.wrappedInstance=t},a.prototype.initSelector=function(){var e=t(this.store.dispatch,i);this.selector=function(t,e){var n={run:function(r){try{var o=t(e.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(t){n.shouldComponentUpdate=!0,n.error=t}}};return n}(e,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(x){var t=(this.propsMode?this.props:this.context)[P];this.subscription=new v(this.store,t,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(t){if(!(k||p||this.propsMode&&this.subscription))return t;var e=y({},t);return k&&(e.ref=this.setWrappedInstance),p&&(e[p]=this.renderCount++),this.propsMode&&this.subscription&&(e[P]=this.subscription),e},a.prototype.render=function(){var t=this.selector;if(t.shouldComponentUpdate=!1,t.error)throw t.error;return Object(r.createElement)(e,this.addExtraProps(t.props))},a}(r.Component);return a.WrappedComponent=e,a.displayName=o,a.childContextTypes=M,a.contextTypes=T,a.propTypes=T,f()(a,e)}}var C=Object.prototype.hasOwnProperty;function S(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function E(t,e){if(S(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!C.call(e,n[o])||!S(t[n[o]],e[n[o]]))return!1;return!0}var k=n(54),_=n(185),P="object"==typeof self&&self&&self.Object===Object&&self,O=(_.a||P||Function("return this")()).Symbol,T=Object.prototype;T.hasOwnProperty,T.toString,O&&O.toStringTag;Object.prototype.toString;O&&O.toStringTag;Object.getPrototypeOf,Object;var M=Function.prototype,L=Object.prototype,A=M.toString;L.hasOwnProperty,A.call(Object);function j(t){return function(e,n){var r=t(e,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function N(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function R(t,e){return function(e,n){n.displayName;var r=function(t,e){return r.dependsOnOwnProps?r.mapToProps(t,e):r.mapToProps(t)};return r.dependsOnOwnProps=!0,r.mapToProps=function(e,n){r.mapToProps=t,r.dependsOnOwnProps=N(t);var o=r(e,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=N(o),o=r(e,n)),o},r}}var F=[function(t){return"function"==typeof t?R(t):void 0},function(t){return t?void 0:j(function(t){return{dispatch:t}})},function(t){return t&&"object"==typeof t?j(function(e){return Object(k.bindActionCreators)(t,e)}):void 0}];var I=[function(t){return"function"==typeof t?R(t):void 0},function(t){return t?void 0:j(function(){return{}})}],D=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function U(t,e,n){return D({},n,t,e)}var z=[function(t){return"function"==typeof t?function(t){return function(e,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(e,n,u){var s=t(e,n,u);return i?r&&o(s,a)||(a=s):(i=!0,a=s),a}}}(t):void 0},function(t){return t?void 0:function(){return U}}];function q(t,e,n,r){return function(o,i){return n(t(o,i),e(r,i),i)}}function W(t,e,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,s=!1,l=void 0,c=void 0,f=void 0,d=void 0,h=void 0;function p(o,s){var p,g,v=!a(s,c),y=!i(o,l);return l=o,c=s,v&&y?(f=t(l,c),e.dependsOnOwnProps&&(d=e(r,c)),h=n(f,d,c)):v?(t.dependsOnOwnProps&&(f=t(l,c)),e.dependsOnOwnProps&&(d=e(r,c)),h=n(f,d,c)):y?(p=t(l,c),g=!u(p,f),f=p,g&&(h=n(f,d,c)),h):h}return function(o,i){return s?p(o,i):(f=t(l=o,c=i),d=e(r,c),h=n(f,d,c),s=!0,h)}}function B(t,e){var n=e.initMapStateToProps,r=e.initMapDispatchToProps,o=e.initMergeProps,i=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(e,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(t,i),u=r(t,i),s=o(t,i);return(i.pure?W:q)(a,u,s,t,i)}var H=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function V(t,e,n){for(var r=e.length-1;r>=0;r--){var o=e[r](t);if(o)return o}return function(e,r){throw new Error("Invalid value of type "+typeof t+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function G(t,e){return t===e}var K=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.connectHOC,n=void 0===e?x:e,r=t.mapStateToPropsFactories,o=void 0===r?I:r,i=t.mapDispatchToPropsFactories,a=void 0===i?F:i,u=t.mergePropsFactories,s=void 0===u?z:u,l=t.selectorFactory,c=void 0===l?B:l;return function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,l=void 0===u||u,f=i.areStatesEqual,d=void 0===f?G:f,h=i.areOwnPropsEqual,p=void 0===h?E:h,g=i.areStatePropsEqual,v=void 0===g?E:g,y=i.areMergedPropsEqual,m=void 0===y?E:y,b=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=V(t,o,"mapStateToProps"),x=V(e,a,"mapDispatchToProps"),C=V(r,s,"mergeProps");return n(c,H({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:w,initMapDispatchToProps:x,initMergeProps:C,pure:l,areStatesEqual:d,areOwnPropsEqual:p,areStatePropsEqual:v,areMergedPropsEqual:m},b))}}();n.d(e,"Provider",function(){return l}),n.d(e,"createProvider",function(){return s}),n.d(e,"connectAdvanced",function(){return x}),n.d(e,"connect",function(){return K})},function(t,e,n){var r=n(41)("wks"),o=n(28),i=n(7).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(64),o=n(44);t.exports=function(t){return r(o(t))}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(11),o=n(30);t.exports=n(10)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(7),o=n(12),i=n(68),a=n(17),u=n(9),s=function(t,e,n){var l,c,f,d=t&s.F,h=t&s.G,p=t&s.S,g=t&s.P,v=t&s.B,y=t&s.W,m=h?o:o[e]||(o[e]={}),b=m.prototype,w=h?r:p?r[e]:(r[e]||{}).prototype;for(l in h&&(n=e),n)(c=!d&&w&&void 0!==w[l])&&u(m,l)||(f=c?w[l]:n[l],m[l]=h&&"function"!=typeof w[l]?n[l]:v&&c?i(f,r):y&&w[l]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):g&&"function"==typeof f?i(Function.call,f):f,g&&((m.virtual||(m.virtual={}))[l]=f,t&s.R&&b&&!b[l]&&a(b,l,f)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"c",function(){return u}),n.d(e,"b",function(){return l});var r=[],o=0;function i(t){try{u(),t()}finally{s()}}function a(t){r.push(t),o||(u(),l())}function u(){o++}function s(){o--}function l(){s();for(var t=void 0;!o&&void 0!==(t=r.shift());)i(t)}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(16);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getColor=e.brighterColor=e.itemsColors=e.colors=void 0;var r=n(79),o=e.colors={orange:"rgb(255, 127, 14)",blue:"rgb(31, 119, 180)",green:"rgb(44, 160, 44)",red:"rgb(214, 39, 40)"},i=e.itemsColors={apartments:"orange",house:"green",other:"blue",unknown:"red"};e.brighterColor=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(0,r.color)(t).brighter([e]).toString()},e.getColor=function(t){return o[i[t]]}},function(t,e,n){"use strict";e.__esModule=!0;var r=a(n(109)),o=a(n(105)),i=a(n(60));function a(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,i.default)(e)));t.prototype=(0,o.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(r.default?(0,r.default)(t,e):t.__proto__=e)}},function(t,e,n){"use strict";e.__esModule=!0;var r,o=n(60),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,i.default)(e))&&"function"!=typeof e?t:e}},function(t,e,n){"use strict";e.__esModule=!0;var r,o=n(134),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,i.default)(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(65),o=n(40);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var l;if(void 0===e)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,s],f=0;(l=new Error(e.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,a,u){if(!t){var s;if(void 0===e)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(s=new Error(e.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(t,e,n){var r=n(7),o=n(12),i=n(38),a=n(34),u=n(11).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){e.f=n(14)},function(t,e,n){var r=n(11).f,o=n(9),i=n(14)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(21),o=n(126),i=n(40),a=n(42)("IE_PROTO"),u=function(){},s=function(){var t,e=n(66)("iframe"),r=i.length;for(e.style.display="none",n(125).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[i[r]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=s(),void 0===e?n:o(n,e)}},function(t,e){t.exports={}},function(t,e){t.exports=!0},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(7),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){var r=n(41)("keys"),o=n(28);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(16);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){"use strict";e.__esModule=!0;var r,o=n(147),i=(r=o)&&r.__esModule?r:{default:r};e.default=i.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.area=e.FETCH_AREA=e.loadAreaData=e.LOAD_AREA_DATA=void 0;var r,o=n(46),i=(r=o)&&r.__esModule?r:{default:r};var a="REQUEST",u="SUCCESS",s="FAILURE";function l(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,i.default)({type:t},e)}var c,f=e.LOAD_AREA_DATA="LOAD_AREA_DATA",d=(e.loadAreaData=function(t){return l(f,{coordinates:t})},e.FETCH_AREA=(c="FETCH_AREA",[a,u,s].reduce(function(t,e){return t[e]=c+"_"+e,t},{})));e.area={request:function(t){return l(d[a],{coordinates:t})},success:function(t){return l(d[u],{features:t})},failure:function(t){return l(d[s],{error:t})}}},function(t,e,n){"use strict";(function(e){var r=n(5),o=n(162),i={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var u,s={adapter:("undefined"!=typeof XMLHttpRequest?u=n(72):void 0!==e&&(u=n(72)),u),transformRequest:[function(t,e){return o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(t){s.headers[t]={}}),r.forEach(["post","put","patch"],function(t){s.headers[t]=r.merge(i)}),t.exports=s}).call(this,n(163))},function(t,e,n){"use strict";n.r(e);var r=n(1);n.d(e,"take",function(){return r.s}),n.d(e,"takem",function(){return r.v}),n.d(e,"put",function(){return r.n}),n.d(e,"all",function(){return r.b}),n.d(e,"race",function(){return r.o}),n.d(e,"call",function(){return r.e}),n.d(e,"apply",function(){return r.c}),n.d(e,"cps",function(){return r.h}),n.d(e,"fork",function(){return r.k}),n.d(e,"spawn",function(){return r.r}),n.d(e,"join",function(){return r.m}),n.d(e,"cancel",function(){return r.f}),n.d(e,"select",function(){return r.p}),n.d(e,"actionChannel",function(){return r.a}),n.d(e,"cancelled",function(){return r.g}),n.d(e,"flush",function(){return r.j}),n.d(e,"getContext",function(){return r.l}),n.d(e,"setContext",function(){return r.q}),n.d(e,"takeEvery",function(){return r.t}),n.d(e,"takeLatest",function(){return r.u}),n.d(e,"throttle",function(){return r.w})},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(u[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(t,e,n){"use strict";n.r(e),n.d(e,"createStore",function(){return s}),n.d(e,"combineReducers",function(){return c}),n.d(e,"bindActionCreators",function(){return d}),n.d(e,"applyMiddleware",function(){return p}),n.d(e,"compose",function(){return h}),n.d(e,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(55),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function u(t){if("object"!==(void 0===t?"undefined":i(t))||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function s(t,e,n){var a;if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var l=t,c=e,f=[],d=f,h=!1;function p(){d===f&&(d=f.slice())}function g(){if(h)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function v(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(h)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return p(),d.push(t),function(){if(e){if(h)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,p();var n=d.indexOf(t);d.splice(n,1)}}}function y(t){if(!u(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(h)throw new Error("Reducers may not dispatch actions.");try{h=!0,c=l(c,t)}finally{h=!1}for(var e=f=d,n=0;n<e.length;n++){(0,e[n])()}return t}return y({type:o.INIT}),(a={dispatch:y,subscribe:v,getState:g,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");l=t,y({type:o.REPLACE})}})[r.a]=function(){var t,e=v;return(t={subscribe:function(t){if("object"!==(void 0===t?"undefined":i(t))||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(g())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t},a}function l(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];0,"function"==typeof t[i]&&(n[i]=t[i])}var a=Object.keys(n);var u=void 0;try{!function(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(t){u=t}return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var s=a[i],c=n[s],f=t[s],d=c(f,e);if(void 0===d){var h=l(s,e);throw new Error(h)}o[s]=d,r=r||d!==f}return r?o:t}}function f(t,e){return function(){return e(t.apply(this,arguments))}}function d(t,e){if("function"==typeof t)return f(t,e);if("object"!==(void 0===t?"undefined":i(t))||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":void 0===t?"undefined":i(t))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),r={},o=0;o<n.length;o++){var a=n[o],u=t[a];"function"==typeof u&&(r[a]=f(u,e))}return r}function h(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}function p(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=t.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},s={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},l=e.map(function(t){return t(s)});return u=h.apply(void 0,l)(i.dispatch),a({},i,{dispatch:u})}}}},function(t,e,n){"use strict";(function(t,r){var o,i=n(76);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var a=Object(i.a)(o);e.a=a}).call(this,n(50),n(173)(t))},function(t,e,n){var r=n(27),o=n(30),i=n(15),a=n(45),u=n(9),s=n(67),l=Object.getOwnPropertyDescriptor;e.f=n(10)?l:function(t,e){if(t=i(t),e=a(e,!0),s)try{return l(t,e)}catch(t){}if(u(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(65),o=n(40).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){t.exports=n(17)},function(t,e,n){"use strict";var r=n(38),o=n(18),i=n(58),a=n(17),u=n(37),s=n(127),l=n(35),c=n(124),f=n(14)("iterator"),d=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,n,p,g,v,y){s(n,e,p);var m,b,w,x=function(t){if(!d&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},C=e+" Iterator",S="values"==g,E=!1,k=t.prototype,_=k[f]||k["@@iterator"]||g&&k[g],P=_||x(g),O=g?S?x("entries"):P:void 0,T="Array"==e&&k.entries||_;if(T&&(w=c(T.call(new t)))!==Object.prototype&&w.next&&(l(w,C,!0),r||"function"==typeof w[f]||a(w,f,h)),S&&_&&"values"!==_.name&&(E=!0,P=function(){return _.call(this)}),r&&!y||!d&&!E&&k[f]||a(k,f,P),u[e]=P,u[C]=h,g)if(m={values:S?P:x("values"),keys:v?P:x("keys"),entries:O},y)for(b in m)b in k||i(k,b,m[b]);else o(o.P+o.F*(d||E),e,m);return m}},function(t,e,n){"use strict";e.__esModule=!0;var r=a(n(131)),o=a(n(119)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};function a(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof o.default&&"symbol"===i(r.default)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":i(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.setFeaturesFilter=function(t){return{type:"SET_FEATURES_FILTER",feature:t}},e.clearFilter=function(){return{type:"CLEAR_FEATURES_FILTER"}}},function(t,e,n){var r=n(44);t.exports=function(t){return Object(r(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(63);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(9),o=n(15),i=n(142)(!1),a=n(42)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),s=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;e.length>s;)r(u,n=e[s++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){var r=n(16),o=n(7).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){t.exports=!n(10)&&!n(20)(function(){return 7!=Object.defineProperty(n(66)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(144);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";var r=n(160);t.exports=function(t,e,n,o,i){var a=new Error(t);return r(a,e,n,o,i)}},function(t,e,n){"use strict";var r=n(5),o=n(161),i=n(159),a=n(158),u=n(157),s=n(71),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(156);t.exports=function(t){return new Promise(function(e,c){var f=t.data,d=t.headers;r.isFormData(f)&&delete d["Content-Type"];var h=new XMLHttpRequest,p="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||u(t.url)||(h=new window.XDomainRequest,p="onload",g=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var v=t.auth.username||"",y=t.auth.password||"";d.Authorization="Basic "+l(v+":"+y)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[p]=function(){if(h&&(4===h.readyState||g)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:t,request:h};o(e,c,r),h=null}},h.onerror=function(){c(s("Network Error",t,null,h)),h=null},h.ontimeout=function(){c(s("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var m=n(155),b=(t.withCredentials||u(t.url))&&t.xsrfCookieName?m.read(t.xsrfCookieName):void 0;b&&(d[t.xsrfHeaderName]=b)}if("setRequestHeader"in h&&r.forEach(d,function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete d[e]:h.setRequestHeader(e,t)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){h&&(h.abort(),c(t),h=null)}),void 0===f&&(f=null),h.send(f)})}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(172),i=(r=o)&&r.__esModule?r:{default:r};e.default=g;var a=n(49),u=n(169),s=n(47),l=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(s);n(61);var c=i.default.mark(h),f=i.default.mark(p),d=i.default.mark(g);function h(t){var e,n=t.coordinates;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,(0,a.put)(s.area.request(n));case 3:return t.next=5,(0,a.call)(u.api.fetchArea,n);case 5:return e=t.sent,t.next=8,(0,a.put)(s.area.success(e.data));case 8:t.next=14;break;case 10:return t.prev=10,t.t0=t.catch(0),t.next=14,(0,a.put)(s.area.failure(t.t0));case 14:case"end":return t.stop()}},c,this,[[0,10]])}function p(){var t,e;return i.default.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=3,(0,a.take)(l.LOAD_AREA_DATA);case 3:return t=n.sent,e=t.coordinates,n.next=7,(0,a.call)(h,{coordinates:e});case 7:n.next=0;break;case 9:case"end":return n.stop()}},f,this)}function g(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.all)([(0,a.fork)(p)]);case 2:case"end":return t.stop()}},d,this)}},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(182)},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){t.exports=function(){"use strict";var t={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function s(l,c,f){if("string"!=typeof c){if(u){var d=a(c);d&&d!==u&&s(l,d,f)}var h=r(c);o&&(h=h.concat(o(c)));for(var p=0;p<h.length;++p){var g=h[p];if(!(t[g]||e[g]||f&&f[g])){var v=i(c,g);try{n(l,g,v)}catch(t){}}}return l}return l}}()},function(t,e,n){"use strict";n.r(e);var r={};n.d(r,"TASK",function(){return o.e}),n.d(r,"SAGA_ACTION",function(){return o.c}),n.d(r,"noop",function(){return o.u}),n.d(r,"is",function(){return o.q}),n.d(r,"deferred",function(){return o.l}),n.d(r,"arrayOfDeffered",function(){return o.g}),n.d(r,"createMockTask",function(){return o.j}),n.d(r,"cloneableGenerator",function(){return o.i}),n.d(r,"asEffect",function(){return u.d}),n.d(r,"CHANNEL_END",function(){return d});var o=n(0),i=n(3),a=n(19),u=n(1),s=n(6),l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var f="proc first argument (Saga function result) must be an iterator",d={toString:function(){return"@@redux-saga/CHANNEL_END"}},h={toString:function(){return"@@redux-saga/TASK_CANCEL"}},p={wildcard:function(){return o.r},default:function(t){return"symbol"===(void 0===t?"undefined":c(t))?function(e){return e.type===t}:function(e){return e.type===String(t)}},array:function(t){return function(e){return t.some(function(t){return g(t)(e)})}},predicate:function(t){return function(e){return t(e)}}};function g(t){return("*"===t?p.wildcard:o.q.array(t)?p.array:o.q.stringableFunc(t)?p.default:o.q.func(t)?p.predicate:p.default)(t)}var v=function(t){return{fn:t}};function y(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return o.u},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.u,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.u,c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},p=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},m=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,b=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"anonymous",w=arguments[8];Object(o.h)(t,o.q.iterator,f);var x=Object(o.n)(U,Object(o.z)("[...effects]","all([...effects])")),C=p.sagaMonitor,S=p.logger,E=p.onError,k=S||o.s,_=function(t){var e=t.sagaStack;!e&&t.stack&&(e=-1!==t.stack.split("\n")[0].indexOf(t.message)?t.stack:"Error: "+t.message+"\n"+t.stack),k("error","uncaught at "+b,e||t.message||t)},P=Object(i.f)(e),O=Object.create(c);j.cancel=o.u;var T=function(t,e,n,r){var i,a;return n._deferredEnd=null,(i={})[o.e]=!0,i.id=t,i.name=e,"done",(a={}).done=a.done||{},a.done.get=function(){if(n._deferredEnd)return n._deferredEnd.promise;var t=Object(o.l)();return n._deferredEnd=t,n._isRunning||(n._error?t.reject(n._error):t.resolve(n._result)),t.promise},i.cont=r,i.joiners=[],i.cancel=A,i.isRunning=function(){return n._isRunning},i.isCancelled=function(){return n._isCancelled},i.isAborted=function(){return n._isAborted},i.result=function(){return n._result},i.error=function(){return n._error},i.setContext=function(t){Object(o.h)(t,o.q.object,Object(o.k)("task",t)),o.v.assign(O,t)},function(t,e){for(var n in e){var r=e[n];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,n,r)}}(i,a),i}(m,b,t,w),M={name:b,cancel:function(){M.isRunning&&!M.isCancelled&&(M.isCancelled=!0,j(h))},isRunning:!0},L=function(t,e,n){var r=[],i=void 0,a=!1;function u(t){l(),n(t,!0)}function s(t){r.push(t),t.cont=function(s,l){a||(Object(o.w)(r,t),t.cont=o.u,l?u(s):(t===e&&(i=s),r.length||(a=!0,n(i))))}}function l(){a||(a=!0,r.forEach(function(t){t.cont=o.u,t.cancel()}),r=[])}return s(e),{addTask:s,cancelAll:l,abort:u,getTasks:function(){return r},taskNames:function(){return r.map(function(t){return t.name})}}}(0,M,N);function A(){t._isRunning&&!t._isCancelled&&(t._isCancelled=!0,L.cancelAll(),N(h))}return w&&(w.cancel=A),t._isRunning=!0,j(),T;function j(e,n){if(!M.isRunning)throw new Error("Trying to resume an already finished generator");try{var r=void 0;n?r=t.throw(e):e===h?(M.isCancelled=!0,j.cancel(),r=o.q.func(t.return)?t.return(h):{done:!0,value:h}):r=e===d?o.q.func(t.return)?t.return():{done:!0}:t.next(e),r.done?(M.isMainRunning=!1,M.cont&&M.cont(r.value)):R(r.value,m,"",j)}catch(t){M.isCancelled&&_(t),M.isMainRunning=!1,M.cont(t,!0)}}function N(e,n){t._isRunning=!1,P.close(),n?(e instanceof Error&&Object.defineProperty(e,"sagaStack",{value:"at "+b+" \n "+(e.sagaStack||e.stack),configurable:!0}),T.cont||(e instanceof Error&&E?E(e):_(e)),t._error=e,t._isAborted=!0,t._deferredEnd&&t._deferredEnd.reject(e)):(t._result=e,t._deferredEnd&&t._deferredEnd.resolve(e)),T.cont&&T.cont(e,n),T.joiners.forEach(function(t){return t.cb(e,n)}),T.joiners=null}function R(t,c){var f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",p=arguments[3],y=Object(o.y)();C&&C.effectTriggered({effectId:y,parentEffectId:c,label:f,effect:t});var m=void 0;function w(t,e){m||(m=!0,p.cancel=o.u,C&&(e?C.effectRejected(y,t):C.effectResolved(y,t)),p(t,e))}w.cancel=o.u,p.cancel=function(){if(!m){m=!0;try{w.cancel()}catch(t){_(t)}w.cancel=o.u,C&&C.effectCancelled(y)}};var S=void 0;return o.q.promise(t)?F(t,w):o.q.helper(t)?D(v(t),y,w):o.q.iterator(t)?I(t,y,b,w):o.q.array(t)?x(t,y,w):(S=u.d.take(t))?function(t,e){var n=t.channel,r=t.pattern,o=t.maybe;n=n||P;var a=function(t){return t instanceof Error?e(t,!0):Object(i.e)(t)&&!o?e(d):e(t)};try{n.take(a,g(r))}catch(t){return e(t,!0)}e.cancel=a.cancel}(S,w):(S=u.d.put(t))?function(t,e){var r=t.channel,i=t.action,u=t.resolve;Object(a.a)(function(){var t=void 0;try{t=(r?r.put:n)(i)}catch(t){if(r||u)return e(t,!0);_(t)}if(!u||!o.q.promise(t))return e(t);F(t,e)})}(S,w):(S=u.d.all(t))?U(S,y,w):(S=u.d.race(t))?function(t,e,n){var r=void 0,a=Object.keys(t),u={};a.forEach(function(e){var s=function(u,s){if(!r)if(s)n.cancel(),n(u,!0);else if(!Object(i.e)(u)&&u!==d&&u!==h){var c;n.cancel(),r=!0;var f=((c={})[e]=u,c);n(o.q.array(t)?[].slice.call(l({},f,{length:a.length})):f)}};s.cancel=o.u,u[e]=s}),n.cancel=function(){r||(r=!0,a.forEach(function(t){return u[t].cancel()}))},a.forEach(function(n){r||R(t[n],e,n,u[n])})}(S,y,w):(S=u.d.call(t))?function(t,e,n){var r=t.context,i=t.fn,a=t.args,u=void 0;try{u=i.apply(r,a)}catch(t){return n(t,!0)}return o.q.promise(u)?F(u,n):o.q.iterator(u)?I(u,e,i.name,n):n(u)}(S,y,w):(S=u.d.cps(t))?function(t,e){var n=t.context,r=t.fn,i=t.args;try{var a=function(t,n){return o.q.undef(t)?e(n):e(t,!0)};r.apply(n,i.concat(a)),a.cancel&&(e.cancel=function(){return a.cancel()})}catch(t){return e(t,!0)}}(S,w):(S=u.d.fork(t))?D(S,y,w):(S=u.d.join(t))?function(t,e){if(t.isRunning()){var n={task:T,cb:e};e.cancel=function(){return Object(o.w)(t.joiners,n)},t.joiners.push(n)}else t.isAborted()?e(t.error(),!0):e(t.result())}(S,w):(S=u.d.cancel(t))?function(t,e){t===o.d&&(t=T);t.isRunning()&&t.cancel();e()}(S,w):(S=u.d.select(t))?function(t,e){var n=t.selector,o=t.args;try{var i=n.apply(void 0,[r()].concat(o));e(i)}catch(t){e(t,!0)}}(S,w):(S=u.d.actionChannel(t))?function(t,n){var r=t.pattern,o=t.buffer,a=g(r);a.pattern=r,n(Object(i.d)(e,o||s.a.fixed(),a))}(S,w):(S=u.d.flush(t))?function(t,e){t.flush(e)}(S,w):(S=u.d.cancelled(t))?function(t,e){e(!!M.isCancelled)}(0,w):(S=u.d.getContext(t))?function(t,e){e(O[t])}(S,w):(S=u.d.setContext(t))?function(t,e){o.v.assign(O,t),e()}(S,w):w(t)}function F(t,e){var n=t[o.a];o.q.func(n)?e.cancel=n:o.q.func(t.abort)&&(e.cancel=function(){return t.abort()}),t.then(e,function(t){return e(t,!0)})}function I(t,o,i,a){y(t,e,n,r,O,p,o,i,a)}function D(t,i,u){var s=t.context,l=t.fn,c=t.args,f=t.detached,d=function(t){var e=t.context,n=t.fn,r=t.args;if(o.q.iterator(n))return n;var i,a,u=void 0,s=void 0;try{u=n.apply(e,r)}catch(t){s=t}return o.q.iterator(u)?u:s?Object(o.t)(function(){throw s}):Object(o.t)((i=void 0,a={done:!1,value:u},function(t){return i?{done:!0,value:t}:(i=!0,a)}))}({context:s,fn:l,args:c});try{Object(a.c)();var h=y(d,e,n,r,O,p,i,l.name,f?null:o.u);f?u(h):d._isRunning?(L.addTask(h),u(h)):d._error?L.abort(d._error):u(h)}finally{Object(a.b)()}}function U(t,e,n){var r=Object.keys(t);if(!r.length)return n(o.q.array(t)?[]:{});var a=0,u=void 0,s={},c={};r.forEach(function(e){var f=function(c,f){u||(f||Object(i.e)(c)||c===d||c===h?(n.cancel(),n(c,f)):(s[e]=c,++a===r.length&&(u=!0,n(o.q.array(t)?o.f.from(l({},s,{length:r.length})):s))))};f.cancel=o.u,c[e]=f}),n.cancel=function(){u||(u=!0,r.forEach(function(t){return c[t].cancel()}))},r.forEach(function(n){return R(t[n],e,n,c[n])})}}var m="runSaga(storeInterface, saga, ...args): saga argument must be a Generator function!";function b(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=void 0;o.q.iterator(t)?(a=t,t=e):(Object(o.h)(e,o.q.func,m),a=e.apply(void 0,r),Object(o.h)(a,o.q.iterator,m));var u=t,s=u.subscribe,l=u.dispatch,c=u.getState,f=u.context,d=u.sagaMonitor,h=u.logger,p=u.onError,g=Object(o.y)();d&&(d.effectTriggered=d.effectTriggered||o.u,d.effectResolved=d.effectResolved||o.u,d.effectRejected=d.effectRejected||o.u,d.effectCancelled=d.effectCancelled||o.u,d.actionDispatched=d.actionDispatched||o.u,d.effectTriggered({effectId:g,root:!0,parentEffectId:0,effect:{root:!0,saga:e,args:r}}));var v=y(a,s,Object(o.A)(l),c,f,{sagaMonitor:d,logger:h,onError:p},g,e.name);return d&&d.effectResolved(g,v),v}var w=n(8),x=n(49);n.d(e,"runSaga",function(){return b}),n.d(e,"END",function(){return i.a}),n.d(e,"eventChannel",function(){return i.d}),n.d(e,"channel",function(){return i.b}),n.d(e,"buffers",function(){return s.a}),n.d(e,"takeEvery",function(){return w.a}),n.d(e,"takeLatest",function(){return w.c}),n.d(e,"throttle",function(){return w.e}),n.d(e,"delay",function(){return o.m}),n.d(e,"CANCEL",function(){return o.a}),n.d(e,"detach",function(){return u.i}),n.d(e,"effects",function(){return x}),n.d(e,"utils",function(){return r});e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.context,n=void 0===e?{}:e,r=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["context"]),a=r.sagaMonitor,u=r.logger,s=r.onError;if(o.q.func(r))throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");if(u&&!o.q.func(u))throw new Error("`options.logger` passed to the Saga middleware is not a function!");if(s&&!o.q.func(s))throw new Error("`options.onError` passed to the Saga middleware is not a function!");if(r.emitter&&!o.q.func(r.emitter))throw new Error("`options.emitter` passed to the Saga middleware is not a function!");function l(t){var e=t.getState,c=t.dispatch,f=Object(i.c)();return f.emit=(r.emitter||o.o)(f.emit),l.run=b.bind(null,{context:n,subscribe:f.subscribe,dispatch:c,getState:e,sagaMonitor:a,logger:u,onError:s}),function(t){return function(e){a&&a.actionDispatched&&a.actionDispatched(e);var n=t(e);return f.emit(e),n}}}return l.run=function(){throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware")},l.setContext=function(t){Object(o.h)(t,o.q.object,Object(o.k)("sagaMiddleware",t)),o.v.assign(n,t)},l}},function(t,e,n){"use strict";n.r(e);var r=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function o(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function i(){}var a="\\s*([+-]?\\d+)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",s="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",l=/^#([0-9a-f]{3})$/,c=/^#([0-9a-f]{6})$/,f=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),d=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),h=new RegExp("^rgba\\("+[a,a,a,u]+"\\)$"),p=new RegExp("^rgba\\("+[s,s,s,u]+"\\)$"),g=new RegExp("^hsl\\("+[u,s,s]+"\\)$"),v=new RegExp("^hsla\\("+[u,s,s,u]+"\\)$"),y={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function m(t){var e;return t=(t+"").trim().toLowerCase(),(e=l.exec(t))?new S((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=c.exec(t))?b(parseInt(e[1],16)):(e=f.exec(t))?new S(e[1],e[2],e[3],1):(e=d.exec(t))?new S(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=h.exec(t))?w(e[1],e[2],e[3],e[4]):(e=p.exec(t))?w(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=g.exec(t))?k(e[1],e[2]/100,e[3]/100,1):(e=v.exec(t))?k(e[1],e[2]/100,e[3]/100,e[4]):y.hasOwnProperty(t)?b(y[t]):"transparent"===t?new S(NaN,NaN,NaN,0):null}function b(t){return new S(t>>16&255,t>>8&255,255&t,1)}function w(t,e,n,r){return r<=0&&(t=e=n=NaN),new S(t,e,n,r)}function x(t){return t instanceof i||(t=m(t)),t?new S((t=t.rgb()).r,t.g,t.b,t.opacity):new S}function C(t,e,n,r){return 1===arguments.length?x(t):new S(t,e,n,null==r?1:r)}function S(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function E(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function k(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new P(t,e,n,r)}function _(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof P)return new P(t.h,t.s,t.l,t.opacity);if(t instanceof i||(t=m(t)),!t)return new P;if(t instanceof P)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),a=Math.max(e,n,r),u=NaN,s=a-o,l=(a+o)/2;return s?(u=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=l<.5?a+o:2-a-o,u*=60):s=l>0&&l<1?0:u,new P(u,s,l,t.opacity)}(t):new P(t,e,n,null==r?1:r)}function P(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function O(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}r(i,m,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),r(S,C,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new S(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new S(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+E(this.r)+E(this.g)+E(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),r(P,_,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new P(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new P(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new S(O(t>=240?t-240:t+120,o,r),O(t,o,r),O(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var T=Math.PI/180,M=180/Math.PI,L=.96422,A=1,j=.82521,N=4/29,R=6/29,F=3*R*R,I=R*R*R;function D(t){if(t instanceof q)return new q(t.l,t.a,t.b,t.opacity);if(t instanceof X){if(isNaN(t.h))return new q(t.l,0,0,t.opacity);var e=t.h*T;return new q(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof S||(t=x(t));var n,r,o=V(t.r),i=V(t.g),a=V(t.b),u=W((.2225045*o+.7168786*i+.0606169*a)/A);return o===i&&i===a?n=r=u:(n=W((.4360747*o+.3850649*i+.1430804*a)/L),r=W((.0139322*o+.0971045*i+.7141733*a)/j)),new q(116*u-16,500*(n-u),200*(u-r),t.opacity)}function U(t,e){return new q(t,0,0,null==e?1:e)}function z(t,e,n,r){return 1===arguments.length?D(t):new q(t,e,n,null==r?1:r)}function q(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function W(t){return t>I?Math.pow(t,1/3):t/F+N}function B(t){return t>R?t*t*t:F*(t-N)}function H(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function V(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function G(t){if(t instanceof X)return new X(t.h,t.c,t.l,t.opacity);if(t instanceof q||(t=D(t)),0===t.a&&0===t.b)return new X(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*M;return new X(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function K(t,e,n,r){return 1===arguments.length?G(t):new X(n,e,t,null==r?1:r)}function Y(t,e,n,r){return 1===arguments.length?G(t):new X(t,e,n,null==r?1:r)}function X(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}r(q,z,o(i,{brighter:function(t){return new q(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new q(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new S(H(3.1338561*(e=L*B(e))-1.6168667*(t=A*B(t))-.4906146*(n=j*B(n))),H(-.9787684*e+1.9161415*t+.033454*n),H(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),r(X,Y,o(i,{brighter:function(t){return new X(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new X(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return D(this).rgb()}}));var $=-.14861,Q=1.78277,J=-.29227,Z=-.90649,tt=1.97294,et=tt*Z,nt=tt*Q,rt=Q*J-Z*$;function ot(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof it)return new it(t.h,t.s,t.l,t.opacity);t instanceof S||(t=x(t));var e=t.r/255,n=t.g/255,r=t.b/255,o=(rt*r+et*e-nt*n)/(rt+et-nt),i=r-o,a=(tt*(n-o)-J*i)/Z,u=Math.sqrt(a*a+i*i)/(tt*o*(1-o)),s=u?Math.atan2(a,i)*M-120:NaN;return new it(s<0?s+360:s,u,o,t.opacity)}(t):new it(t,e,n,null==r?1:r)}function it(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}r(it,ot,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new it(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new it(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*T,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),o=Math.sin(t);return new S(255*(e+n*($*r+Q*o)),255*(e+n*(J*r+Z*o)),255*(e+n*(tt*r)),this.opacity)}})),n.d(e,"color",function(){return m}),n.d(e,"rgb",function(){return C}),n.d(e,"hsl",function(){return _}),n.d(e,"lab",function(){return z}),n.d(e,"hcl",function(){return Y}),n.d(e,"lch",function(){return K}),n.d(e,"gray",function(){return U}),n.d(e,"cubehelix",function(){return ot})},function(t,e,n){var r;r=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}return n.m=t,n.c=e,n.p="",n(0)}(function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))switch(typeof t[e]){case"function":break;case"object":t[e]=function(e){var n=e.slice(1),r=t[e[0]];return function(t,e,o){r.apply(this,[t,e,o].concat(n))}}(t[e]);break;default:t[e]=t[t[e]]}return t}([function(t,e,n){t.exports=n(26)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(null==t)return{};var n={};return Object.keys(t).forEach(function(r){n[r]=e(t[r])}),n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.captureMessage=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r={exceptionType:"MESSAGE",message:e,browserHref:window.location.href};s(r,n),t.addEvent("lr.core.Exception",function(){return r})},e.captureException=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:null)||o.default.computeStackTrace(e),a={exceptionType:"WINDOW",errorType:r.name,message:r.message,browserHref:window.location.href};s(a,n);var u={_stackTrace:(0,i.default)(r)};t.addEvent("lr.core.Exception",function(){return a},u)};var o=a(n(4)),i=a(n(14));function a(t){return t&&t.__esModule?t:{default:t}}function u(t){return/boolean|number|string/.test(void 0===t?"undefined":r(t))}function s(t,e){if(e){var n=!0,r=!1,o=void 0;try{for(var i,a=["level","logger"][Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var s=i.value,l=e[s];u(l)&&(t[s]=l.toString())}}catch(t){r=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}var c=!0,f=!1,d=void 0;try{for(var h,p=["tags","extra"][Symbol.iterator]();!(c=(h=p.next()).done);c=!0){var g=h.value,v=e[g]||{},y={},m=!0,b=!1,w=void 0;try{for(var x,C=Object.keys(v)[Symbol.iterator]();!(m=(x=C.next()).done);m=!0){var S=x.value,E=v[S];u(E)&&(y[S.toString()]=E.toString())}}catch(t){b=!0,w=t}finally{try{!m&&C.return&&C.return()}finally{if(b)throw w}}t[g]=y}}catch(t){f=!0,d=t}finally{try{!c&&p.return&&p.return()}finally{if(f)throw d}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setActive=function(t){a=t},e.default=function(t){var e=t.addRequest,n=t.addResponse,i=XMLHttpRequest,s=new WeakMap,l=!1;return window._lrXMLHttpRequest=XMLHttpRequest,XMLHttpRequest=function(t,c){var f=new i(t,c);if(!a)return f;s.set(f,{xhrId:++u,headers:{}}),(0,o.default)(f,"open",function(t,e){if(!l){var n=s.get(f);n.method=t,n.url=e}}),(0,o.default)(f,"send",function(t){if(!l){var n=s.get(f),o={url:n.url,method:n.method.toUpperCase(),headers:(0,r.default)(n.headers,function(t){return t.join(", ")}),body:t};e("xhr-"+n.xhrId,o)}}),(0,o.default)(f,"setRequestHeader",function(t,e){if(!l){var n=s.get(f);n.headers[t]=n.headers[t]||[],n.headers[t].push(e)}});var d={readystatechange:function(){if(!l&&4===f.readyState){var t=s.get(f),e=f.getAllResponseHeaders().split(/[\r\n]+/).reduce(function(t,e){var n=t,r=e.split(": ");if(r.length>0){var o=r.shift(),i=r.join(": ");t[o]?n[o]+=", "+i:n[o]=i}return n},{}),r=void 0;try{switch(f.responseType){case"json":case"arraybuffer":case"blob":r=f.response;break;case"document":r=f.responseXML;break;case"text":case"":r=f.responseText;break;default:r=""}}catch(t){r="LogRocket: Error accessing response."}var o={url:t.url,status:f.status,headers:e,body:r};n("xhr-"+t.xhrId,o)}}};return Object.keys(d).forEach(function(t){f.addEventListener(t,d[t])}),f},XMLHttpRequest.prototype=i.prototype,["UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE"].forEach(function(t){XMLHttpRequest[t]=i[t]}),function(){l=!0,XMLHttpRequest=i}};var r=i(n(1)),o=i(n(5));function i(t){return t&&t.__esModule?t:{default:t}}var a=!0;var u=0},function(t,e){(function(e){"use strict";var n={collectWindowErrors:!0,debug:!1},r="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},o=[].slice,i="?",a=/^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;function u(){return"undefined"==typeof document||void 0===document.location?"":document.location.href}n.report=function(){var t,e,s=[],l=null,c=null,f=null;function d(t,e){var r=null;if(!e||n.collectWindowErrors){for(var i in s)if(s.hasOwnProperty(i))try{s[i].apply(null,[t].concat(o.call(arguments,2)))}catch(t){r=t}if(r)throw r}}function h(e,r,o,s,l){if(f)n.computeStackTrace.augmentStackTraceWithInitialElement(f,r,o,e),p();else if(l)d(n.computeStackTrace(l),!0);else{var c,h={url:r,line:o,column:s},g=void 0,v=e;if("[object String]"==={}.toString.call(e))(c=e.match(a))&&(g=c[1],v=c[2]);h.func=i,d({name:g,message:v,url:u(),stack:[h]},!0)}return!!t&&t.apply(this,arguments)}function p(){var t=f,e=l;l=null,f=null,c=null,d.apply(null,[t,!1].concat(e))}function g(t,e){var r=o.call(arguments,1);if(f){if(c===t)return;p()}var i=n.computeStackTrace(t);if(f=i,c=t,l=r,setTimeout(function(){c===t&&p()},i.incomplete?2e3:0),!1!==e)throw t}return g.subscribe=function(n){e||(t=r.onerror,r.onerror=h,e=!0),s.push(n)},g.unsubscribe=function(t){for(var e=s.length-1;e>=0;--e)s[e]===t&&s.splice(e,1)},g.uninstall=function(){e&&(r.onerror=t,e=!1,t=void 0),s=[]},g}(),n.computeStackTrace=function(){function t(t){if(void 0!==t.stack&&t.stack){for(var e,n,r=/^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,o=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|resource|\[native).*?)(?::(\d+))?(?::(\d+))?\s*$/i,a=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,s=t.stack.split("\n"),l=[],c=(/^(.*) is undefined$/.exec(t.message),0),f=s.length;c<f;++c){if(e=r.exec(s[c])){var d=e[2]&&-1!==e[2].indexOf("native");n={url:d?null:e[2],func:e[1]||i,args:d?[e[2]]:[],line:e[3]?+e[3]:null,column:e[4]?+e[4]:null}}else if(e=a.exec(s[c]))n={url:e[2],func:e[1]||i,args:[],line:+e[3],column:e[4]?+e[4]:null};else{if(!(e=o.exec(s[c])))continue;n={url:e[3],func:e[1]||i,args:e[2]?e[2].split(","):[],line:e[4]?+e[4]:null,column:e[5]?+e[5]:null}}!n.func&&n.line&&(n.func=i),l.push(n)}return l.length?(l[0].column||void 0===t.columnNumber||(l[0].column=t.columnNumber+1),{name:t.name,message:t.message,url:u(),stack:l}):null}}function e(t,e,n,r){var o={url:e,line:n};if(o.url&&o.line){if(t.incomplete=!1,o.func||(o.func=i),t.stack.length>0&&t.stack[0].url===o.url){if(t.stack[0].line===o.line)return!1;if(!t.stack[0].line&&t.stack[0].func===o.func)return t.stack[0].line=o.line,!1}return t.stack.unshift(o),t.partial=!0,!0}return t.incomplete=!0,!1}function r(t,a){for(var s,l,c=/function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,f=[],d={},h=!1,p=r.caller;p&&!h;p=p.caller)if(p!==o&&p!==n.report){if(l={url:null,func:i,line:null,column:null},p.name?l.func=p.name:(s=c.exec(p.toString()))&&(l.func=s[1]),void 0===l.func)try{l.func=s.input.substring(0,s.input.indexOf("{"))}catch(t){}d[""+p]?h=!0:d[""+p]=!0,f.push(l)}a&&f.splice(0,a);var g={name:t.name,message:t.message,url:u(),stack:f};return e(g,t.sourceURL||t.fileName,t.line||t.lineNumber,t.message||t.description),g}function o(e,o){var i=null;o=null==o?0:+o;try{if(i=t(e))return i}catch(t){if(n.debug)throw t}try{if(i=r(e,o+1))return i}catch(t){if(n.debug)throw t}return{name:e.name,message:e.message,url:u()}}return o.augmentStackTraceWithInitialElement=e,o.computeStackTraceFromStackProp=t,o}(),t.exports=n}).call(e,function(){return this}())},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var r=t[e];return t[e]=function(){for(var t=void 0,e=arguments.length,o=Array(e),i=0;i<e;i++)o[i]=arguments[i];return r&&(t=r.apply(this,o)),n.apply(this,o),t},function(){t[e]=r}}},function(t,e,n){t.exports=n(23)},[27,8],function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(9),i=(r=o)&&r.__esModule?r:{default:r};e.default=i.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(t){var e=[];return["log","warn","info","error","debug"].forEach(function(n){e.push((0,a.default)(console,n,function(){for(var e=arguments.length,o=Array(e),i=0;i<e;i++)o[i]=arguments[i];t.addEvent("lr.core.LogEvent",function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).isEnabled,e=void 0===t||t;return"object"===(void 0===e?"undefined":r(e))&&!1===e[n]||!1===e?null:{logLevel:n.toUpperCase(),args:o}})}))}),function(){e.forEach(function(t){return t()})}};var o,i=n(5),a=(o=i)&&o.__esModule?o:{default:o}},[27,11],function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Capture=e.registerExceptions=void 0;var r,o=n(13),i=(r=o)&&r.__esModule?r:{default:r},a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(2));e.registerExceptions=i.default,e.Capture=a},function(t,e,n){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(4),a=(r=i)&&r.__esModule?r:{default:r};var u=Object.prototype;function s(t){return void 0===t}function l(t){return"function"==typeof t}function c(t,e){return u.hasOwnProperty.call(t,e)}function f(t,e,n,r){var o=t[e];t[e]=n(o),r&&r.push([t,e,o])}var d="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},h=(d.document,function(){function t(e){var n=e.captureException;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._errorHandler=this._errorHandler.bind(this),this._ignoreOnError=0,this._wrappedBuiltIns=[],this.captureException=n,a.default.report.subscribe(this._errorHandler),this._instrumentTryCatch()}return o(t,[{key:"uninstall",value:function(){var t;for(a.default.report.unsubscribe(this._errorHandler);this._wrappedBuiltIns.length;){var e=(t=this._wrappedBuiltIns.shift())[0],n=t[1],r=t[2];e[n]=r}}},{key:"_errorHandler",value:function(t){this._ignoreOnError||this.captureException(t)}},{key:"_ignoreNextOnError",value:function(){var t=this;this._ignoreOnError+=1,setTimeout(function(){t._ignoreOnError-=1})}},{key:"context",value:function(t,e,n){return l(t)&&(n=e||[],e=t,t=void 0),this.wrap(t,e).apply(this,n)}},{key:"wrap",value:function(t,e,n){var r=this;if(s(e)&&!l(t))return t;if(l(t)&&(e=t,t=void 0),!l(e))return e;try{if(e.__lr__)return e;if(e.__lr_wrapper__)return e.__lr_wrapper__}catch(t){return e}function o(){var o=[],i=arguments.length,u=!t||t&&!1!==t.deep;for(n&&l(n)&&n.apply(this,arguments);i--;)o[i]=u?r.wrap(t,arguments[i]):arguments[i];try{return e.apply(this,o)}catch(e){throw r._ignoreNextOnError(),r.captureException(a.default.computeStackTrace(e),t),e}}for(var i in e)c(e,i)&&(o[i]=e[i]);return o.prototype=e.prototype,e.__lr_wrapper__=o,o.__lr__=!0,o.__inner__=e,o}},{key:"_instrumentTryCatch",value:function(){var t=this,e=t._wrappedBuiltIns;function n(e){return function(n,r){for(var o=new Array(arguments.length),i=0;i<o.length;++i)o[i]=arguments[i];var a=o[0];return l(a)&&(o[0]=t.wrap(a)),e.apply?e.apply(this,o):e(o[0],o[1])}}f(d,"setTimeout",n,e),f(d,"setInterval",n,e),d.requestAnimationFrame&&f(d,"requestAnimationFrame",function(e){return function(n){return e(t.wrap(n))}},e);for(var r,o,i=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"],a=0;a<i.length;a++)o=void 0,(o=d[r=i[a]]&&d[r].prototype)&&o.hasOwnProperty&&o.hasOwnProperty("addEventListener")&&(f(o,"addEventListener",function(e){return function(n,r,o,i){try{r&&r.handleEvent&&(r.handleEvent=t.wrap(r.handleEvent))}catch(t){}return e.call(this,n,t.wrap(r,void 0,void 0),o,i)}},e),f(o,"removeEventListener",function(t){return function(e,n,r,o){try{n=n&&(n.__lr_wrapper__?n.__lr_wrapper__:n)}catch(t){}return t.call(this,e,n,r,o)}},e));var u=d.jQuery||d.$;u&&u.fn&&u.fn.ready&&f(u.fn,"ready",function(e){return function(n){return e.call(this,t.wrap(n))}},e)}}]),t}());e.default=h}).call(e,function(){return this}())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=new i.default({captureException:function(e){a.captureException(t,null,null,e)}}),n=function(e){t.addEvent("lr.core.Exception",function(){return{exceptionType:"UNHANDLED_REJECTION",message:e.reason||"Unhandled Promise rejection"}})};return window.addEventListener("unhandledrejection",n),function(){window.removeEventListener("unhandledrejection",n),e.uninstall()}};var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r},a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(2))},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){function e(t){return null===t?void 0:t}return t.stack?t.stack.map(function(t){return{lineNumber:e(t.line),columnNumber:e(t.column),fileName:e(t.url),functionName:e(t.func)}}):void 0}},[27,17],function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3);function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var i=[];function a(t){if(t.fetch&&t.Promise){var e,n,a=t.fetch.polyfill;t.fetch=(e=t.fetch,n=0,function(){for(var t=arguments.length,a=Array(t),u=0;u<t;u++)a[u]=arguments[u];return function(t,e){for(var n=arguments.length,a=Array(n>2?n-2:0),u=2;u<n;u++)a[u-2]=arguments[u];var s=i.reduce(function(t,e){return[e].concat(t)},[]),l=Promise.resolve(a);return s.forEach(function(t){var n=t.request,r=t.requestError;(n||r)&&(l=l.then(function(t){return n.apply(void 0,[e].concat(o(t)))},function(t){return r.apply(void 0,[e].concat(o(t)))}))}),l=l.then(function(e){(0,r.setActive)(!1);var n=void 0,i=void 0;try{n=t.apply(void 0,o(e))}catch(t){i=t}if((0,r.setActive)(!0),i)throw i;return n}),s.forEach(function(t){var n=t.response,r=t.responseError;(n||r)&&(l=l.then(function(t){return n(e,t)},function(t){return r&&r(e,t)}))}),l}.apply(void 0,[e,n++].concat(a))}),a&&(t.fetch.polyfill=a)}}var u=!1;e.default={register:function(t){return u||(u=!0,a(window)),i.push(t),function(){var e=i.indexOf(t);e>=0&&i.splice(e,1)}},clear:function(){i=[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(t){var e={},n=function(t){var e=t;if("object"===(void 0===t?"undefined":r(t))&&null!=t){var n=Object.getPrototypeOf(t);n!==Object.prototype&&null!==n||(e=JSON.stringify(t))}if(e&&e.length&&e.length>4096e3&&"string"==typeof e){var o=e.substring(0,1e3);return o+" ... LogRocket truncating to first 1000 characters.\n      Keep data under 4MB to prevent truncation. https://docs.logrocket.com/reference#network"}return t},u=function(r,o){var i=o.method;t.addEvent("lr.network.RequestEvent",function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=t.isEnabled,s=void 0===u||u,l=t.requestSanitizer,c=void 0===l?function(t){return t}:l;if(!s)return null;var f=null;try{f=c(o)}catch(t){console.error(t)}if(f){var d=document.createElement("a");return d.href=f.url,{reqId:r,url:d.href,headers:(0,a.default)(f.headers,function(t){return""+t}),body:n(f.body),method:i,referrer:f.referrer||void 0,mode:f.mode||void 0,credentials:f.credentials||void 0}}return e[r]=!0,null})},s=function(r,o){var i=o.status;t.addEvent("lr.network.ResponseEvent",function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=t.isEnabled,s=void 0===u||u,l=t.responseSanitizer,c=void 0===l?function(t){return t}:l;if(!s)return null;if(e[r])return delete e[r],null;var f=null;try{f=c(o)}catch(t){console.error(t)}return f?{reqId:r,status:f.status,headers:(0,a.default)(f.headers,function(t){return""+t}),body:n(f.body)}:{reqId:r,status:i,headers:{},body:null}})},l=(0,o.default)({addRequest:u,addResponse:s}),c=(0,i.default)({addRequest:u,addResponse:s});return function(){l(),c()}};var o=u(n(18)),i=u(n(3)),a=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(t){var e=t.addRequest,n=t.addResponse;return i.default.register({request:function(t){for(var n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];return("undefined"!=typeof Request&&o[0]instanceof Request?o[0].clone().text().then(function(t){return r({},s(o[0]),{body:t})}):Promise.resolve(r({},s(o[1]),{url:""+o[0],body:(o[1]||{}).body}))).then(function(n){return e("fetch-"+t,n),o})},requestError:function(t,e){return Promise.reject(e)},response:function(t,e){var r=void 0;try{r=e.clone().text()}catch(t){r=Promise.resolve("LogRocket fetch error: "+t.message)}return r.then(function(r){var o={url:e.url,status:e.status,headers:u(e.headers),body:r};return n("fetch-"+t,o),e})},responseError:function(t,e){var r={url:void 0,status:0,headers:{},body:""+e};return n("fetch-"+t,r),Promise.reject(e)}})};var o=a(n(1)),i=a(n(16));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){return(0,o.default)(function(t){if(null==t||"function"!=typeof t.forEach)return t;var e={};return t.forEach(function(t,n){e[n]?e[n]=e[n]+","+t:e[n]=""+t}),e}(t),function(t){return""+t})};function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{url:t.url,headers:u(t.headers),method:t.method&&t.method.toUpperCase(),referrer:t.referrer||void 0,mode:t.mode||void 0,credentials:t.credentials||void 0}}},[27,22],function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.stateSanitizer,o=void 0===n?function(t){return t}:n,i=e.actionSanitizer,s=void 0===i?function(t){return t}:i;return function(e){return function(n,i,l){var c=e(n,i,l),f=c.dispatch,d=u++;t.addEvent("lr.redux.InitialState",function(){var t=void 0;try{t=o(c.getState())}catch(t){console.error(t.toString())}return{state:t,storeId:d}});return r({},c,{dispatch:function(e){var n=(0,a.default)(),r=void 0,i=void 0;try{i=f(e)}catch(t){r=t}finally{var u=(0,a.default)()-n;t.addEvent("lr.redux.ReduxAction",function(){var t=null,n=null;try{t=o(c.getState()),n=s(e)}catch(t){console.error(t.toString())}return t&&n?{storeId:d,action:n,duration:u,stateDelta:t}:null})}if(r)throw r;return i}})}}};var o,i=n(6),a=(o=i)&&o.__esModule?o:{default:o};var u=0},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.stateSanitizer,r=void 0===n?function(t){return t}:n,o=e.actionSanitizer,u=void 0===o?function(t){return t}:o;return function(e){var n=a++;return t.addEvent("lr.redux.InitialState",function(){var t=void 0;try{t=r(e.getState())}catch(t){console.error(t.toString())}return{state:t,storeId:n}}),function(o){return function(a){var s=(0,i.default)(),l=void 0,c=void 0;try{c=o(a)}catch(t){l=t}finally{var f=(0,i.default)()-s;t.addEvent("lr.redux.ReduxAction",function(){var t=null,o=null;try{t=r(e.getState()),o=u(a)}catch(t){console.error(t.toString())}return t&&o?{storeId:n,action:o,duration:f,stateDelta:t}:null})}if(l)throw l;return c}}}};var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=0},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createEnhancer=e.createMiddleware=void 0;var r=i(n(20)),o=i(n(21));function i(t){return t&&t.__esModule?t:{default:t}}e.createMiddleware=o.default,e.createEnhancer=r.default},function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=Date.now.bind(Date),r=n();e.default="undefined"!=typeof performance&&performance.now?performance.now.bind(performance):function(){return n()-r},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MAX_QUEUE_SIZE=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(15)),a=n(10),u=l(n(7)),s=n(19);function l(t){return t&&t.__esModule?t:{default:t}}var c=e.MAX_QUEUE_SIZE=1e3,f=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._buffer=[],["log","info","warn","error","debug"].forEach(function(t){e[t]=function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];e.addEvent("lr.core.LogEvent",function(){return{logLevel:t.toUpperCase(),args:r}},{shouldCaptureStackTrace:!0})}}),this._isInitialized=!1,this._installed=[]}return o(t,[{key:"addEvent",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=Date.now();this._run(function(i){i.addEvent(t,e,r({},n,{timeOverride:o}))})}},{key:"onLogger",value:function(t){for(this._logger=t;this._buffer.length>0;){this._buffer.shift()(this._logger)}}},{key:"_run",value:function(t){if(!this._isDisabled)if(this._logger)t(this._logger);else{if(this._buffer.length>=c)return this._isDisabled=!0,console.warn("LogRocket: script did not load. Check that you have a valid network connection."),void this.uninstall();this._buffer.push(t.bind(this))}}},{key:"init",value:function(t,e){this._isInitialized||(this._installed.push((0,a.registerExceptions)(this)),this._installed.push((0,i.default)(this)),this._installed.push((0,u.default)(this)),this._isInitialized=!0,this._run(function(n){n.init(t,e)}))}},{key:"start",value:function(){this._run(function(t){t.start()})}},{key:"uninstall",value:function(){this._installed.forEach(function(t){return t()}),this._buffer=[],this._run(function(t){t.uninstall()})}},{key:"identify",value:function(t,e){this._run(function(n){n.identify(t,e)})}},{key:"startNewSession",value:function(){this._run(function(t){t.startNewSession()})}},{key:"track",value:function(t){this._run(function(e){e.track(t)})}},{key:"getSessionURL",value:function(t){if("function"!=typeof t)throw new Error("LogRocket: must pass callback to getSessionURL()");this._run(function(e){e.getSessionURL?e.getSessionURL(t):t(e.recordingURL)})}},{key:"getVersion",value:function(t){this._run(function(e){t(e.version)})}},{key:"startTransaction",value:function(t){this.addEvent("lr.transaction.Start",function(){return{id:t}})}},{key:"endTransaction",value:function(t){this.addEvent("lr.transaction.End",function(){return{id:t}})}},{key:"captureMessage",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};a.Capture.captureMessage(this,t,e)}},{key:"captureException",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};a.Capture.captureException(this,t,e)}},{key:"reduxEnhancer",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.createEnhancer)(this,t)}},{key:"reduxMiddleware",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.createMiddleware)(this,t)}},{key:"version",get:function(){return this._logger&&this._logger.version}},{key:"sessionURL",get:function(){return this._logger&&this._logger.recordingURL}},{key:"recordingURL",get:function(){return this._logger&&this._logger.recordingURL}},{key:"recordingID",get:function(){return this._logger&&this._logger.recordingID}},{key:"threadID",get:function(){return this._logger&&this._logger.threadID}},{key:"tabID",get:function(){return this._logger&&this._logger.tabID}}]),t}();e.default=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};if("undefined"!=typeof navigator&&"ReactNative"===navigator.product)throw new Error(a);if("undefined"!=typeof window){if(window._disableLogRocket)return u();if(window.MutationObserver){window._lrMutationObserver=window.MutationObserver;var e=new i.default;return t(e),e}}return u()};var r,o=n(24),i=(r=o)&&r.__esModule?r:{default:r};var a="LogRocket does not yet support React Native.",u=function(){return{init:function(){},uninstall:function(){},log:function(){},info:function(){},warn:function(){},error:function(){},debug:function(){},addEvent:function(){},identify:function(){},start:function(){},get threadID(){return null},get recordingID(){return null},get recordingURL(){return null},reduxEnhancer:function(){return function(t){return function(){return t.apply(void 0,arguments)}}},reduxMiddleware:function(){return function(){return function(t){return function(e){return t(e)}}}},track:function(){},getSessionURL:function(){},getVersion:function(){},startNewSession:function(){},onLogger:function(){},setClock:function(){},captureMessage:function(){},captureException:function(){}}};t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(25);var i=(0,((r=o)&&r.__esModule?r:{default:r}).default)(function(){var t=document.createElement("script");window.__SDKCONFIG__&&window.__SDKCONFIG__.loggerURL?t.src=window.__SDKCONFIG__.loggerURL:window._lrAsyncScript?t.src=window._lrAsyncScript:t.src="https://cdn.logrocket.io/logger.min.js",t.async=!0,document.head.appendChild(t),t.onload=function(){i.onLogger(new window._LRLogger({sdkVersion:"0.6.12"}))},t.onerror=function(){console.warn("LogRocket: script could not load. Check that you have a valid network connection."),i.uninstall()}});e.default=i,t.exports=e.default},function(t,e,n,r){"use strict";t.exports=n(r)}]))},t.exports=r()},function(t,e,n){var r;"undefined"!=typeof self&&self,r=function(t,e){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){console.warn("[react-ga]",t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t.replace(/^\s+|\s+$/g,"")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.testModeAPI=e.OutboundLink=e.plugin=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.initialize=C,e.ga=S,e.set=E,e.send=k,e.pageview=_,e.modalview=P,e.timing=O,e.event=T,e.exception=M,e.outboundLink=A;var i=h(n(3)),a=h(n(6)),u=h(n(1)),s=h(n(7)),l=h(n(0)),c=h(n(8)),f=h(n(9)),d=h(n(10));function h(t){return t&&t.__esModule?t:{default:t}}var p=!1,g=!0,v=!1,y=!0,m=function(){var t;return v?f.default.ga.apply(f.default,arguments):window.ga?(t=window).ga.apply(t,arguments):(0,l.default)("ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually")};function b(t){return(0,i.default)(t,g)}function w(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var o=n[0];if("function"==typeof m){if("string"!=typeof o)return void(0,l.default)("ga command must be a string");!y&&Array.isArray(t)||m.apply(void 0,n),Array.isArray(t)&&t.forEach(function(t){m.apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}([t+"."+o].concat(n.slice(1))))})}}function x(t,e){t?(e&&(e.debug&&!0===e.debug&&(p=!0),!1===e.titleCase&&(g=!1)),e&&e.gaOptions?m("create",t,e.gaOptions):m("create",t,"auto")):(0,l.default)("gaTrackingID is required in initialize()")}function C(t,e){if(e&&!0===e.testMode)v=!0;else{if("undefined"==typeof window)return!1;(0,s.default)(e)}return y=!e||"boolean"!=typeof e.alwaysSendToDefaultTracker||e.alwaysSendToDefaultTracker,Array.isArray(t)?t.forEach(function(t){"object"===(void 0===t?"undefined":o(t))?x(t.trackingId,t):(0,l.default)("All configs must be an object")}):x(t,e),!0}function S(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.length>0&&(m.apply(void 0,e),p&&((0,c.default)("called ga('arguments');"),(0,c.default)("with arguments: "+JSON.stringify(e)))),window.ga}function E(t,e){t?"object"===(void 0===t?"undefined":o(t))?(0===Object.keys(t).length&&(0,l.default)("empty `fieldsObject` given to .set()"),w(e,"set",t),p&&((0,c.default)("called ga('set', fieldsObject);"),(0,c.default)("with fieldsObject: "+JSON.stringify(t)))):(0,l.default)("Expected `fieldsObject` arg to be an Object"):(0,l.default)("`fieldsObject` is required in .set()")}function k(t,e){w(e,"send",t),p&&((0,c.default)("called ga('send', fieldObject);"),(0,c.default)("with fieldObject: "+JSON.stringify(t)),(0,c.default)("with trackers: "+JSON.stringify(e)))}function _(t,e,n){if(t){var o=(0,u.default)(t);if(""!==o){var i={};if(n&&(i.title=n),w(e,"send",r({hitType:"pageview",page:o},i)),p){(0,c.default)("called ga('send', 'pageview', path);");var a="";n&&(a=" and title: "+n),(0,c.default)("with path: "+o+a)}}else(0,l.default)("path cannot be an empty string in .pageview()")}else(0,l.default)("path is required in .pageview()")}function P(t,e){if(t){var n=(0,a.default)((0,u.default)(t));if(""!==n){var r="/modal/"+n;w(e,"send","pageview",r),p&&((0,c.default)("called ga('send', 'pageview', path);"),(0,c.default)("with path: "+r))}else(0,l.default)("modalName cannot be an empty string or a single / in .modalview()")}else(0,l.default)("modalName is required in .modalview(modalName)")}function O(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.category,n=t.variable,r=t.value,o=t.label,i=arguments[1];if(e&&n&&r&&"number"==typeof r){var a={hitType:"timing",timingCategory:b(e),timingVar:b(n),timingValue:r};o&&(a.timingLabel=b(o)),k(a,i)}else(0,l.default)("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number")}function T(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],n=t.category,r=t.action,o=t.label,i=t.value,a=t.nonInteraction,u=t.transport,s=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["category","action","label","value","nonInteraction","transport"]);if(n&&r){var c={hitType:"event",eventCategory:b(n),eventAction:b(r)};o&&(c.eventLabel=b(o)),void 0!==i&&("number"!=typeof i?(0,l.default)("Expected `args.value` arg to be a Number."):c.eventValue=i),void 0!==a&&("boolean"!=typeof a?(0,l.default)("`args.nonInteraction` must be a boolean."):c.nonInteraction=a),void 0!==u&&("string"!=typeof u?(0,l.default)("`args.transport` must be a string."):(-1===["beacon","xhr","image"].indexOf(u)&&(0,l.default)("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),c.transport=u)),Object.keys(s).filter(function(t){return"dimension"===t.substr(0,"dimension".length)}).forEach(function(t){c[t]=s[t]}),Object.keys(s).filter(function(t){return"metric"===t.substr(0,"metric".length)}).forEach(function(t){c[t]=s[t]}),k(c,e)}else(0,l.default)("args.category AND args.action are required in event()")}function M(t,e){var n=t.description,r=t.fatal,o={hitType:"exception"};n&&(o.exDescription=b(n)),void 0!==r&&("boolean"!=typeof r?(0,l.default)("`args.fatal` must be a boolean."):o.exFatal=r),k(o,e)}var L=e.plugin={require:function(t,e){if(t){var n=(0,u.default)(t);if(""!==n)if(e){if("object"!==(void 0===e?"undefined":o(e)))return void(0,l.default)("Expected `options` arg to be an Object");0===Object.keys(e).length&&(0,l.default)("Empty `options` given to .require()"),S("require",n,e),p&&(0,c.default)("called ga('require', '"+n+"', "+JSON.stringify(e))}else S("require",n),p&&(0,c.default)("called ga('require', '"+n+"');");else(0,l.default)("`name` cannot be an empty string in .require()")}else(0,l.default)("`name` is required in .require()")},execute:function(t,e){var n=void 0,r=void 0;if(1==(arguments.length<=2?0:arguments.length-2)?n=arguments.length<=2?void 0:arguments[2]:(r=arguments.length<=2?void 0:arguments[2],n=arguments.length<=3?void 0:arguments[3]),"string"!=typeof t)(0,l.default)("Expected `pluginName` arg to be a String.");else if("string"!=typeof e)(0,l.default)("Expected `action` arg to be a String.");else{var o=t+":"+e;n=n||null,r&&n?(S(o,r,n),p&&((0,c.default)("called ga('"+o+"');"),(0,c.default)('actionType: "'+r+'" with payload: '+JSON.stringify(n)))):n?(S(o,n),p&&((0,c.default)("called ga('"+o+"');"),(0,c.default)("with payload: "+JSON.stringify(n)))):(S(o),p&&(0,c.default)("called ga('"+o+"');"))}}};function A(t,e,n){if("function"==typeof e)if(t&&t.label){var r={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:b(t.label)},o=!1,i=setTimeout(function(){o=!0,e()},250);r.hitCallback=function(){clearTimeout(i),o||e()},k(r,n)}else(0,l.default)("args.label is required in outboundLink()");else(0,l.default)("hitCallback function is required")}d.default.origTrackLink=d.default.trackLink,d.default.trackLink=A;var j=e.OutboundLink=d.default;e.testModeAPI=f.default;e.default={initialize:C,ga:S,set:E,send:k,pageview:_,modalview:P,timing:O,event:T,exception:M,plugin:L,outboundLink:A,OutboundLink:j,testModeAPI:f.default}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if((0,r.default)(t))return(0,i.default)("This arg looks like an email address, redacting."),u;if(e)return(0,o.default)(t);return t};var r=a(n(4)),o=a(n(5)),i=a(n(0));function a(t){return t&&t.__esModule?t:{default:t}}var u="REDACTED (Potential Email Address)"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return/[^@]+@[^@]+/.test(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,i.default)(t).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,function(t,e,n){return e>0&&e+t.length!==n.length&&t.search(a)>-1&&":"!==n.charAt(e-2)&&("-"!==n.charAt(e+t.length)||"-"===n.charAt(e-1))&&n.charAt(e-1).search(/[^\s-]/)<0?t.toLowerCase():t.substr(1).search(/[A-Z]|\../)>-1?t:t.charAt(0).toUpperCase()+t.substr(1)})};var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r};var a=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){if("/"===t.substring(0,1))return t.substring(1);return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e,n,r,o,i,a,u;e=window,n=document,r="script",o=t&&t.gaAddress?t.gaAddress:"https://www.google-analytics.com/analytics.js",i="ga",e.GoogleAnalyticsObject=i,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,a=n.createElement(r),u=n.getElementsByTagName(r)[0],a.async=1,a.src=o,u.parentNode.insertBefore(a,u)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){console.info("[react-ga]",t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=e.gaCalls=[];e.default={calls:r,ga:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];r.push([].concat(e))}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(11),a=l(i),u=l(n(12)),s=l(n(0));function l(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var f="_blank",d=1,h=function(t){function e(){var t,n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i))),r.handleClick=function(t){var n=r.props,o=n.target,i=n.eventLabel,a=n.to,u=n.onClick,s={label:i},l=o!==f,c=!(t.ctrlKey||t.shiftKey||t.metaKey||t.button===d);l&&c?(t.preventDefault(),e.trackLink(s,function(){window.location.href=a})):e.trackLink(s,function(){}),u&&u(t)},c(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.Component),o(e,[{key:"render",value:function(){var t=r({},this.props,{href:this.props.to,onClick:this.handleClick});return delete t.eventLabel,a.default.createElement("a",t)}}]),e}();h.propTypes={eventLabel:u.default.string.isRequired,target:u.default.string,to:u.default.string,onClick:u.default.func},h.defaultProps={target:null,to:null,onClick:null},h.trackLink=function(){(0,s.default)("ga tracking not enabled")},e.default=h},function(e,n){e.exports=t},function(t,n){t.exports=e}])},t.exports=r(n(2),n(4))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(){return i.default.createElement("div",null,"Heights estimating. Please wait...")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(26)),o=l(n(25)),i=l(n(24)),a=l(n(23)),u=l(n(2)),s=l(n(82));function l(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){return function(e){return function(n){function l(){return(0,r.default)(this,l),(0,i.default)(this,(l.__proto__||Object.getPrototypeOf(l)).apply(this,arguments))}return(0,a.default)(l,n),(0,o.default)(l,[{key:"render",value:function(){var n=!!t||this.props.isLoading,r=r||s.default;return u.default.createElement("div",{className:"item-loader"},n&&u.default.createElement("div",{className:"item-loader__mask"},u.default.createElement(r,null)),u.default.createElement(e,this.props))}}]),l}(u.default.Component)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(83),i=(r=o)&&r.__esModule?r:{default:r};n(186),e.default=i.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n(22);e.default=function(t,e){var n=t.area.features,o=n.reduce(function(t,e){var n=e.properties,r=n.type;n.population;return((t||{}).chart||{})[r]||(t.chart[r]=0),t.chart[r]+=1,t},{chart:{}});return{legend:r(o.chart,e),isAreaSelected:!n.length>0}};var r=function(t,e){return Object.keys(t).reduce(function(n,r){var o=[r,t[r]],i=o[0],a=o[1],u=-1===e.features.indexOf(i);return n.push({name:i,count:a,isActive:u}),n},[])}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(22);e.default=function(t,e){var n=t.area.features.reduce(function(t,n){var r=n.properties,o=r.type;r.population;return-1!==e.features.indexOf(r.type)?(t[o]=0,t):(t[o]||(t[o]=0),t[o]+=1,t)},{});return{data:o(n)}};var o=function(t){var e=[];for(var n in t){var o=(0,r.getColor)(n),i=(0,r.brighterColor)(o),a=t[n];e.push({value:a,color:o,highlight:i,label:n})}return e}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){var r;
/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 1.1.1
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 1.1.1
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
(function(){"use strict";var o=this,i=o.Chart,a=function(t){this.canvas=t.canvas,this.ctx=t;var e=function(t,e){return t["offset"+e]?t["offset"+e]:document.defaultView.getComputedStyle(t).getPropertyValue(e)};this.width=e(t.canvas,"Width")||t.canvas.width,this.height=e(t.canvas,"Height")||t.canvas.height;return this.aspectRatio=this.width/this.height,l.retinaScale(this),this};a.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipTitleTemplate:"<%= label%>",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= datasetLabel %>: <%= value %>",multiTooltipKeyBackground:"#fff",segmentColorDefault:["#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B4B482","#B15928"],segmentHighlightColorDefaults:["#CEF6FF","#47A0DC","#DAFFB2","#5BC854","#FFC2C1","#FF4244","#FFE797","#FFA728","#F2DAFE","#9265C2","#DCDCAA","#D98150"],onAnimationProgress:function(){},onAnimationComplete:function(){}}},a.types={};var u,s,l=a.helpers={},c=l.each=function(t,e,n){var r,o=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length)for(r=0;r<t.length;r++)e.apply(n,[t[r],r].concat(o));else for(var i in t)e.apply(n,[t[i],i].concat(o))},f=l.clone=function(t){var e={};return c(t,function(n,r){t.hasOwnProperty(r)&&(e[r]=n)}),e},d=l.extend=function(t){return c(Array.prototype.slice.call(arguments,1),function(e){c(e,function(n,r){e.hasOwnProperty(r)&&(t[r]=n)})}),t},h=l.merge=function(t,e){var n=Array.prototype.slice.call(arguments,0);return n.unshift({}),d.apply(null,n)},p=l.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var n=0;n<t.length;n++)if(t[n]===e)return n;return-1},g=(l.where=function(t,e){var n=[];return l.each(t,function(t){e(t)&&n.push(t)}),n},l.findNextWhere=function(t,e,n){n||(n=-1);for(var r=n+1;r<t.length;r++){var o=t[r];if(e(o))return o}},l.findPreviousWhere=function(t,e,n){n||(n=t.length);for(var r=n-1;r>=0;r--){var o=t[r];if(e(o))return o}},l.inherits=function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=e.prototype,n.prototype=new r,n.extend=g,t&&d(n.prototype,t),n.__super__=e.prototype,n}),v=l.noop=function(){},y=l.uid=(u=0,function(){return"chart-"+u++}),m=l.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},b=l.amd=n(87),w=l.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},x=l.max=function(t){return Math.max.apply(Math,t)},C=l.min=function(t){return Math.min.apply(Math,t)},S=(l.cap=function(t,e,n){if(w(e)){if(t>e)return e}else if(w(n)&&t<n)return n;return t},l.getDecimalPlaces=function(t){if(t%1!=0&&w(t)){var e=t.toString();if(e.indexOf("e-")<0)return e.split(".")[1].length;if(e.indexOf(".")<0)return parseInt(e.split("e-")[1]);var n=e.split(".")[1].split("e-");return n[0].length+parseInt(n[1])}return 0}),E=l.radians=function(t){return t*(Math.PI/180)},k=(l.getAngleFromPoint=function(t,e){var n=e.x-t.x,r=e.y-t.y,o=Math.sqrt(n*n+r*r),i=2*Math.PI+Math.atan2(r,n);return n<0&&r<0&&(i+=2*Math.PI),{angle:i,distance:o}},l.aliasPixel=function(t){return t%2==0?0:.5}),_=(l.splineCurve=function(t,e,n,r){var o=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),i=Math.sqrt(Math.pow(n.x-e.x,2)+Math.pow(n.y-e.y,2)),a=r*o/(o+i),u=r*i/(o+i);return{inner:{x:e.x-a*(n.x-t.x),y:e.y-a*(n.y-t.y)},outer:{x:e.x+u*(n.x-t.x),y:e.y+u*(n.y-t.y)}}},l.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),P=(l.calculateScaleRange=function(t,e,n,r,o){var i=Math.floor(e/(1.5*n)),a=2>=i,u=[];c(t,function(t){null==t||u.push(t)});var s=C(u),l=x(u);l===s&&(l+=.5,s>=.5&&!r?s-=.5:l+=.5);for(var f=Math.abs(l-s),d=_(f),h=Math.ceil(l/(1*Math.pow(10,d)))*Math.pow(10,d),p=r?0:Math.floor(s/(1*Math.pow(10,d)))*Math.pow(10,d),g=h-p,v=Math.pow(10,d),y=Math.round(g/v);(y>i||2*y<i)&&!a;)if(y>i)v*=2,(y=Math.round(g/v))%1!=0&&(a=!0);else if(o&&d>=0){if(v/2%1!=0)break;v/=2,y=Math.round(g/v)}else v/=2,y=Math.round(g/v);return a&&(v=g/(y=2)),{steps:y,stepValue:v,min:p,max:p+y*v}},l.template=function(t,e){if(t instanceof Function)return t(e);var n,r,o,i={};return r=e,o=/\W/.test(n=t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+n.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):i[n]=i[n],r?o(r):o}),O=(l.generateLabels=function(t,e,n,r){var o=new Array(e);return t&&c(o,function(e,i){o[i]=P(t,{value:n+r*(i+1)})}),o},l.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(1-Math.pow(2,-10*t/1))},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*t)*Math.sin((1*t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.3*1.5*1),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),t<1?r*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-O.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t*1:t<2/2.75?1*(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return t<.5?.5*O.easeInBounce(2*t):.5*O.easeOutBounce(2*t-1)+.5}}),T=l.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},M=(l.cancelAnimFrame=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)},l.animationLoop=function(t,e,n,r,o,i){var a=0,u=O[n]||O.linear,s=function(){var n=++a/e,l=u(n);t.call(i,l,n,a),r.call(i,l,n),a<e?i.animationFrame=T(s):o.apply(i)};T(s)},l.getRelativePosition=function(t){var e,n,r=t.originalEvent||t,o=(t.currentTarget||t.srcElement).getBoundingClientRect();return r.touches?(e=r.touches[0].clientX-o.left,n=r.touches[0].clientY-o.top):(e=r.clientX-o.left,n=r.clientY-o.top),{x:e,y:n}},l.addEvent=function(t,e,n){t.addEventListener?t.addEventListener(e,n):t.attachEvent?t.attachEvent("on"+e,n):t["on"+e]=n}),L=l.removeEvent=function(t,e,n){t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent?t.detachEvent("on"+e,n):t["on"+e]=v},A=(l.bindEvents=function(t,e,n){t.events||(t.events={}),c(e,function(e){t.events[e]=function(){n.apply(t,arguments)},M(t.chart.canvas,e,t.events[e])})},l.unbindEvents=function(t,e){c(e,function(e,n){L(t.chart.canvas,n,e)})}),j=l.getMaximumWidth=function(t){var e=t.parentNode,n=parseInt(R(e,"padding-left"))+parseInt(R(e,"padding-right"));return e?e.clientWidth-n:0},N=l.getMaximumHeight=function(t){var e=t.parentNode,n=parseInt(R(e,"padding-bottom"))+parseInt(R(e,"padding-top"));return e?e.clientHeight-n:0},R=l.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},F=(l.getMaximumSize=l.getMaximumWidth,l.retinaScale=function(t){var e=t.ctx,n=t.canvas.width,r=t.canvas.height;window.devicePixelRatio&&(e.canvas.style.width=n+"px",e.canvas.style.height=r+"px",e.canvas.height=r*window.devicePixelRatio,e.canvas.width=n*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio))}),I=l.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},D=l.fontString=function(t,e,n){return e+" "+t+"px "+n},U=l.longestText=function(t,e,n){t.font=e;var r=0;return c(n,function(e){var n=t.measureText(e).width;r=n>r?n:r}),r},z=l.drawRoundedRectangle=function(t,e,n,r,o,i){t.beginPath(),t.moveTo(e+i,n),t.lineTo(e+r-i,n),t.quadraticCurveTo(e+r,n,e+r,n+i),t.lineTo(e+r,n+o-i),t.quadraticCurveTo(e+r,n+o,e+r-i,n+o),t.lineTo(e+i,n+o),t.quadraticCurveTo(e,n+o,e,n+o-i),t.lineTo(e,n+i),t.quadraticCurveTo(e,n,e+i,n),t.closePath()};a.instances={},d((a.Type=function(t,e,n){this.options=e,this.chart=n,this.id=y(),a.instances[this.id]=this,e.responsive&&this.resize(),this.initialize.call(this,t)}).prototype,{initialize:function(){return this},clear:function(){return I(this.chart),this},stop:function(){return a.animationService.cancelAnimation(this),this},resize:function(t){this.stop();var e=this.chart.canvas,n=j(this.chart.canvas),r=this.options.maintainAspectRatio?n/this.chart.aspectRatio:N(this.chart.canvas);return e.width=this.chart.width=n,e.height=this.chart.height=r,F(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:v,render:function(t){if(t&&this.reflow(),this.options.animation&&!t){var e=new a.Animation;e.numSteps=this.options.animationSteps,e.easing=this.options.animationEasing,e.render=function(t,e){var n=l.easingEffects[e.easing],r=e.currentStep/e.numSteps,o=n(r);t.draw(o,r,e.currentStep)},e.onAnimationProgress=this.options.onAnimationProgress,e.onAnimationComplete=this.options.onAnimationComplete,a.animationService.addAnimation(this,e)}else this.draw(),this.options.onAnimationComplete.call(this);return this},generateLegend:function(){return l.template(this.options.legendTemplate,this)},destroy:function(){this.stop(),this.clear(),A(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete a.instances[this.id]},showTooltip:function(t,e){if(void 0===this.activeElements&&(this.activeElements=[]),function(t){var e=!1;return t.length!==this.activeElements.length?e=!0:(c(t,function(t,n){t!==this.activeElements[n]&&(e=!0)},this),e)}.call(this,t)||e){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var n,r,o=this.datasets.length-1;o>=0&&(n=this.datasets[o].points||this.datasets[o].bars||this.datasets[o].segments,-1===(r=p(n,t[0])));o--);var i=[],u=[],s=function(t){var e,n,o,a,s,c=[],f=[],d=[];return l.each(this.datasets,function(t){(e=t.points||t.bars||t.segments)[r]&&e[r].hasValue()&&c.push(e[r])}),l.each(c,function(t){f.push(t.x),d.push(t.y),i.push(l.template(this.options.multiTooltipTemplate,t)),u.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),s=C(d),o=x(d),a=C(f),n=x(f),{x:a>this.chart.width/2?a:n,y:(s+o)/2}}.call(this,r);new a.MultiTooltip({x:s.x,y:s.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:i,legendColors:u,legendColorBackground:this.options.multiTooltipKeyBackground,title:P(this.options.tooltipTitleTemplate,t[0]),chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else c(t,function(t){var e=t.tooltipPosition();new a.Tooltip({x:Math.round(e.x),y:Math.round(e.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:P(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),a.Type.extend=function(t){var e=this,n=function(){return e.apply(this,arguments)};if(n.prototype=f(e.prototype),d(n.prototype,t),n.extend=a.Type.extend,t.name||e.prototype.name){var r=t.name||e.prototype.name,o=a.defaults[e.prototype.name]?f(a.defaults[e.prototype.name]):{};a.defaults[r]=d(o,t.defaults),a.types[r]=n,a.prototype[r]=function(t,e){var o=h(a.defaults.global,a.defaults[r],e||{});return new n(t,o,this)}}else m("Name not provided for this chart, so it hasn't been registered");return e},d((a.Element=function(t){d(this,t),this.initialize.apply(this,arguments),this.save()}).prototype,{initialize:function(){},restore:function(t){return t?c(t,function(t){this[t]=this._saved[t]},this):d(this,this._saved),this},save:function(){return this._saved=f(this),delete this._saved._saved,this},update:function(t){return c(t,function(t,e){this._saved[e]=this[e],this[e]=t},this),this},transition:function(t,e){return c(t,function(t,n){this[n]=(t-this._saved[n])*e+this._saved[n]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return w(this.value)}}),a.Element.extend=g,a.Point=a.Element.extend({display:!0,inRange:function(t,e){var n=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(e-this.y,2)<Math.pow(n,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),a.Arc=a.Element.extend({inRange:function(t,e){var n=l.getAngleFromPoint(this,{x:t,y:e}),r=n.angle%(2*Math.PI),o=(2*Math.PI+this.startAngle)%(2*Math.PI),i=(2*Math.PI+this.endAngle)%(2*Math.PI)||360,a=i<o?r<=i||r>=o:r>=o&&r<=i,u=n.distance>=this.innerRadius&&n.distance<=this.outerRadius;return a&&u},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,e=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*e,y:this.y+Math.sin(t)*e}},draw:function(t){var e=this.ctx;e.beginPath(),e.arc(this.x,this.y,this.outerRadius<0?0:this.outerRadius,this.startAngle,this.endAngle),e.arc(this.x,this.y,this.innerRadius<0?0:this.innerRadius,this.endAngle,this.startAngle,!0),e.closePath(),e.strokeStyle=this.strokeColor,e.lineWidth=this.strokeWidth,e.fillStyle=this.fillColor,e.fill(),e.lineJoin="bevel",this.showStroke&&e.stroke()}}),a.Rectangle=a.Element.extend({draw:function(){var t=this.ctx,e=this.width/2,n=this.x-e,r=this.x+e,o=this.base-(this.base-this.y),i=this.strokeWidth/2;this.showStroke&&(n+=i,r-=i,o+=i),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(n,this.base),t.lineTo(n,o),t.lineTo(r,o),t.lineTo(r,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y&&e<=this.base}}),a.Animation=a.Element.extend({currentStep:null,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),a.Tooltip=a.Element.extend({draw:function(){var t=this.chart.ctx;t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var e=this.caretPadding=2,n=t.measureText(this.text).width+2*this.xPadding,r=this.fontSize+2*this.yPadding,o=r+this.caretHeight+e;this.x+n/2>this.chart.width?this.xAlign="left":this.x-n/2<0&&(this.xAlign="right"),this.y-o<0&&(this.yAlign="below");var i=this.x-n/2,a=this.y-o;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-e),t.lineTo(this.x+this.caretHeight,this.y-(e+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(e+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+e+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+e),t.lineTo(this.x+this.caretHeight,this.y+e+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+e+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":i=this.x-n+(this.cornerRadius+this.caretHeight);break;case"right":i=this.x-(this.cornerRadius+this.caretHeight)}z(t,i,a,n,r,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,i+n/2,a+r/2)}}}),a.MultiTooltip=a.Element.extend({initialize:function(){this.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=D(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.titleHeight=this.title?1.5*this.titleFontSize:0,this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+this.titleHeight,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,e=U(this.ctx,this.font,this.labels)+this.fontSize+3,n=x([e,t]);this.width=n+2*this.xPadding;var r=this.height/2;this.y-r<0?this.y=r:this.y+r>this.chart.height&&(this.y=this.chart.height-r),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var e=this.y-this.height/2+this.yPadding,n=t-1;return 0===t?e+this.titleHeight/3:e+(1.5*this.fontSize*n+this.fontSize/2)+this.titleHeight},draw:function(){if(this.custom)this.custom(this);else{z(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,l.each(this.labels,function(e,n){t.fillStyle=this.textColor,t.fillText(e,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(n+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[n].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),a.Scale=a.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=S(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(P(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?U(this.ctx,this.font,this.yLabels)+10:0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,e=this.endPoint,n=this.endPoint-this.startPoint;for(this.calculateYRange(n),this.buildYLabels(),this.calculateXLabelRotation();n>this.endPoint-this.startPoint;)n=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(n),this.buildYLabels(),t<this.yLabelWidth&&(this.endPoint=e,this.calculateXLabelRotation())},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,e=this.ctx.measureText(this.xLabels[0]).width,n=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=n/2+3,this.xScalePaddingLeft=e/2>this.yLabelWidth?e/2:this.yLabelWidth,this.xLabelRotation=0,this.display){var r,o=U(this.ctx,this.font,this.xLabels);this.xLabelWidth=o;for(var i=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>i&&0===this.xLabelRotation||this.xLabelWidth>i&&this.xLabelRotation<=90&&this.xLabelRotation>0;)(r=Math.cos(E(this.xLabelRotation)))*n,(t=r*e)+this.fontSize/2>this.yLabelWidth&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=r*o;this.xLabelRotation>0&&(this.endPoint-=Math.sin(E(this.xLabelRotation))*o+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:v,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var e=this.drawingArea()/(this.min-this.max);return this.endPoint-e*(t-this.min)},calculateX:function(t){this.xLabelRotation;var e=(this.width-(this.xScalePaddingLeft+this.xScalePaddingRight))/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),n=e*t+this.xScalePaddingLeft;return this.offsetGridLines&&(n+=e/2),Math.round(n)},update:function(t){l.extend(this,t),this.fit()},draw:function(){var t=this.ctx,e=(this.endPoint-this.startPoint)/this.steps,n=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,c(this.yLabels,function(r,o){var i=this.endPoint-e*o,a=Math.round(i),u=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(r,n-10,i),0!==o||u||(u=!0),u&&t.beginPath(),o>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a+=l.aliasPixel(t.lineWidth),u&&(t.moveTo(n,a),t.lineTo(this.width,a),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(n-5,a),t.lineTo(n,a),t.stroke(),t.closePath()},this),c(this.xLabels,function(e,n){var r=this.calculateX(n)+k(this.lineWidth),o=this.calculateX(n-(this.offsetGridLines?.5:0))+k(this.lineWidth),i=this.xLabelRotation>0,a=this.showVerticalLines;0!==n||a||(a=!0),a&&t.beginPath(),n>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(o,this.endPoint),t.lineTo(o,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(o,this.endPoint),t.lineTo(o,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(r,i?this.endPoint+12:this.endPoint+8),t.rotate(-1*E(this.xLabelRotation)),t.font=this.font,t.textAlign=i?"right":"center",t.textBaseline=i?"middle":"top",t.fillText(e,0,0),t.restore()},this))}}),a.RadialScale=a.Element.extend({initialize:function(){this.size=C([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var e=this.drawingArea/(this.max-this.min);return(t-this.min)*e},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=S(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(P(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,e,n,r,o,i,a,u,s,l,c,f,d=C([this.height/2-this.pointLabelFontSize-5,this.width/2]),h=this.width,p=0;for(this.ctx.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),e=0;e<this.valuesCount;e++)t=this.getPointPosition(e,d),n=this.ctx.measureText(P(this.templateString,{value:this.labels[e]})).width+5,0===e||e===this.valuesCount/2?(r=n/2,t.x+r>h&&(h=t.x+r,o=e),t.x-r<p&&(p=t.x-r,a=e)):e<this.valuesCount/2?t.x+n>h&&(h=t.x+n,o=e):e>this.valuesCount/2&&t.x-n<p&&(p=t.x-n,a=e);s=p,l=Math.ceil(h-this.width),i=this.getIndexAngle(o),u=this.getIndexAngle(a),c=l/Math.sin(i+Math.PI/2),f=s/Math.sin(u+Math.PI/2),c=w(c)?c:0,f=w(f)?f:0,this.drawingArea=d-(f+c)/2,this.setCenterPoint(f,c)},setCenterPoint:function(t,e){var n=this.width-e-this.drawingArea,r=t+this.drawingArea;this.xCenter=(r+n)/2,this.yCenter=this.height/2},getIndexAngle:function(t){return t*(2*Math.PI/this.valuesCount)-Math.PI/2},getPointPosition:function(t,e){var n=this.getIndexAngle(t);return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(c(this.yLabels,function(e,n){if(n>0){var r,o=n*(this.drawingArea/this.steps),i=this.yCenter-o;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,o,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)r=this.getPointPosition(a,this.calculateCenterOffset(this.min+n*this.stepValue)),0===a?t.moveTo(r.x,r.y):t.lineTo(r.x,r.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var u=t.measureText(e).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-u/2-this.backdropPaddingX,i-this.fontSize/2-this.backdropPaddingY,u+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY)}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(e,this.xCenter,i)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var e=this.valuesCount-1;e>=0;e--){var n=null,r=null;if(this.angleLineWidth>0&&e%this.angleLineInterval==0&&(n=this.calculateCenterOffset(this.max),r=this.getPointPosition(e,n),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(r.x,r.y),t.stroke(),t.closePath()),this.backgroundColors&&this.backgroundColors.length==this.valuesCount){null==n&&(n=this.calculateCenterOffset(this.max)),null==r&&(r=this.getPointPosition(e,n));var o=this.getPointPosition(0===e?this.valuesCount-1:e-1,n),i=this.getPointPosition(e===this.valuesCount-1?0:e+1,n),a={x:(o.x+r.x)/2,y:(o.y+r.y)/2},u={x:(r.x+i.x)/2,y:(r.y+i.y)/2};t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.lineTo(r.x,r.y),t.lineTo(u.x,u.y),t.fillStyle=this.backgroundColors[e],t.fill(),t.closePath()}var s=this.getPointPosition(e,this.calculateCenterOffset(this.max)+5);t.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var l=this.labels.length,f=this.labels.length/2,d=f/2,h=e<d||e>l-d,p=e===d||e===l-d;t.textAlign=0===e?"center":e===f?"center":e<f?"left":"right",t.textBaseline=p?"middle":h?"bottom":"top",t.fillText(this.labels[e],s.x,s.y)}}}}}),a.animationService={frameDuration:17,animations:[],dropFrames:0,addAnimation:function(t,e){for(var n=0;n<this.animations.length;++n)if(this.animations[n].chartInstance===t)return void(this.animations[n].animationObject=e);this.animations.push({chartInstance:t,animationObject:e}),1==this.animations.length&&l.requestAnimFrame.call(window,this.digestWrapper)},cancelAnimation:function(t){var e=l.findNextWhere(this.animations,function(e){return e.chartInstance===t});e&&this.animations.splice(e,1)},digestWrapper:function(){a.animationService.startDigest.call(a.animationService)},startDigest:function(){var t=Date.now(),e=0;this.dropFrames>1&&(e=Math.floor(this.dropFrames),this.dropFrames-=e);for(var n=0;n<this.animations.length;n++)null===this.animations[n].animationObject.currentStep&&(this.animations[n].animationObject.currentStep=0),this.animations[n].animationObject.currentStep+=1+e,this.animations[n].animationObject.currentStep>this.animations[n].animationObject.numSteps&&(this.animations[n].animationObject.currentStep=this.animations[n].animationObject.numSteps),this.animations[n].animationObject.render(this.animations[n].chartInstance,this.animations[n].animationObject),this.animations[n].animationObject.currentStep==this.animations[n].animationObject.numSteps&&(this.animations[n].animationObject.onAnimationComplete.call(this.animations[n].chartInstance),this.animations.splice(n,1),n--);var r=(Date.now()-t-this.frameDuration)/this.frameDuration;r>1&&(this.dropFrames+=r),this.animations.length>0&&l.requestAnimFrame.call(window,this.digestWrapper)}},l.addEvent(window,"resize",function(){clearTimeout(s),s=setTimeout(function(){c(a.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}),b?void 0===(r=function(){return a}.apply(e,[]))||(t.exports=r):"object"==typeof t&&t.exports&&(t.exports=a),o.Chart=a,a.noConflict=function(){return o.Chart=i,a}}).call(this),function(){"use strict";var t=this.Chart,e=t.helpers;t.Type.extend({name:"Bar",defaults:{scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>'},initialize:function(n){var r=this.options;this.ScaleClass=t.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,e,n){var o=this.calculateBaseWidth(),i=this.calculateX(n)-o/2,a=this.calculateBarWidth(t);return i+a*e+e*r.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*r.barValueSpacing},calculateBarWidth:function(t){return(this.calculateBaseWidth()-(t-1)*r.barDatasetSpacing)/t}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var n="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),e.each(n,function(t){t&&(t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke)}),this.showTooltip(n)}),this.BarClass=t.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),e.each(n.datasets,function(t,r){var o={label:t.label||null,fillColor:t.fillColor,strokeColor:t.strokeColor,bars:[]};this.datasets.push(o),e.each(t.data,function(e,r){o.bars.push(new this.BarClass({value:e,label:n.labels[r],datasetLabel:t.label,strokeColor:"object"==typeof t.strokeColor?t.strokeColor[r]:t.strokeColor,fillColor:"object"==typeof t.fillColor?t.fillColor[r]:t.fillColor,highlightFill:t.highlightFill?"object"==typeof t.highlightFill?t.highlightFill[r]:t.highlightFill:"object"==typeof t.fillColor?t.fillColor[r]:t.fillColor,highlightStroke:t.highlightStroke?"object"==typeof t.highlightStroke?t.highlightStroke[r]:t.highlightStroke:"object"==typeof t.strokeColor?t.strokeColor[r]:t.strokeColor}))},this)},this),this.buildScale(n.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,n,r){e.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,r,n),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){e.each(this.datasets,function(n,r){e.each(n.bars,t,this,r)},this)},getBarsAtEvent:function(t){for(var n,r=[],o=e.getRelativePosition(t),i=function(t){r.push(t.bars[n])},a=0;a<this.datasets.length;a++)for(n=0;n<this.datasets[a].bars.length;n++)if(this.datasets[a].bars[n].inRange(o.x,o.y))return e.each(this.datasets,i),r;return r},buildScale:function(t){var n=this,r={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var r,o=e.calculateScaleRange((r=[],n.eachBars(function(t){r.push(t.value)}),r),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,o)},xLabels:t,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(r,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(r)},addData:function(t,n){e.each(t,function(t,e){this.datasets[e].bars.push(new this.BarClass({value:t,label:n,datasetLabel:this.datasets[e].label,x:this.scale.calculateBarX(this.datasets.length,e,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[e].strokeColor,fillColor:this.datasets[e].fillColor}))},this),this.scale.addXLabel(n),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){e.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var n=t||1;this.clear();this.chart.ctx;this.scale.draw(n),e.each(this.datasets,function(t,r){e.each(t.bars,function(t,e){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,r,e),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},n).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this.Chart,e=t.helpers,n={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=segments[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>'};t.Type.extend({name:"Doughnut",defaults:n,initialize:function(n){this.segments=[],this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=t.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var n="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(n,function(t){t.fillColor=t.highlightColor}),this.showTooltip(n)}),this.calculateTotal(n),e.each(n,function(t,e){t.color||(t.color="hsl("+360*e/n.length+", 100%, 50%)"),this.addData(t,e,!0)},this),this.render()},getSegmentsAtEvent:function(t){var n=[],r=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(r.x,r.y)&&n.push(t)},this),n},addData:function(e,n,r){var o=void 0!==n?n:this.segments.length;void 0===e.color&&(e.color=t.defaults.global.segmentColorDefault[o%t.defaults.global.segmentColorDefault.length],e.highlight=t.defaults.global.segmentHighlightColorDefaults[o%t.defaults.global.segmentHighlightColorDefaults.length]),this.segments.splice(o,0,new this.SegmentArc({value:e.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:e.color,highlightColor:e.highlight||e.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(e.value),label:e.label})),r||(this.reflow(),this.update())},calculateCircumference:function(t){return this.total>0?2*Math.PI*(t/this.total):0},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),e.each(this.activeElements,function(t){t.restore(["fillColor"])}),e.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var n=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(n,1),this.reflow(),this.update()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,e.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var n=t||1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},n),t.endAngle=t.startAngle+t.circumference,t.draw(),0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle)},this)}}),t.types.Doughnut.extend({name:"Pie",defaults:e.merge(n,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this.Chart,e=t.helpers;t.Type.extend({name:"Line",defaults:{scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].strokeColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>',offsetGridLines:!1},initialize:function(n){this.PointClass=t.Point.extend({offsetGridLines:this.options.offsetGridLines,strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var n="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(n,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(n)}),e.each(n.datasets,function(t){var r={label:t.label||null,fillColor:t.fillColor,strokeColor:t.strokeColor,pointColor:t.pointColor,pointStrokeColor:t.pointStrokeColor,points:[]};this.datasets.push(r),e.each(t.data,function(e,o){r.points.push(new this.PointClass({value:e,label:n.labels[o],datasetLabel:t.label,strokeColor:t.pointStrokeColor,fillColor:t.pointColor,highlightFill:t.pointHighlightFill||t.pointColor,highlightStroke:t.pointHighlightStroke||t.pointStrokeColor}))},this),this.buildScale(n.labels),this.eachPoints(function(t,n){e.extend(t,{x:this.scale.calculateX(n),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){e.each(this.datasets,function(n){e.each(n.points,t,this)},this)},getPointsAtEvent:function(t){var n=[],r=e.getRelativePosition(t);return e.each(this.datasets,function(t){e.each(t.points,function(t){t.inRange(r.x,r.y)&&n.push(t)})},this),n},buildScale:function(n){var r=this,o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,offsetGridLines:this.options.offsetGridLines,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:n.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var n,o=e.calculateScaleRange((n=[],r.eachPoints(function(t){n.push(t.value)}),n),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,o)},xLabels:n,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(o,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new t.Scale(o)},addData:function(t,n){e.each(t,function(t,e){this.datasets[e].points.push(new this.PointClass({value:t,label:n,datasetLabel:this.datasets[e].label,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.addXLabel(n),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var n=t||1;this.clear();var r=this.chart.ctx,o=function(t){return null!==t.value},i=function(t,n,r){return e.findPreviousWhere(n,o,r)||t};this.scale&&(this.scale.draw(n),e.each(this.datasets,function(t){var a=e.where(t.points,o);e.each(t.points,function(t,e){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(e)},n)},this),this.options.bezierCurve&&e.each(a,function(t,n){var r=n>0&&n<a.length-1?this.options.bezierCurveTension:0;t.controlPoints=e.splineCurve(i(t,a,n),t,function(t,n,r){return e.findNextWhere(n,o,r)||t}(t,a,n),r),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),r.lineWidth=this.options.datasetStrokeWidth,r.strokeStyle=t.strokeColor,r.beginPath(),e.each(a,function(t,e){if(0===e)r.moveTo(t.x,t.y);else if(this.options.bezierCurve){var n=i(t,a,e);r.bezierCurveTo(n.controlPoints.outer.x,n.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else r.lineTo(t.x,t.y)},this),this.options.datasetStroke&&r.stroke(),this.options.datasetFill&&a.length>0&&(r.lineTo(a[a.length-1].x,this.scale.endPoint),r.lineTo(a[0].x,this.scale.endPoint),r.fillStyle=t.fillColor,r.closePath(),r.fill()),e.each(a,function(t){t.draw()})},this))}})}.call(this),function(){"use strict";var t=this.Chart,e=t.helpers;t.Type.extend({name:"PolarArea",defaults:{scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=segments[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>'},initialize:function(n){this.segments=[],this.SegmentArc=t.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new t.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:n.length}),this.updateScaleRange(n),this.scale.update(),e.each(n,function(t,e){this.addData(t,e,!0)},this),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var n="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(n,function(t){t.fillColor=t.highlightColor}),this.showTooltip(n)}),this.render()},getSegmentsAtEvent:function(t){var n=[],r=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(r.x,r.y)&&n.push(t)},this),n},addData:function(t,e,n){var r=e||this.segments.length;this.segments.splice(r,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),n||(this.reflow(),this.update())},removeData:function(t){var n=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(n,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var n=[];e.each(t,function(t){n.push(t.value)});var r=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(n,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,r,{size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),e.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),e.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),e.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var n=t||1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},n),t.endAngle=t.startAngle+t.circumference,0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this.Chart,e=t.helpers;t.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,angleLineInterval:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].strokeColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>'},initialize:function(n){this.PointClass=t.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(n),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var n="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(n,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(n)}),e.each(n.datasets,function(t){var r={label:t.label||null,fillColor:t.fillColor,strokeColor:t.strokeColor,pointColor:t.pointColor,pointStrokeColor:t.pointStrokeColor,points:[]};this.datasets.push(r),e.each(t.data,function(e,o){var i;this.scale.animation||(i=this.scale.getPointPosition(o,this.scale.calculateCenterOffset(e))),r.points.push(new this.PointClass({value:e,label:n.labels[o],datasetLabel:t.label,x:this.options.animation?this.scale.xCenter:i.x,y:this.options.animation?this.scale.yCenter:i.y,strokeColor:t.pointStrokeColor,fillColor:t.pointColor,highlightFill:t.pointHighlightFill||t.pointColor,highlightStroke:t.pointHighlightStroke||t.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){e.each(this.datasets,function(n){e.each(n.points,t,this)},this)},getPointsAtEvent:function(t){var n=e.getRelativePosition(t),r=e.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},n),o=2*Math.PI/this.scale.valuesCount,i=Math.round((r.angle-1.5*Math.PI)/o),a=[];return(i>=this.scale.valuesCount||i<0)&&(i=0),r.distance<=this.scale.drawingArea&&e.each(this.datasets,function(t){a.push(t.points[i])}),a},buildScale:function(e){this.scale=new t.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backgroundColors:this.options.scaleBackgroundColors,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,angleLineInterval:this.options.angleLineInterval?this.options.angleLineInterval:1,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:e.labels,valuesCount:e.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(e.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var n,r=(n=[],e.each(t,function(t){t.data?n=n.concat(t.data):e.each(t.points,function(t){n.push(t.value)})}),n),o=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(r,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,o)},addData:function(t,n){this.scale.valuesCount++,e.each(t,function(t,e){var r=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[e].points.push(new this.PointClass({value:t,label:n,datasetLabel:this.datasets[e].label,x:r.x,y:r.y,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.labels.push(n),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),e.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){e.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var n=t||1,r=this.chart.ctx;this.clear(),this.scale.draw(),e.each(this.datasets,function(t){e.each(t.points,function(t,e){t.hasValue()&&t.transition(this.scale.getPointPosition(e,this.scale.calculateCenterOffset(t.value)),n)},this),r.lineWidth=this.options.datasetStrokeWidth,r.strokeStyle=t.strokeColor,r.beginPath(),e.each(t.points,function(t,e){0===e?r.moveTo(t.x,t.y):r.lineTo(t.x,t.y)},this),r.closePath(),r.stroke(),r.fillStyle=t.fillColor,this.options.datasetFill&&r.fill(),e.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this)},function(t,e,n){"use strict";var r=n(53),o=n(52),i=n(31),a="mixins";t.exports=function(t,e,n){var u=[],s={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},l={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},c={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)d(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=r({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=r({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=p(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=r({},t.propTypes,e)},statics:function(t,e){!function(t,e){if(e)for(var n in e){var r=e[n];if(e.hasOwnProperty(n)){var o=n in c;i(!o,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var a=n in t;if(a){var u=l.hasOwnProperty(n)?l[n]:null;return i("DEFINE_MANY_MERGED"===u,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),void(t[n]=p(t[n],r))}t[n]=r}}}(t,e)},autobind:function(){}};function f(t,e){var n=s.hasOwnProperty(e)?s[e]:null;b.hasOwnProperty(e)&&i("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",e),t&&i("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",e)}function d(t,n){if(n){i("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),i(!e(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var r=t.prototype,o=r.__reactAutoBindPairs;for(var u in n.hasOwnProperty(a)&&c.mixins(t,n.mixins),n)if(n.hasOwnProperty(u)&&u!==a){var l=n[u],d=r.hasOwnProperty(u);if(f(d,u),c.hasOwnProperty(u))c[u](t,l);else{var h=s.hasOwnProperty(u);if("function"!=typeof l||h||d||!1===n.autobind)if(d){var v=s[u];i(h&&("DEFINE_MANY_MERGED"===v||"DEFINE_MANY"===v),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",v,u),"DEFINE_MANY_MERGED"===v?r[u]=p(r[u],l):"DEFINE_MANY"===v&&(r[u]=g(r[u],l))}else r[u]=l;else o.push(u,l),r[u]=l}}}}function h(t,e){for(var n in i(t&&e&&"object"==typeof t&&"object"==typeof e,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),e)e.hasOwnProperty(n)&&(i(void 0===t[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),t[n]=e[n]);return t}function p(t,e){return function(){var n=t.apply(this,arguments),r=e.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return h(o,n),h(o,r),o}}function g(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function v(t,e){return e.bind(t)}var y={componentDidMount:function(){this.__isMounted=!0}},m={componentWillUnmount:function(){this.__isMounted=!1}},b={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t,e)},isMounted:function(){return!!this.__isMounted}},w=function(){};return r(w.prototype,t.prototype,b),function(t){var e=function(t,r,a){this.__reactAutoBindPairs.length&&function(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];t[r]=v(t,o)}}(this),this.props=t,this.context=r,this.refs=o,this.updater=a||n,this.state=null;var u=this.getInitialState?this.getInitialState():null;i("object"==typeof u&&!Array.isArray(u),"%s.getInitialState(): must return an object or null",e.displayName||"ReactCompositeComponent"),this.state=u};for(var r in e.prototype=new w,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],u.forEach(d.bind(null,e)),d(e,y),d(e,t),d(e,m),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),i(e.prototype.render,"createClass(...): Class specification must implement a `render` method."),s)e.prototype[r]||(e.prototype[r]=null);return e}}},function(t,e,n){"use strict";var r=n(2),o=n(89);if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var i=(new r.Component).updater;t.exports=o(r.Component,r.isValidElement,i)},function(t,e,n){var r=n(2),o=n(90),i=n(75);t.exports={createClass:function(t,e,s){var l,c=["data","options","redraw"],f={displayName:t+"Chart",getInitialState:function(){return{}},render:function(){var t={ref:"canvass"};for(var e in this.props)this.props.hasOwnProperty(e)&&-1===c.indexOf(e)&&(t[e]=this.props[e]);return r.createElement("canvas",t)}},d=["clear","stop","resize","toBase64Image","generateLegend","update","addData","removeData"];function h(t){f[t]=function(){return this.state.chart[t].apply(this.state.chart,arguments)}}for(f.componentDidMount=function(){this.initializeChart(this.props)},f.componentWillUnmount=function(){this.state.chart.destroy()},f.componentWillReceiveProps=function(t){var e=this.state.chart;t.redraw?(e.destroy(),this.initializeChart(t)):(s=s||a[e.name],u(t,e,s),e.scale&&(e.scale.xLabels=t.data.labels,e.scale.calculateXLabelRotation&&e.scale.calculateXLabelRotation()),e.update())},f.initializeChart=function(e){var r=new(n(88))(i.findDOMNode(this).getContext("2d"))[t](e.data,e.options||{});this.state.chart=r},f.getChart=function(){return this.state.chart},f.getCanvass=function(){return this.refs.canvass},f.getCanvas=f.getCanvass,l=0;l<d.length;l++)h(d[l]);for(l=0;l<e.length;l++)h(e[l]);return o(f)}};var a={Line:"points",Radar:"points",Bar:"bars"},u=function(t,e,n){var r=e.name;if("PolarArea"===r||"Pie"===r||"Doughnut"===r)for(t.data.forEach(function(t,n){e.segments[n]?Object.keys(t).forEach(function(r){e.segments[n][r]=t[r]}):e.addData(t)});t.data.length<e.segments.length;)e.removeData();else if("Radar"===r)e.removeData(),t.data.datasets.forEach(function(r,o){r.data.forEach(function(r,i){void 0===e.datasets[o][n][i]?s(t,e,o,i):e.datasets[o][n][i].value=r})});else{for(;e.scale.xLabels.length>t.data.labels.length;)e.removeData();t.data.datasets.forEach(function(r,o){r.data.forEach(function(r,i){void 0===e.datasets[o][n][i]?s(t,e,o,i):e.datasets[o][n][i].value=r})})}},s=function(t,e,n,r){var o=[];t.data.datasets.forEach(function(t){o.push(t.data[r])}),e.addData(o,t.data.labels[n])}},function(t,e,n){var r=n(91);t.exports=r.createClass("Pie",["getSegmentsAtEvent"])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PieChart=void 0;var r=u(n(2)),o=n(13),i=u(n(92)),a=u(n(86));function u(t){return t&&t.__esModule?t:{default:t}}var s=e.PieChart=function(t){var e=t.data;return r.default.createElement(i.default,{className:"piechart",data:e})};e.default=(0,o.connect)(function(t){return(0,a.default)(t,t.filters)})(s)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Actions=void 0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};var a=e.Actions=function(t){return i.default.createElement("div",{className:"actions"},i.default.createElement("button",{className:"button"},"Subscribe"))};e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SummaryItem=void 0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};var a=e.SummaryItem=function(t){var e=t.name,n=t.count;return i.default.createElement("div",{className:"list-item"},i.default.createElement("div",{className:"list-item__count"},n),i.default.createElement("div",{className:"list-item__name"},e))};e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var n=t.area.features.filter(function(t){var n=t.properties;return-1===e.features.indexOf(n.type)}).reduce(function(t,e){var n=e.properties,r=(n.type,n.population);return t.summary.buildings+=1,t.summary.citizens+=~~parseFloat(r),t},{summary:{buildings:0,citizens:0}});return{summary:r(n.summary)}};var r=function(t){return Object.keys(t).reduce(function(e,n){var r=[n,t[n]],o=r[0],i=r[1];return e.push({name:o,count:i}),e},[])}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Summary=void 0;var r=u(n(2)),o=n(13),i=u(n(96)),a=u(n(95));function u(t){return t&&t.__esModule?t:{default:t}}var s=e.Summary=function(t){var e=t.summary;return r.default.createElement("div",{className:"list"},r.default.createElement("div",{className:"list__header"},"Summary"),r.default.createElement("div",null,e.map(function(t){var e=t.name,n=t.count;return r.default.createElement(a.default,{key:e,name:e,count:n})})))};e.default=(0,o.connect)(function(t){return(0,i.default)(t,t.filters)})(s)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LegendItem=void 0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r},a=n(22);var u=e.LegendItem=function(t){var e=t.name,n=t.count,r=t.isActive,o=t.setFeaturesFilter,u=(0,a.getColor)(e),s=r?"legend-item":"legend-item legend-item--muted";return i.default.createElement("div",{onClick:function(){return function(t){o(t)}(e)},className:s},i.default.createElement("div",{style:{backgroundColor:u,boxShadow:"0 0 0 5px "+u},className:"legend-item__count"},n),i.default.createElement("div",{className:"legend-item__name"},e))};e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Legend=void 0;var r=i(n(2)),o=i(n(98));function i(t){return t&&t.__esModule?t:{default:t}}var a=e.Legend=function(t){var e=t.data,n=t.setFeaturesFilter;return r.default.createElement("div",{className:"legend"},e.map(function(t){var e=t.name,i=t.count,a=t.isActive;return r.default.createElement(o.default,{key:e,name:e,count:i,isActive:a,setFeaturesFilter:n})}))};e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sidebar=void 0;var r=g(n(26)),o=g(n(25)),i=g(n(24)),a=g(n(23)),u=g(n(2)),s=n(13),l=g(n(99)),c=g(n(97)),f=g(n(94)),d=g(n(93)),h=n(61),p=g(n(85));function g(t){return t&&t.__esModule?t:{default:t}}var v=e.Sidebar=function(t){function e(){return(0,r.default)(this,e),(0,i.default)(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return(0,a.default)(e,t),(0,o.default)(e,[{key:"render",value:function(){var t=this.props,e=t.isAreaSelected,n=(t.columns,t.colors,t.summary,t.legend),r=t.setFeaturesFilter;return e?u.default.createElement("div",{className:"message"},"Select area of interest"):u.default.createElement("div",null,u.default.createElement(d.default,null),u.default.createElement(l.default,{setFeaturesFilter:r,data:n}),u.default.createElement(c.default,null),u.default.createElement(f.default,null))}}]),e}(u.default.Component);e.default=(0,s.connect)(function(t){return(0,p.default)(t,t.filters)},{setFeaturesFilter:h.setFeaturesFilter})(v)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return{features:t.area.features.filter(function(t){var n=t.properties;return-1===e.features.indexOf(n.type)}),isFetching:t.area.isFetching}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;var r=d(n(26)),o=d(n(25)),i=d(n(24)),a=d(n(23)),u=d(n(2)),s=n(13),l=d(n(101)),c=n(47),f=n(22);function d(t){return t&&t.__esModule?t:{default:t}}var h=L.tileLayer("http://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga",{id:1}),p=L.tileLayer("http://a.tile.openstreetmap.org/{z}/{x}/{y}.png",{id:2}),g={};g.params={center:[55.87835875564509,37.7050219952363],zoom:16,layers:[h],scrollwheel:!1,legends:!0,infoControl:!1,attributionControl:!1},g.baseLayers={Google:h,OSM:p},g.featureGroup=new L.FeatureGroup,g.drawControl=new L.Control.Draw({draw:{rectangle:!1,polygon:{icon:new L.DivIcon({iconSize:new L.Point(17,17),className:"point"}),allowIntersection:!1},polyline:!1,circle:!1,marker:!1,circlemarker:!1},edit:!1});var v=e.Map=function(t){function e(){var t,n,o,a;(0,r.default)(this,e);for(var s=arguments.length,l=Array(s),c=0;c<s;c++)l[c]=arguments[c];return n=o=(0,i.default)(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(l))),o.state={map:null,layersControl:null,featureGroup:null,polygonLayer:null},o._mapNode=u.default.createRef(),o._osmb=u.default.createRef(),o.getData=function(t){var e=t.geometry.coordinates;o.props.loadAreaData(e)},o.featuresListToCollection=function(t){return{type:"FeatureCollection",features:t}},o.initDrawEvents=function(t,e){t.on(L.Draw.Event.CREATED,function(t){var n=t.layer;console.log(n.toGeoJSON().geometry.coordinates),L.Util.setOptions(n,{interactive:!0,fill:!1});var r=o.state.polygonLayer;console.log(o.state),r&&(e.removeLayer(r),o.setState(function(){return{polygonLayer:null}})),e.addLayer(n),o.setState(function(){return{polygonLayer:n}});try{o.getData(n.toGeoJSON())}catch(t){console.log(t)}})},o.setMapBounds=function(){var t=L.geoJSON({type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[37.684445,55.878168],[37.81569,55.878168],[37.81569,55.964435],[37.684445,55.964435],[37.684445,55.878168]]]}}]},{onEachFeature:function(t,e){L.Util.setOptions(e,{interactive:!0,fill:!1,color:"#ffffff"})}});o.map.fitBounds(t.getBounds()),t.addTo(o.map)},o.findFeatureById=function(t){return o.props.features.find(function(e){return e.id===t})},o.setOSMB=function(){o._osmb.each(function(t){var e=t.properties,n=e.type,r=e.height,o=e.iou,i=e.population;if(n){var a=(0,f.getColor)(n),u=(0,f.brighterColor)(a);Object.assign(t,{properties:{type:n,height:r,iou:o,population:i,color:a,roofColor:u}})}}),o._osmb.click(function(t){var e=o.findFeatureById(t.feature);console.log(e);var n="<b>"+e.properties.type+"</b>";n+="<br><em>Height</em> "+e.properties.height,n+="<br><em>IOU</em> "+e.properties.iou,L.popup({maxHeight:200,autoPanPaddingTopLeft:[50,50]}).setLatLng(L.latLng(t.lat,t.lon)).setContent(n).openOn(o.map)})},a=n,(0,i.default)(o,a)}return(0,a.default)(e,t),(0,o.default)(e,[{key:"componentDidMount",value:function(){this.state.map||this.init(this._mapNode.current)}},{key:"componentDidUpdate",value:function(t,e){this.props.isFetching?this._osmb.set():this._osmb.set(this.featuresListToCollection(this.props.features))}},{key:"componentWillUnmount",value:function(){this.state.map.current.remove()}},{key:"init",value:function(t){if(!this.state.map){var e=L.map(t,g.params);this.map=e,this._osmb=new OSMBuildings(e);var n=L.control.layers(g.baseLayers,void 0,{position:"topright",collapsed:!1}).addTo(e),r=g.featureGroup;e.addControl(g.drawControl),r.addTo(e),this.initDrawEvents(e,r),this.setState({map:e,layersControl:n,featureGroup:r}),this.setMapBounds(),this.setOSMB()}}},{key:"render",value:function(){return u.default.createElement("div",{ref:this._mapNode,id:"map"})}}]),e}(u.default.Component);e.default=(0,s.connect)(function(t){return(0,l.default)(t,t.filters)},{loadAreaData:c.loadAreaData})(v)},function(t,e,n){var r=n(18);r(r.S,"Object",{create:n(36)})},function(t,e,n){n(103);var r=n(12).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){t.exports={default:n(104),__esModule:!0}},function(t,e,n){var r=n(16),o=n(21),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(68)(Function.call,n(56).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(18);r(r.S,"Object",{setPrototypeOf:n(106).set})},function(t,e,n){n(107),t.exports=n(12).Object.setPrototypeOf},function(t,e,n){t.exports={default:n(108),__esModule:!0}},function(t,e,n){n(33)("observable")},function(t,e,n){n(33)("asyncIterator")},function(t,e){},function(t,e,n){var r=n(15),o=n(57).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(63);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(29),o=n(39),i=n(27);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,u=n(t),s=i.f,l=0;u.length>l;)s.call(t,a=u[l++])&&e.push(a);return e}},function(t,e,n){var r=n(28)("meta"),o=n(16),i=n(9),a=n(11).f,u=0,s=Object.isExtensible||function(){return!0},l=!n(20)(function(){return s(Object.preventExtensions({}))}),c=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!s(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!s(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return l&&f.NEED&&s(t)&&!i(t,r)&&c(t),t}}},function(t,e,n){"use strict";var r=n(7),o=n(9),i=n(10),a=n(18),u=n(58),s=n(116).KEY,l=n(20),c=n(41),f=n(35),d=n(28),h=n(14),p=n(34),g=n(33),v=n(115),y=n(114),m=n(21),b=n(16),w=n(15),x=n(45),C=n(30),S=n(36),E=n(113),k=n(56),_=n(11),P=n(29),O=k.f,T=_.f,M=E.f,L=r.Symbol,A=r.JSON,j=A&&A.stringify,N=h("_hidden"),R=h("toPrimitive"),F={}.propertyIsEnumerable,I=c("symbol-registry"),D=c("symbols"),U=c("op-symbols"),z=Object.prototype,q="function"==typeof L,W=r.QObject,B=!W||!W.prototype||!W.prototype.findChild,H=i&&l(function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=O(z,e);r&&delete z[e],T(t,e,n),r&&t!==z&&T(z,e,r)}:T,V=function(t){var e=D[t]=S(L.prototype);return e._k=t,e},G=q&&"symbol"==typeof L.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof L},K=function(t,e,n){return t===z&&K(U,e,n),m(t),e=x(e,!0),m(n),o(D,e)?(n.enumerable?(o(t,N)&&t[N][e]&&(t[N][e]=!1),n=S(n,{enumerable:C(0,!1)})):(o(t,N)||T(t,N,C(1,{})),t[N][e]=!0),H(t,e,n)):T(t,e,n)},Y=function(t,e){m(t);for(var n,r=v(e=w(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},X=function(t){var e=F.call(this,t=x(t,!0));return!(this===z&&o(D,t)&&!o(U,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,N)&&this[N][t])||e)},$=function(t,e){if(t=w(t),e=x(e,!0),t!==z||!o(D,e)||o(U,e)){var n=O(t,e);return!n||!o(D,e)||o(t,N)&&t[N][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=M(w(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==N||e==s||r.push(e);return r},J=function(t){for(var e,n=t===z,r=M(n?U:w(t)),i=[],a=0;r.length>a;)!o(D,e=r[a++])||n&&!o(z,e)||i.push(D[e]);return i};q||(u((L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===z&&e.call(U,n),o(this,N)&&o(this[N],t)&&(this[N][t]=!1),H(this,t,C(1,n))};return i&&B&&H(z,t,{configurable:!0,set:e}),V(t)}).prototype,"toString",function(){return this._k}),k.f=$,_.f=K,n(57).f=E.f=Q,n(27).f=X,n(39).f=J,i&&!n(38)&&u(z,"propertyIsEnumerable",X,!0),p.f=function(t){return V(h(t))}),a(a.G+a.W+a.F*!q,{Symbol:L});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)h(Z[tt++]);for(var et=P(h.store),nt=0;et.length>nt;)g(et[nt++]);a(a.S+a.F*!q,"Symbol",{for:function(t){return o(I,t+="")?I[t]:I[t]=L(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in I)if(I[e]===t)return e},useSetter:function(){B=!0},useSimple:function(){B=!1}}),a(a.S+a.F*!q,"Object",{create:function(t,e){return void 0===e?S(t):Y(S(t),e)},defineProperty:K,defineProperties:Y,getOwnPropertyDescriptor:$,getOwnPropertyNames:Q,getOwnPropertySymbols:J}),A&&a(a.S+a.F*(!q||l(function(){var t=L();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!G(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!G(e))return e}),r[1]=e,j.apply(A,r)}}),L.prototype[R]||n(17)(L.prototype,R,L.prototype.valueOf),f(L,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){n(117),n(112),n(111),n(110),t.exports=n(12).Symbol},function(t,e,n){t.exports={default:n(118),__esModule:!0}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e){t.exports=function(){}},function(t,e,n){"use strict";var r=n(121),o=n(120),i=n(37),a=n(15);t.exports=n(59)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){n(122);for(var r=n(7),o=n(17),i=n(37),a=n(14)("toStringTag"),u="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),s=0;s<u.length;s++){var l=u[s],c=r[l],f=c&&c.prototype;f&&!f[a]&&o(f,a,l),i[l]=i.Array}},function(t,e,n){var r=n(9),o=n(62),i=n(42)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(7).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(11),o=n(21),i=n(29);t.exports=n(10)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),u=a.length,s=0;u>s;)r.f(t,n=a[s++],e[n]);return t}},function(t,e,n){"use strict";var r=n(36),o=n(30),i=n(35),a={};n(17)(a,n(14)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(43),o=n(44);t.exports=function(t){return function(e,n){var i,a,u=String(o(e)),s=r(n),l=u.length;return s<0||s>=l?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===l||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):i:t?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(128)(!0);n(59)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){n(129),n(123),t.exports=n(34).f("iterator")},function(t,e,n){t.exports={default:n(130),__esModule:!0}},function(t,e,n){var r=n(18);r(r.S+r.F*!n(10),"Object",{defineProperty:n(11).f})},function(t,e,n){n(132);var r=n(12).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){t.exports={default:n(133),__esModule:!0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UrbanAnalyticsApp=void 0;var r=h(n(26)),o=h(n(25)),i=h(n(24)),a=h(n(23)),u=h(n(2)),s=n(13),l=n(54),c=h(n(102)),f=h(n(100)),d=h(n(84));function h(t){return t&&t.__esModule?t:{default:t}}var p=e.UrbanAnalyticsApp=function(t){function e(){return(0,r.default)(this,e),(0,i.default)(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return(0,a.default)(e,t),(0,o.default)(e,[{key:"render",value:function(){return u.default.createElement("div",{className:"app"},u.default.createElement("div",{className:"sibebar"},u.default.createElement(f.default,null)),u.default.createElement("div",{className:"map"},u.default.createElement(c.default,null)))}}]),e}(u.default.Component);e.default=(0,l.compose)((0,s.connect)(function(t){return{isLoading:t.area.isFetching}}),(0,d.default)())(p)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={features:[]};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,e=arguments[1];switch(e.type){case"SET_FEATURES_FILTER":var n=e.feature;return t.features.indexOf(n)>-1?{features:t.features.filter(function(t){return t!==n})}:{features:t.features.concat(n)};case"CLEAR_FEATURES_FILTER":return{features:[]};default:return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(46),i=(r=o)&&r.__esModule?r:{default:r},a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(47));var u={isFetching:!1,errorMessage:null,features:[]};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,e=arguments[1];switch(e.type){case a.FETCH_AREA.REQUEST:return(0,i.default)({},t,{isFetching:!0});case a.FETCH_AREA.SUCCESS:return(0,i.default)({},t,{isFetching:!1,features:e.features});case a.FETCH_AREA.FAILURE:return(0,i.default)({},t,{isFetching:!1,errorMessage:e.error});default:return t}}},function(t,e,n){(function(t){!function(e){"use strict";function n(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function r(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function o(t,e,n){o.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(t,e){i.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function a(t,e){a.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function u(t,e,n){u.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function s(t,e,n){var r=t.slice((n||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,r),t}function l(t){var e=void 0===t?"undefined":C(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function c(t,e,n,r,f,d,h){f=f||[],h=h||[];var p=f.slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(p,d))return;if("object"===(void 0===r?"undefined":C(r))){if(r.prefilter&&r.prefilter(p,d))return;if(r.normalize){var g=r.normalize(p,d,t,e);g&&(t=g[0],e=g[1])}}}p.push(d)}"regexp"===l(t)&&"regexp"===l(e)&&(t=t.toString(),e=e.toString());var v=void 0===t?"undefined":C(t),y=void 0===e?"undefined":C(e),m="undefined"!==v||h&&h[h.length-1].lhs&&h[h.length-1].lhs.hasOwnProperty(d),b="undefined"!==y||h&&h[h.length-1].rhs&&h[h.length-1].rhs.hasOwnProperty(d);if(!m&&b)n(new i(p,e));else if(!b&&m)n(new a(p,t));else if(l(t)!==l(e))n(new o(p,t,e));else if("date"===l(t)&&t-e!=0)n(new o(p,t,e));else if("object"===v&&null!==t&&null!==e)if(h.filter(function(e){return e.lhs===t}).length)t!==e&&n(new o(p,t,e));else{if(h.push({lhs:t,rhs:e}),Array.isArray(t)){var w;for(t.length,w=0;w<t.length;w++)w>=e.length?n(new u(p,w,new a(void 0,t[w]))):c(t[w],e[w],n,r,p,w,h);for(;w<e.length;)n(new u(p,w,new i(void 0,e[w++])))}else{var x=Object.keys(t),S=Object.keys(e);x.forEach(function(o,i){var a=S.indexOf(o);a>=0?(c(t[o],e[o],n,r,p,o,h),S=s(S,a)):c(t[o],void 0,n,r,p,o,h)}),S.forEach(function(t){c(void 0,e[t],n,r,p,t,h)})}h.length=h.length-1}else t!==e&&("number"===v&&isNaN(t)&&isNaN(e)||n(new o(p,t,e)))}function f(t,e,n,r){return r=r||[],c(t,e,function(t){t&&r.push(t)},n),r.length?r:void 0}function d(t,e,n){if(t&&e&&n&&n.kind){for(var r=t,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function t(e,n,r){if(r.path&&r.path.length){var o,i=e[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":t(i[r.path[o]],r.index,r.item);break;case"D":delete i[r.path[o]];break;case"E":case"N":i[r.path[o]]=r.rhs}}else switch(r.kind){case"A":t(e[n],r.index,r.item);break;case"D":e=s(e,n);break;case"E":case"N":e[n]=r.rhs}return e}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function h(t,e,n,r){var o=f(t,e);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(t){n.log("diff")}o?o.forEach(function(t){var e=t.kind,r=function(t){var e=t.kind,n=t.path,r=t.lhs,o=t.rhs,i=t.index,a=t.item;switch(e){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(t);n.log.apply(n,["%c "+k[e].text,function(t){return"color: "+k[t].color+"; font-weight: bold"}(e)].concat(S(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(t){n.log("—— diff end —— ")}}function p(t,e,n,r){switch(void 0===t?"undefined":C(t)){case"object":return"function"==typeof t[r]?t[r].apply(t,S(n)):t[r];case"function":return t(e);default:return t}}function g(t,e){var n=e.logger,r=e.actionTransformer,o=e.titleFormatter,i=void 0===o?function(t){var e=t.timestamp,n=t.duration;return function(t,r,o){var i=["action"];return i.push("%c"+String(t.type)),e&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(e):o,a=e.collapsed,u=e.colors,s=e.level,l=e.diff,c=void 0===e.titleFormatter;t.forEach(function(o,f){var d=o.started,g=o.startedTime,v=o.action,y=o.prevState,m=o.error,b=o.took,x=o.nextState,C=t[f+1];C&&(x=C.prevState,b=C.started-d);var S=r(v),E="function"==typeof a?a(function(){return x},v,o):a,k=w(g),_=u.title?"color: "+u.title(S)+";":"",P=["color: gray; font-weight: lighter;"];P.push(_),e.timestamp&&P.push("color: gray; font-weight: lighter;"),e.duration&&P.push("color: gray; font-weight: lighter;");var O=i(S,k,b);try{E?u.title&&c?n.groupCollapsed.apply(n,["%c "+O].concat(P)):n.groupCollapsed(O):u.title&&c?n.group.apply(n,["%c "+O].concat(P)):n.group(O)}catch(t){n.log(O)}var T=p(s,S,[y],"prevState"),M=p(s,S,[S],"action"),L=p(s,S,[m,y],"error"),A=p(s,S,[x],"nextState");if(T)if(u.prevState){var j="color: "+u.prevState(y)+"; font-weight: bold";n[T]("%c prev state",j,y)}else n[T]("prev state",y);if(M)if(u.action){var N="color: "+u.action(S)+"; font-weight: bold";n[M]("%c action    ",N,S)}else n[M]("action    ",S);if(m&&L)if(u.error){var R="color: "+u.error(m,y)+"; font-weight: bold;";n[L]("%c error     ",R,m)}else n[L]("error     ",m);if(A)if(u.nextState){var F="color: "+u.nextState(x)+"; font-weight: bold";n[A]("%c next state",F,x)}else n[A]("next state",x);l&&h(y,x,n,E);try{n.groupEnd()}catch(t){n.log("—— log end ——")}})}function v(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},_,t),n=e.logger,r=e.stateTransformer,o=e.errorTransformer,i=e.predicate,a=e.logErrors,u=e.diffPredicate;if(void 0===n)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var s=[];return function(t){var n=t.getState;return function(t){return function(l){if("function"==typeof i&&!i(n,l))return t(l);var c={};s.push(c),c.started=x.now(),c.startedTime=new Date,c.prevState=r(n()),c.action=l;var f=void 0;if(a)try{f=t(l)}catch(t){c.error=o(t)}else f=t(l);c.took=x.now()-c.started,c.nextState=r(n());var d=e.diff&&"function"==typeof u?u(n,l):e.diff;if(g(s,Object.assign({},e,{diff:d})),s.length=0,c.error)throw c.error;return f}}}}var y,m,b=function(t,e){return function(t,e){return new Array(e+1).join(t)}("0",e-t.toString().length)+t},w=function(t){return b(t.getHours(),2)+":"+b(t.getMinutes(),2)+":"+b(t.getSeconds(),2)+"."+b(t.getMilliseconds(),3)},x="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},E=[];y="object"===(void 0===t?"undefined":C(t))&&t?t:"undefined"!=typeof window?window:{},(m=y.DeepDiff)&&E.push(function(){void 0!==m&&y.DeepDiff===f&&(y.DeepDiff=m,m=void 0)}),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:c,enumerable:!0},applyDiff:{value:function(t,e,n){t&&e&&c(t,e,function(r){n&&!n(t,e,r)||d(t,e,r)})},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(t,e,n){if(t&&e&&n&&n.kind){var r,o,i=t;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":!function t(e,n,r){if(r.path&&r.path.length){var o,i=e[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":t(i[r.path[o]],r.index,r.item);break;case"D":case"E":i[r.path[o]]=r.lhs;break;case"N":delete i[r.path[o]]}}else switch(r.kind){case"A":t(e[n],r.index,r.item);break;case"D":case"E":e[n]=r.lhs;break;case"N":e=s(e,n)}return e}(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==m},enumerable:!0},noConflict:{value:function(){return E&&(E.forEach(function(t){t()}),E=null),f},enumerable:!0}});var k={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},_={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},P=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,n=t.getState;return"function"==typeof e||"function"==typeof n?v()({dispatch:e,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=_,e.createLogger=v,e.logger=P,e.default=P,Object.defineProperty(e,"__esModule",{value:!0})}(e)}).call(this,n(50))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s(n(46)),o=n(54),i=(n(138),s(n(78))),a=(s(n(74)),s(n(137))),u=s(n(136));function s(t){return t&&t.__esModule?t:{default:t}}var l=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||o.compose,c=(0,i.default)();e.default=function(){var t=[c];return(0,r.default)({},(0,o.createStore)((0,o.combineReducers)({area:a.default,filters:u.default}),l(o.applyMiddleware.apply(void 0,t))),{runSaga:c.run})}},function(t,e,n){var r=n(43),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(43),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(15),o=n(141),i=n(140);t.exports=function(t){return function(e,n,a){var u,s=r(e),l=o(s.length),c=i(a,l);if(t&&n!=n){for(;l>c;)if((u=s[c++])!=u)return!0}else for(;l>c;c++)if((t||c in s)&&s[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){"use strict";var r=n(29),o=n(39),i=n(27),a=n(62),u=n(64),s=Object.assign;t.exports=!s||n(20)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r})?function(t,e){for(var n=a(t),s=arguments.length,l=1,c=o.f,f=i.f;s>l;)for(var d,h=u(arguments[l++]),p=c?r(h).concat(c(h)):r(h),g=p.length,v=0;g>v;)f.call(h,d=p[v++])&&(n[d]=h[d]);return n}:s},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(18);r(r.S+r.F,"Object",{assign:n(143)})},function(t,e,n){n(145),t.exports=n(12).Object.assign},function(t,e,n){t.exports={default:n(146),__esModule:!0}},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";var r=n(69);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(e){t=e}),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";var r=n(5);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";var r=n(5),o=n(152),i=n(70),a=n(48),u=n(151),s=n(150);function l(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return l(t),t.baseURL&&!u(t.url)&&(t.url=s(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||a.adapter)(t).then(function(e){return l(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return i(e)||(l(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(5);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=o},function(t,e,n){"use strict";var r=n(5);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,a){var u=[];u.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,i=String(t),a="",u=0,s=r;i.charAt(0|u)||(s="=",u%1);a+=s.charAt(63&e>>8-u%1*8)){if((n=i.charCodeAt(u+=.75))>255)throw new o;e=e<<8|n}return a}},function(t,e,n){"use strict";var r=n(5);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r=n(5),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,a={};return t?(r.forEach(t.split("\n"),function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(a[e]&&o.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([n]):a[e]?a[e]+", "+n:n}}),a):a}},function(t,e,n){"use strict";var r=n(5);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var a=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(o(e)+"="+o(t))}))}),i=a.join("&")}return i&&(t+=(-1===t.indexOf("?")?"?":"&")+i),t}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t}},function(t,e,n){"use strict";var r=n(71);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";var r=n(5);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,l=[],c=!1,f=-1;function d(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=u(d);c=!0;for(var e=l.length;e;){for(s=l,l=[];++f<e;)s&&s[f].run();f=-1,e=l.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||c||u(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(48),o=n(5),i=n(154),a=n(153);function u(t){this.defaults=t,this.interceptors={request:new i,response:new i}}u.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),(t=o.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[a,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},o.forEach(["delete","get","head","options"],function(t){u.prototype[t]=function(e,n){return this.request(o.merge(n||{},{method:t,url:e}))}}),o.forEach(["post","put","patch"],function(t){u.prototype[t]=function(e,n,r){return this.request(o.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=u},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(5),o=n(73),i=n(164),a=n(48);function u(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var s=u(a);s.Axios=i,s.create=function(t){return u(r.merge(a,t))},s.Cancel=n(69),s.CancelToken=n(149),s.isCancel=n(70),s.all=function(t){return Promise.all(t)},s.spread=n(148),t.exports=s,t.exports.default=s},function(t,e,n){t.exports=n(166)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(167),i=(r=o)&&r.__esModule?r:{default:r};e.default=i.default.create({baseURL:"https://salty-dawn-19251.herokuapp.com/api"})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.api=void 0;var r,o=n(168),i=(r=o)&&r.__esModule?r:{default:r};e.api={fetchArea:function(t){return i.default.post("/select",{coordinates:t})}}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",l="object"==typeof t,c=e.regeneratorRuntime;if(c)l&&(t.exports=c);else{(c=e.regeneratorRuntime=l?t.exports:{}).wrap=w;var f="suspendedStart",d="suspendedYield",h="executing",p="completed",g={},v={};v[a]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(L([])));m&&m!==r&&o.call(m,a)&&(v=m);var b=E.prototype=C.prototype=Object.create(v);S.prototype=b.constructor=E,E.constructor=S,E[s]=S.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},k(_.prototype),_.prototype[u]=function(){return this},c.AsyncIterator=_,c.async=function(t,e,n,r){var o=new _(w(t,e,n,r));return c.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(b),b[s]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=L,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(T),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),T(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),g}}}function w(t,e,n,r){var o=e&&e.prototype instanceof C?e:C,i=Object.create(o.prototype),a=new M(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=P(a,n);if(u){if(u===g)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var s=x(t,e,n);if("normal"===s.type){if(r=n.done?p:d,s.arg===g)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=p,n.method="throw",n.arg=s.arg)}}}(t,n,a),i}function x(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function C(){}function S(){}function E(){}function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(t){var e;this._invoke=function(n,r){function i(){return new Promise(function(e,i){!function e(n,r,i,a){var u=x(t[n],t,r);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(t){e("next",t,i,a)},function(t){e("throw",t,i,a)}):Promise.resolve(l).then(function(t){s.value=t,i(s)},a)}a(u.arg)}(n,r,e,i)})}return e=e?e.then(i,i):i()}}function P(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,P(t,e),"throw"===e.method))return g;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=x(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,g;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,g):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:A}}function A(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,n){var r=function(){return this}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,i=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(170),o)r.regeneratorRuntime=i;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e,n){t.exports=n(171)},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var r=n(51),o=n(31),i=n(174);t.exports=function(){function t(t,e,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=r,n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports=function(t){var e=(t?t.ownerDocument||t:document).defaultView||window;return!(!t||!("function"==typeof e.Node?t instanceof e.Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}},function(t,e,n){"use strict";var r=n(176);t.exports=function(t){return r(t)&&3==t.nodeType}},function(t,e,n){"use strict";var r=n(177);t.exports=function t(e,n){return!(!e||!n)&&(e===n||!r(e)&&(r(n)?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}t.exports=function(t,e){if(o(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(e,n[a])||!o(t[n[a]],e[n[a]]))return!1;return!0}},function(t,e,n){"use strict";t.exports=function(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}},function(t,e,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},function(t,e,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(31),o=n(2),i=n(181),a=n(53),u=n(51),s=n(180),l=n(179),c=n(178),f=n(52);function d(t){for(var e=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+t,o=0;o<e;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||d("227");var h={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(t,e,n,r,o,i,a,u,s){(function(t,e,n,r,o,i,a,u,s){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{e.apply(n,l)}catch(t){this._caughtError=t,this._hasCaughtError=!0}}).apply(h,arguments)},invokeGuardedCallbackAndCatchFirstError:function(t,e,n,r,o,i,a,u,s){if(h.invokeGuardedCallback.apply(this,arguments),h.hasCaughtError()){var l=h.clearCaughtError();h._hasRethrowError||(h._hasRethrowError=!0,h._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(h._hasRethrowError){var t=h._rethrowError;throw h._rethrowError=null,h._hasRethrowError=!1,t}}.apply(h,arguments)},hasCaughtError:function(){return h._hasCaughtError},clearCaughtError:function(){if(h._hasCaughtError){var t=h._caughtError;return h._caughtError=null,h._hasCaughtError=!1,t}d("198")}};var p=null,g={};function v(){if(p)for(var t in g){var e=g[t],n=p.indexOf(t);if(-1<n||d("96",t),!m[n])for(var r in e.extractEvents||d("97",t),m[n]=e,n=e.eventTypes){var o=void 0,i=n[r],a=e,u=r;b.hasOwnProperty(u)&&d("99",u),b[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&y(s[o],a,u);o=!0}else i.registrationName?(y(i.registrationName,a,u),o=!0):o=!1;o||d("98",r,t)}}}function y(t,e,n){w[t]&&d("100",t),w[t]=e,x[t]=e.eventTypes[n].dependencies}var m=[],b={},w={},x={};function C(t){p&&d("101"),p=Array.prototype.slice.call(t),v()}function S(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];g.hasOwnProperty(e)&&g[e]===r||(g[e]&&d("102",e),g[e]=r,n=!0)}n&&v()}var E=Object.freeze({plugins:m,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:x,possibleRegistrationNames:null,injectEventPluginOrder:C,injectEventPluginsByName:S}),k=null,_=null,P=null;function O(t,e,n,r){e=t.type||"unknown-event",t.currentTarget=P(r),h.invokeGuardedCallbackAndCatchFirstError(e,n,void 0,t),t.currentTarget=null}function T(t,e){return null==e&&d("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function M(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var L=null;function A(t,e){if(t){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)O(t,e,n[o],r[o]);else n&&O(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}function j(t){return A(t,!0)}function N(t){return A(t,!1)}var R={injectEventPluginOrder:C,injectEventPluginsByName:S};function F(t,e){var n=t.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}return t?null:(n&&"function"!=typeof n&&d("231",e,typeof n),n)}function I(t,e){null!==t&&(L=T(L,t)),t=L,L=null,t&&(M(t,e?j:N),L&&d("95"),h.rethrowCaughtError())}function D(t,e,n,r){for(var o=null,i=0;i<m.length;i++){var a=m[i];a&&(a=a.extractEvents(t,e,n,r))&&(o=T(o,a))}I(o,!1)}var U=Object.freeze({injection:R,getListener:F,runEventsInBatch:I,runExtractedEventsInBatch:D}),z=Math.random().toString(36).slice(2),q="__reactInternalInstance$"+z,W="__reactEventHandlers$"+z;function B(t){if(t[q])return t[q];for(;!t[q];){if(!t.parentNode)return null;t=t.parentNode}return 5===(t=t[q]).tag||6===t.tag?t:null}function H(t){if(5===t.tag||6===t.tag)return t.stateNode;d("33")}function V(t){return t[W]||null}var G=Object.freeze({precacheFiberNode:function(t,e){e[q]=t},getClosestInstanceFromNode:B,getInstanceFromNode:function(t){return!(t=t[q])||5!==t.tag&&6!==t.tag?null:t},getNodeFromInstance:H,getFiberCurrentPropsFromNode:V,updateFiberProps:function(t,e){t[W]=e}});function K(t){do{t=t.return}while(t&&5!==t.tag);return t||null}function Y(t,e,n){for(var r=[];t;)r.push(t),t=K(t);for(t=r.length;0<t--;)e(r[t],"captured",n);for(t=0;t<r.length;t++)e(r[t],"bubbled",n)}function X(t,e,n){(e=F(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=T(n._dispatchListeners,e),n._dispatchInstances=T(n._dispatchInstances,t))}function $(t){t&&t.dispatchConfig.phasedRegistrationNames&&Y(t._targetInst,X,t)}function Q(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst;Y(e=e?K(e):null,X,t)}}function J(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=F(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,e),n._dispatchInstances=T(n._dispatchInstances,t))}function Z(t){t&&t.dispatchConfig.registrationName&&J(t._targetInst,null,t)}function tt(t){M(t,$)}function et(t,e,n,r){if(n&&r)t:{for(var o=n,i=r,a=0,u=o;u;u=K(u))a++;u=0;for(var s=i;s;s=K(s))u++;for(;0<a-u;)o=K(o),a--;for(;0<u-a;)i=K(i),u--;for(;a--;){if(o===i||o===i.alternate)break t;o=K(o),i=K(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=K(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=K(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",t);for(t=n.length;0<t--;)J(n[t],"captured",e)}var nt=Object.freeze({accumulateTwoPhaseDispatches:tt,accumulateTwoPhaseDispatchesSkipTarget:function(t){M(t,Q)},accumulateEnterLeaveDispatches:et,accumulateDirectDispatches:function(t){M(t,Z)}}),rt=null;function ot(){return!rt&&i.canUseDOM&&(rt="textContent"in document.documentElement?"textContent":"innerText"),rt}var it={_root:null,_startText:null,_fallbackText:null};function at(){if(it._fallbackText)return it._fallbackText;var t,e,n=it._startText,r=n.length,o=ut(),i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);return it._fallbackText=o.slice(t,1<e?1-e:void 0),it._fallbackText}function ut(){return"value"in it._root?it._root.value:it._root[ot()]}var st="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),lt={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ct(t,e,n,r){for(var o in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(o)&&((e=t[o])?this[o]=e(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function ft(t,e,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}function dt(t){t instanceof this||d("223"),t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function ht(t){t.eventPool=[],t.getPooled=ft,t.release=dt}a(ct.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;for(e=0;e<st.length;e++)this[st[e]]=null}}),ct.Interface=lt,ct.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var o=new e;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,t),n.extend=r.extend,ht(n),n},ht(ct);var pt=ct.extend({data:null}),gt=ct.extend({data:null}),vt=[9,13,27,32],yt=i.canUseDOM&&"CompositionEvent"in window,mt=null;i.canUseDOM&&"documentMode"in document&&(mt=document.documentMode);var bt=i.canUseDOM&&"TextEvent"in window&&!mt,wt=i.canUseDOM&&(!yt||mt&&8<mt&&11>=mt),xt=String.fromCharCode(32),Ct={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},St=!1;function Et(t,e){switch(t){case"topKeyUp":return-1!==vt.indexOf(e.keyCode);case"topKeyDown":return 229!==e.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function kt(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var _t=!1;var Pt={eventTypes:Ct,extractEvents:function(t,e,n,r){var o=void 0,i=void 0;if(yt)t:{switch(t){case"topCompositionStart":o=Ct.compositionStart;break t;case"topCompositionEnd":o=Ct.compositionEnd;break t;case"topCompositionUpdate":o=Ct.compositionUpdate;break t}o=void 0}else _t?Et(t,n)&&(o=Ct.compositionEnd):"topKeyDown"===t&&229===n.keyCode&&(o=Ct.compositionStart);return o?(wt&&(_t||o!==Ct.compositionStart?o===Ct.compositionEnd&&_t&&(i=at()):(it._root=r,it._startText=ut(),_t=!0)),o=pt.getPooled(o,e,n,r),i?o.data=i:null!==(i=kt(n))&&(o.data=i),tt(o),i=o):i=null,(t=bt?function(t,e){switch(t){case"topCompositionEnd":return kt(e);case"topKeyPress":return 32!==e.which?null:(St=!0,xt);case"topTextInput":return(t=e.data)===xt&&St?null:t;default:return null}}(t,n):function(t,e){if(_t)return"topCompositionEnd"===t||!yt&&Et(t,e)?(t=at(),it._root=null,it._startText=null,it._fallbackText=null,_t=!1,t):null;switch(t){case"topPaste":return null;case"topKeyPress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"topCompositionEnd":return wt?null:e.data;default:return null}}(t,n))?((e=gt.getPooled(Ct.beforeInput,e,n,r)).data=t,tt(e)):e=null,null===i?e:null===e?i:[i,e]}},Ot=null,Tt={injectFiberControlledHostComponent:function(t){Ot=t}},Mt=null,Lt=null;function At(t){if(t=_(t)){Ot&&"function"==typeof Ot.restoreControlledState||d("194");var e=k(t.stateNode);Ot.restoreControlledState(t.stateNode,t.type,e)}}function jt(t){Mt?Lt?Lt.push(t):Lt=[t]:Mt=t}function Nt(){return null!==Mt||null!==Lt}function Rt(){if(Mt){var t=Mt,e=Lt;if(Lt=Mt=null,At(t),e)for(t=0;t<e.length;t++)At(e[t])}}var Ft=Object.freeze({injection:Tt,enqueueStateRestore:jt,needsStateRestore:Nt,restoreStateIfNeeded:Rt});function It(t,e){return t(e)}function Dt(t,e,n){return t(e,n)}function Ut(){}var zt=!1;function qt(t,e){if(zt)return t(e);zt=!0;try{return It(t,e)}finally{zt=!1,Nt()&&(Ut(),Rt())}}var Wt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bt(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Wt[t.type]:"textarea"===e}function Ht(t){return(t=t.target||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function Vt(t,e){return!(!i.canUseDOM||e&&!("addEventListener"in document))&&((e=(t="on"+t)in document)||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e)}function Gt(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Kt(t){t._valueTracker||(t._valueTracker=function(t){var e=Gt(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(t,e,{configurable:!0,get:function(){return n.get.call(this)},set:function(t){r=""+t,n.set.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}(t))}function Yt(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Gt(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}var Xt=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,$t="function"==typeof Symbol&&Symbol.for,Qt=$t?Symbol.for("react.element"):60103,Jt=$t?Symbol.for("react.call"):60104,Zt=$t?Symbol.for("react.return"):60105,te=$t?Symbol.for("react.portal"):60106,ee=$t?Symbol.for("react.fragment"):60107,ne=$t?Symbol.for("react.strict_mode"):60108,re=$t?Symbol.for("react.provider"):60109,oe=$t?Symbol.for("react.context"):60110,ie=$t?Symbol.for("react.async_mode"):60111,ae=$t?Symbol.for("react.forward_ref"):60112,ue="function"==typeof Symbol&&Symbol.iterator;function se(t){return null===t||void 0===t?null:"function"==typeof(t=ue&&t[ue]||t["@@iterator"])?t:null}function le(t){if("function"==typeof(t=t.type))return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ee:return"ReactFragment";case te:return"ReactPortal";case Jt:return"ReactCall";case Zt:return"ReactReturn"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case ae:return""!==(t=t.render.displayName||t.render.name||"")?"ForwardRef("+t+")":"ForwardRef"}return null}function ce(t){var e="";do{t:switch(t.tag){case 0:case 1:case 2:case 5:var n=t._debugOwner,r=t._debugSource,o=le(t),i=null;n&&(i=le(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break t;default:o=""}e+=o,t=t.return}while(t);return e}var fe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,de={},he={};function pe(t,e,n,r,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){ge[t]=new pe(t,0,!1,t,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];ge[e]=new pe(e,1,!1,t[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){ge[t]=new pe(t,2,!1,t.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(t){ge[t]=new pe(t,2,!1,t,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){ge[t]=new pe(t,3,!1,t.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(t){ge[t]=new pe(t,3,!0,t.toLowerCase(),null)}),["capture","download"].forEach(function(t){ge[t]=new pe(t,4,!1,t.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(t){ge[t]=new pe(t,6,!1,t.toLowerCase(),null)}),["rowSpan","start"].forEach(function(t){ge[t]=new pe(t,5,!1,t.toLowerCase(),null)});var ve=/[\-:]([a-z])/g;function ye(t){return t[1].toUpperCase()}function me(t,e,n,r){var o=ge.hasOwnProperty(e)?ge[e]:null;(null!==o?0===o.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null===e||void 0===e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,o,r)&&(n=null),r||null===o?function(t){return!!he.hasOwnProperty(t)||!de.hasOwnProperty(t)&&(fe.test(t)?he[t]=!0:(de[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=null===n?3!==o.type&&"":n:(e=o.attributeName,r=o.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function be(t,e){var n=e.checked;return a({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function we(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=ke(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function xe(t,e){null!=(e=e.checked)&&me(t,"checked",e,!1)}function Ce(t,e){xe(t,e);var n=ke(e.value);null!=n&&("number"===e.type?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n)),e.hasOwnProperty("value")?Ee(t,e.type,n):e.hasOwnProperty("defaultValue")&&Ee(t,e.type,ke(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function Se(t,e){(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue"))&&(""===t.value&&(t.value=""+t._wrapperState.initialValue),t.defaultValue=""+t._wrapperState.initialValue),""!==(e=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!t.defaultChecked,""!==e&&(t.name=e)}function Ee(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ke(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(ve,ye);ge[e]=new pe(e,1,!1,t,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(ve,ye);ge[e]=new pe(e,1,!1,t,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(ve,ye);ge[e]=new pe(e,1,!1,t,"http://www.w3.org/XML/1998/namespace")}),ge.tabIndex=new pe("tabIndex",1,!1,"tabindex",null);var _e={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Pe(t,e,n){return(t=ct.getPooled(_e.change,t,e,n)).type="change",jt(n),tt(t),t}var Oe=null,Te=null;function Me(t){I(t,!1)}function Le(t){if(Yt(H(t)))return t}function Ae(t,e){if("topChange"===t)return e}var je=!1;function Ne(){Oe&&(Oe.detachEvent("onpropertychange",Re),Te=Oe=null)}function Re(t){"value"===t.propertyName&&Le(Te)&&qt(Me,t=Pe(Te,t,Ht(t)))}function Fe(t,e,n){"topFocus"===t?(Ne(),Te=n,(Oe=e).attachEvent("onpropertychange",Re)):"topBlur"===t&&Ne()}function Ie(t){if("topSelectionChange"===t||"topKeyUp"===t||"topKeyDown"===t)return Le(Te)}function De(t,e){if("topClick"===t)return Le(e)}function Ue(t,e){if("topInput"===t||"topChange"===t)return Le(e)}i.canUseDOM&&(je=Vt("input")&&(!document.documentMode||9<document.documentMode));var ze={eventTypes:_e,_isInputEventSupported:je,extractEvents:function(t,e,n,r){var o=e?H(e):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Ae:Bt(o)?je?i=Ue:(i=Ie,a=Fe):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=De),i&&(i=i(t,e)))return Pe(i,n,r);a&&a(t,o,e),"topBlur"===t&&null!=e&&(t=e._wrapperState||o._wrapperState)&&t.controlled&&"number"===o.type&&Ee(o,"number",o.value)}},qe=ct.extend({view:null,detail:null}),We={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Be(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=We[t])&&!!e[t]}function He(){return Be}var Ve=qe.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:He,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)}}),Ge={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ke={eventTypes:Ge,extractEvents:function(t,e,n,r){if("topMouseOver"===t&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==t&&"topMouseOver"!==t)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===t?(t=e,e=(e=n.relatedTarget||n.toElement)?B(e):null):t=null,t===e)return null;var i=null==t?o:H(t);o=null==e?o:H(e);var a=Ve.getPooled(Ge.mouseLeave,t,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Ve.getPooled(Ge.mouseEnter,e,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,et(a,n,t,e),[a,n]}};function Ye(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 3===e.tag?2:3}function Xe(t){return!!(t=t._reactInternalFiber)&&2===Ye(t)}function $e(t){2!==Ye(t)&&d("188")}function Qe(t){var e=t.alternate;if(!e)return 3===(e=Ye(t))&&d("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return $e(o),t;if(a===r)return $e(o),e;a=a.sibling}d("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?t:e}function Je(t){if(!(t=Qe(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var Ze=ct.extend({animationName:null,elapsedTime:null,pseudoElement:null}),tn=ct.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),en=qe.extend({relatedTarget:null});function nn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=qe.extend({key:function(t){if(t.key){var e=rn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=nn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?on[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:He,charCode:function(t){return"keypress"===t.type?nn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?nn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),un=Ve.extend({dataTransfer:null}),sn=qe.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:He}),ln=ct.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Ve.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},dn={};function hn(t,e){var n=t[0].toUpperCase()+t.slice(1),r="on"+n;e={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:e},fn[t]=e,dn[n]=e}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(t){hn(t,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(t){hn(t,!1)});var pn={eventTypes:fn,isInteractiveTopLevelEventType:function(t){return void 0!==(t=dn[t])&&!0===t.isInteractive},extractEvents:function(t,e,n,r){var o=dn[t];if(!o)return null;switch(t){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":t=an;break;case"topBlur":case"topFocus":t=en;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":t=Ve;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":t=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":t=sn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":t=Ze;break;case"topTransitionEnd":t=ln;break;case"topScroll":t=qe;break;case"topWheel":t=cn;break;case"topCopy":case"topCut":case"topPaste":t=tn;break;default:t=ct}return tt(e=t.getPooled(o,e,n,r)),e}},gn=pn.isInteractiveTopLevelEventType,vn=[];function yn(t){var e=t.targetInst;do{if(!e){t.ancestors.push(e);break}var n;for(n=e;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;t.ancestors.push(e),e=B(n)}while(e);for(n=0;n<t.ancestors.length;n++)e=t.ancestors[n],D(t.topLevelType,e,t.nativeEvent,Ht(t.nativeEvent))}var mn=!0;function bn(t){mn=!!t}function wn(t,e,n){if(!n)return null;t=(gn(t)?Cn:Sn).bind(null,t),n.addEventListener(e,t,!1)}function xn(t,e,n){if(!n)return null;t=(gn(t)?Cn:Sn).bind(null,t),n.addEventListener(e,t,!0)}function Cn(t,e){Dt(Sn,t,e)}function Sn(t,e){if(mn){var n=Ht(e);if(null!==(n=B(n))&&"number"==typeof n.tag&&2!==Ye(n)&&(n=null),vn.length){var r=vn.pop();r.topLevelType=t,r.nativeEvent=e,r.targetInst=n,t=r}else t={topLevelType:t,nativeEvent:e,targetInst:n,ancestors:[]};try{qt(yn,t)}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,10>vn.length&&vn.push(t)}}}var En=Object.freeze({get _enabled(){return mn},setEnabled:bn,isEnabled:function(){return mn},trapBubbledEvent:wn,trapCapturedEvent:xn,dispatchEvent:Sn});function kn(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}var _n={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},Pn={},On={};function Tn(t){if(Pn[t])return Pn[t];if(!_n[t])return t;var e,n=_n[t];for(e in n)if(n.hasOwnProperty(e)&&e in On)return Pn[t]=n[e];return t}i.canUseDOM&&(On=document.createElement("div").style,"AnimationEvent"in window||(delete _n.animationend.animation,delete _n.animationiteration.animation,delete _n.animationstart.animation),"TransitionEvent"in window||delete _n.transitionend.transition);var Mn={topAnimationEnd:Tn("animationend"),topAnimationIteration:Tn("animationiteration"),topAnimationStart:Tn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Tn("transitionend"),topWheel:"wheel"},Ln={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},An={},jn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function Rn(t){return Object.prototype.hasOwnProperty.call(t,Nn)||(t[Nn]=jn++,An[t[Nn]]={}),An[t[Nn]]}function Fn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function In(t,e){var n,r=Fn(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=Fn(r)}}function Dn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)}var Un=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},qn=null,Wn=null,Bn=null,Hn=!1;function Vn(t,e){if(Hn||null==qn||qn!==s())return null;var n=qn;return"selectionStart"in n&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Bn&&l(Bn,n)?null:(Bn=n,(t=ct.getPooled(zn.select,Wn,t,e)).type="select",t.target=qn,tt(t),t)}var Gn={eventTypes:zn,extractEvents:function(t,e,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){t:{i=Rn(i),o=x.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break t}}i=!0}o=!i}if(o)return null;switch(i=e?H(e):window,t){case"topFocus":(Bt(i)||"true"===i.contentEditable)&&(qn=i,Wn=e,Bn=null);break;case"topBlur":Bn=Wn=qn=null;break;case"topMouseDown":Hn=!0;break;case"topContextMenu":case"topMouseUp":return Hn=!1,Vn(n,r);case"topSelectionChange":if(Un)break;case"topKeyDown":case"topKeyUp":return Vn(n,r)}return null}};function Kn(t,e,n,r){this.tag=t,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=e,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Yn(t,e,n){var r=t.alternate;return null===r?((r=new Kn(t.tag,e,t.key,t.mode)).type=t.type,r.stateNode=t.stateNode,r.alternate=t,t.alternate=r):(r.pendingProps=e,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=t.child,r.memoizedProps=t.memoizedProps,r.memoizedState=t.memoizedState,r.updateQueue=t.updateQueue,r.sibling=t.sibling,r.index=t.index,r.ref=t.ref,r}function Xn(t,e,n){var r=t.type,o=t.key;t=t.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case ee:return $n(t.children,e,n,o);case ie:i=11,e|=3;break;case ne:i=11,e|=2;break;case Jt:i=7;break;case Zt:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case re:i=13;break;case oe:i=12;break;case ae:i=14;break;default:if("number"==typeof r.tag)return(e=r).pendingProps=t,e.expirationTime=n,e;d("130",null==r?r:typeof r,"")}else d("130",null==r?r:typeof r,"")}return(e=new Kn(i,t,o,e)).type=r,e.expirationTime=n,e}function $n(t,e,n,r){return(t=new Kn(10,t,r,e)).expirationTime=n,t}function Qn(t,e,n){return(t=new Kn(6,t,null,e)).expirationTime=n,t}function Jn(t,e,n){return(e=new Kn(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}R.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=G.getFiberCurrentPropsFromNode,_=G.getInstanceFromNode,P=G.getNodeFromInstance,R.injectEventPluginsByName({SimpleEventPlugin:pn,EnterLeaveEventPlugin:Ke,ChangeEventPlugin:ze,SelectEventPlugin:Gn,BeforeInputEventPlugin:Pt});var Zn=null,tr=null;function er(t){return function(e){try{return t(e)}catch(t){}}}function nr(t){"function"==typeof Zn&&Zn(t)}function rr(t){"function"==typeof tr&&tr(t)}function or(t){return{baseState:t,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(t,e){null===t.last?t.first=t.last=e:(t.last.next=e,t.last=e),(0===t.expirationTime||t.expirationTime>e.expirationTime)&&(t.expirationTime=e.expirationTime)}new Set;var ar=void 0,ur=void 0;function sr(t){ar=ur=null;var e=t.alternate,n=t.updateQueue;null===n&&(n=t.updateQueue=or(null)),null!==e?null===(t=e.updateQueue)&&(t=e.updateQueue=or(null)):t=null,ar=n,ur=t!==n?t:null}function lr(t,e){sr(t),t=ar;var n=ur;null===n?ir(t,e):null===t.last||null===n.last?(ir(t,e),ir(n,e)):(ir(t,e),n.last=e)}function cr(t,e,n,r){return"function"==typeof(t=t.partialState)?t.call(e,n,r):t}function fr(t,e,n,r,o,i){null!==t&&t.updateQueue===n&&(n=e.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?t=n.baseState:(t=n.baseState=e.memoizedState,n.isInitialized=!0);for(var u=!0,s=n.first,l=!1;null!==s;){var c=s.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),l||(l=!0,n.baseState=t)}else l||(n.first=s.next,null===n.first&&(n.last=null)),s.isReplace?(t=cr(s,r,t,o),u=!0):(c=cr(s,r,t,o))&&(t=u?a({},t,c):a(t,c),u=!1),s.isForced&&(n.hasForceUpdate=!0),null!==s.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(s)),null!==s.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[s.capturedValue]:c.push(s.capturedValue));s=s.next}return null!==n.callbackList?e.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(e.updateQueue=null),l||(n.baseState=t),t}function dr(t,e){var n=t.callbackList;if(null!==n)for(t.callbackList=null,t=0;t<n.length;t++){var r=n[t],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(e)}}var hr=Array.isArray;function pr(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),r=n.stateNode),r||d("147",t);var o=""+t;return null!==e&&null!==e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs===f?r.refs={}:r.refs;null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&d("148"),n._owner||d("254",t)}return t}function gr(t,e){"textarea"!==t.type&&d("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function vr(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=Yn(t,e,n)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function a(e){return t&&null===e.alternate&&(e.effectTag=2),e}function u(t,e,n,r){return null===e||6!==e.tag?((e=Qn(n,t.mode,r)).return=t,e):((e=o(e,n,r)).return=t,e)}function s(t,e,n,r){return null!==e&&e.type===n.type?((r=o(e,n.props,r)).ref=pr(t,e,n),r.return=t,r):((r=Xn(n,t.mode,r)).ref=pr(t,e,n),r.return=t,r)}function l(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Jn(n,t.mode,r)).return=t,e):((e=o(e,n.children||[],r)).return=t,e)}function c(t,e,n,r,i){return null===e||10!==e.tag?((e=$n(n,t.mode,r,i)).return=t,e):((e=o(e,n,r)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Qn(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case Qt:return(n=Xn(e,t.mode,n)).ref=pr(t,null,e),n.return=t,n;case te:return(e=Jn(e,t.mode,n)).return=t,e}if(hr(e)||se(e))return(e=$n(e,t.mode,n,null)).return=t,e;gr(t,e)}return null}function h(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qt:return n.key===o?n.type===ee?c(t,e,n.props.children,r,o):s(t,e,n,r):null;case te:return n.key===o?l(t,e,n,r):null}if(hr(n)||se(n))return null!==o?null:c(t,e,n,r,null);gr(t,n)}return null}function p(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return u(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qt:return t=t.get(null===r.key?n:r.key)||null,r.type===ee?c(e,t,r.props.children,o,r.key):s(e,t,r,o);case te:return l(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(hr(r)||se(r))return c(e,t=t.get(n)||null,r,o,null);gr(e,r)}return null}function g(o,a,u,s){for(var l=null,c=null,d=a,g=a=0,v=null;null!==d&&g<u.length;g++){d.index>g?(v=d,d=null):v=d.sibling;var y=h(o,d,u[g],s);if(null===y){null===d&&(d=v);break}t&&d&&null===y.alternate&&e(o,d),a=i(y,a,g),null===c?l=y:c.sibling=y,c=y,d=v}if(g===u.length)return n(o,d),l;if(null===d){for(;g<u.length;g++)(d=f(o,u[g],s))&&(a=i(d,a,g),null===c?l=d:c.sibling=d,c=d);return l}for(d=r(o,d);g<u.length;g++)(v=p(d,o,g,u[g],s))&&(t&&null!==v.alternate&&d.delete(null===v.key?g:v.key),a=i(v,a,g),null===c?l=v:c.sibling=v,c=v);return t&&d.forEach(function(t){return e(o,t)}),l}function v(o,a,u,s){var l=se(u);"function"!=typeof l&&d("150"),null==(u=l.call(u))&&d("151");for(var c=l=null,g=a,v=a=0,y=null,m=u.next();null!==g&&!m.done;v++,m=u.next()){g.index>v?(y=g,g=null):y=g.sibling;var b=h(o,g,m.value,s);if(null===b){g||(g=y);break}t&&g&&null===b.alternate&&e(o,g),a=i(b,a,v),null===c?l=b:c.sibling=b,c=b,g=y}if(m.done)return n(o,g),l;if(null===g){for(;!m.done;v++,m=u.next())null!==(m=f(o,m.value,s))&&(a=i(m,a,v),null===c?l=m:c.sibling=m,c=m);return l}for(g=r(o,g);!m.done;v++,m=u.next())null!==(m=p(g,o,v,m.value,s))&&(t&&null!==m.alternate&&g.delete(null===m.key?v:m.key),a=i(m,a,v),null===c?l=m:c.sibling=m,c=m);return t&&g.forEach(function(t){return e(o,t)}),l}return function(t,r,i,u){"object"==typeof i&&null!==i&&i.type===ee&&null===i.key&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Qt:t:{var l=i.key;for(s=r;null!==s;){if(s.key===l){if(10===s.tag?i.type===ee:s.type===i.type){n(t,s.sibling),(r=o(s,i.type===ee?i.props.children:i.props,u)).ref=pr(t,s,i),r.return=t,t=r;break t}n(t,s);break}e(t,s),s=s.sibling}i.type===ee?((r=$n(i.props.children,t.mode,u,i.key)).return=t,t=r):((u=Xn(i,t.mode,u)).ref=pr(t,r,i),u.return=t,t=u)}return a(t);case te:t:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[],u)).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Jn(i,t.mode,u)).return=t,t=r}return a(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(t,r.sibling),(r=o(r,i,u)).return=t,t=r):(n(t,r),(r=Qn(i,t.mode,u)).return=t,t=r),a(t);if(hr(i))return g(t,r,i,u);if(se(i))return v(t,r,i,u);if(s&&gr(t,i),void 0===i)switch(t.tag){case 2:case 1:d("152",(u=t.type).displayName||u.name||"Component")}return n(t,r)}}var yr=vr(!0),mr=vr(!1);function br(t,e,n,r,o,i,u){function s(t,e,n){c(t,e,n,e.expirationTime)}function c(t,e,n,r){e.child=null===t?mr(e,null,n,r):yr(e,t.child,n,r)}function h(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function p(t,e,n,r,o,i){if(h(t,e),!n&&!o)return r&&O(e,!1),y(t,e);n=e.stateNode,Xt.current=e;var a=o?null:n.render();return e.effectTag|=1,o&&(c(t,e,null,i),e.child=null),c(t,e,a,i),e.memoizedState=n.state,e.memoizedProps=n.props,r&&O(e,!0),e.child}function g(t){var e=t.stateNode;e.pendingContext?P(t,e.pendingContext,e.pendingContext!==e.context):e.context&&P(t,e.context,!1),x(t,e.containerInfo)}function v(t,e,n,r){var o=t.child;for(null!==o&&(o.return=t);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===e&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===t.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===t){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function y(t,e){if(null!==t&&e.child!==t.child&&d("153"),null!==e.child){var n=Yn(t=e.child,t.pendingProps,t.expirationTime);for(e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Yn(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}var m=t.shouldSetTextContent,b=t.shouldDeprioritizeSubtree,w=e.pushHostContext,x=e.pushHostContainer,C=r.pushProvider,S=n.getMaskedContext,E=n.getUnmaskedContext,k=n.hasContextChanged,_=n.pushContextProvider,P=n.pushTopLevelContextObject,O=n.invalidateContextProvider,T=o.enterHydrationState,M=o.resetHydrationState,L=o.tryToClaimNextHydratableInstance,A=(t=function(t,e,n,r,o){function i(t,e,n,r,o,i){if(null===e||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)return!0;var a=t.stateNode;return t=t.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&l(e,n)&&l(r,o))}function u(t,e){e.updater=y,t.stateNode=e,e._reactInternalFiber=t}function s(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&y.enqueueReplaceState(e,e.state,null)}function c(t,e,n,r){if("function"==typeof(t=t.type).getDerivedStateFromProps)return t.getDerivedStateFromProps.call(null,n,r)}var d=t.cacheContext,h=t.getMaskedContext,p=t.getUnmaskedContext,g=t.isContextConsumer,v=t.hasContextChanged,y={isMounted:Xe,enqueueSetState:function(t,r,o){t=t._reactInternalFiber,o=void 0===o?null:o;var i=n(t);lr(t,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),e(t,i)},enqueueReplaceState:function(t,r,o){t=t._reactInternalFiber,o=void 0===o?null:o;var i=n(t);lr(t,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),e(t,i)},enqueueForceUpdate:function(t,r){t=t._reactInternalFiber,r=void 0===r?null:r;var o=n(t);lr(t,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),e(t,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:c,constructClassInstance:function(t,e){var n=t.type,r=p(t),o=g(t),i=o?h(t,r):f,s=null!==(n=new n(e,i)).state&&void 0!==n.state?n.state:null;return u(t,n),t.memoizedState=s,null!==(e=c(t,0,e,s))&&void 0!==e&&(t.memoizedState=a({},t.memoizedState,e)),o&&d(t,r,i),n},mountClassInstance:function(t,e){var n=t.type,r=t.alternate,o=t.stateNode,i=t.pendingProps,a=p(t);o.props=i,o.state=t.memoizedState,o.refs=f,o.context=h(t,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&y.enqueueReplaceState(o,o.state,null),null!==(n=t.updateQueue)&&(o.state=fr(r,t,n,o,i,e))),"function"==typeof o.componentDidMount&&(t.effectTag|=4)},resumeMountClassInstance:function(t,e){var n=t.type,u=t.stateNode;u.props=t.memoizedProps,u.state=t.memoizedState;var l=t.memoizedProps,f=t.pendingProps,d=u.context,g=p(t);g=h(t,g),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==f||d!==g)&&s(t,u,f,g),d=t.memoizedState,e=null!==t.updateQueue?fr(null,t,t.updateQueue,u,f,e):d;var y=void 0;if(l!==f&&(y=c(t,0,f,e)),null!==y&&void 0!==y){e=null===e||void 0===e?y:a({},e,y);var m=t.updateQueue;null!==m&&(m.baseState=a({},m.baseState,y))}return l!==f||d!==e||v()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((l=i(t,l,f,d,e,g))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.effectTag|=4)):("function"==typeof u.componentDidMount&&(t.effectTag|=4),r(t,f),o(t,e)),u.props=f,u.state=e,u.context=g,l):("function"==typeof u.componentDidMount&&(t.effectTag|=4),!1)},updateClassInstance:function(t,e,n){var u=e.type,l=e.stateNode;l.props=e.memoizedProps,l.state=e.memoizedState;var f=e.memoizedProps,d=e.pendingProps,g=l.context,y=p(e);y=h(e,y),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(f!==d||g!==y)&&s(e,l,d,y),g=e.memoizedState,n=null!==e.updateQueue?fr(t,e,e.updateQueue,l,d,n):g;var m=void 0;if(f!==d&&(m=c(e,0,d,n)),null!==m&&void 0!==m){n=null===n||void 0===n?m:a({},n,m);var b=e.updateQueue;null!==b&&(b.baseState=a({},b.baseState,m))}return f!==d||g!==n||v()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((m=i(e,f,d,g,n,y))?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(d,n,y),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(d,n,y)),"function"==typeof l.componentDidUpdate&&(e.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(e.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||f===t.memoizedProps&&g===t.memoizedState||(e.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===t.memoizedProps&&g===t.memoizedState||(e.effectTag|=2048),r(e,d),o(e,n)),l.props=d,l.state=n,l.context=y,m):("function"!=typeof l.componentDidUpdate||f===t.memoizedProps&&g===t.memoizedState||(e.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===t.memoizedProps&&g===t.memoizedState||(e.effectTag|=2048),!1)}}}(n,i,u,function(t,e){t.memoizedProps=e},function(t,e){t.memoizedState=e})).adoptClassInstance,j=t.callGetDerivedStateFromProps,N=t.constructClassInstance,R=t.mountClassInstance,F=t.resumeMountClassInstance,I=t.updateClassInstance;return{beginWork:function(t,e,n){if(0===e.expirationTime||e.expirationTime>n){switch(e.tag){case 3:g(e);break;case 2:_(e);break;case 4:x(e,e.stateNode.containerInfo);break;case 13:C(e)}return null}switch(e.tag){case 0:null!==t&&d("155");var r=e.type,o=e.pendingProps,i=E(e);return r=r(o,i=S(e,i)),e.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=e.type,e.tag=2,e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=j(e,r,o,e.memoizedState))&&void 0!==o&&(e.memoizedState=a({},e.memoizedState,o))),o=_(e),A(e,r),R(e,n),t=p(t,e,!0,o,!1,n)):(e.tag=1,s(t,e,r),e.memoizedProps=o,t=e.child),t;case 1:return o=e.type,n=e.pendingProps,k()||e.memoizedProps!==n?(r=E(e),o=o(n,r=S(e,r)),e.effectTag|=1,s(t,e,o),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 2:o=_(e),null===t?null===e.stateNode?(N(e,e.pendingProps),R(e,n),r=!0):r=F(e,n):r=I(t,e,n),i=!1;var u=e.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),p(t,e,r,o,i,n);case 3:t:if(g(e),r=e.updateQueue,null!==r){if(i=e.memoizedState,o=fr(t,e,r,null,null,n),e.memoizedState=o,null!==(r=e.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){M(),t=y(t,e);break t}r=o.element}i=e.stateNode,(null===t||null===t.child)&&i.hydrate&&T(e)?(e.effectTag|=2,e.child=mr(e,null,r,n)):(M(),s(t,e,r)),e.memoizedState=o,t=e.child}else M(),t=y(t,e);return t;case 5:return w(e),null===t&&L(e),o=e.type,u=e.memoizedProps,r=e.pendingProps,i=null!==t?t.memoizedProps:null,k()||u!==r||((u=1&e.mode&&b(o,r))&&(e.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,m(o,r)?u=null:i&&m(o,i)&&(e.effectTag|=16),h(t,e),1073741823!==n&&1&e.mode&&b(o,r)?(e.expirationTime=1073741823,e.memoizedProps=r,t=null):(s(t,e,u),e.memoizedProps=r,t=e.child)):t=y(t,e),t;case 6:return null===t&&L(e),e.memoizedProps=e.pendingProps,null;case 8:e.tag=7;case 7:return o=e.pendingProps,k()||e.memoizedProps!==o||(o=e.memoizedProps),r=o.children,e.stateNode=null===t?mr(e,e.stateNode,r,n):yr(e,t.stateNode,r,n),e.memoizedProps=o,e.stateNode;case 9:return null;case 4:return x(e,e.stateNode.containerInfo),o=e.pendingProps,k()||e.memoizedProps!==o?(null===t?e.child=yr(e,null,o,n):s(t,e,o),e.memoizedProps=o,t=e.child):t=y(t,e),t;case 14:return s(t,e,n=(n=e.type.render)(e.pendingProps,e.ref)),e.memoizedProps=n,e.child;case 10:return n=e.pendingProps,k()||e.memoizedProps!==n?(s(t,e,n),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 11:return n=e.pendingProps.children,k()||null!==n&&e.memoizedProps!==n?(s(t,e,n),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 13:return function(t,e,n){var r=e.type._context,o=e.pendingProps,i=e.memoizedProps;if(!k()&&i===o)return e.stateNode=0,C(e),y(t,e);var a=o.value;if(e.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return e.stateNode=0,C(e),y(t,e);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return e.stateNode=0,C(e),y(t,e);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return e.stateNode=0,C(e),y(t,e)}else v(e,r,a,n)}return e.stateNode=a,C(e),s(t,e,o.children),e.child}(t,e,n);case 12:t:{r=e.type,i=e.pendingProps,u=e.memoizedProps,o=r._currentValue;var l=r._changedBits;if(k()||0!==l||u!==i){e.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),e.stateNode=c,0!=(l&c))v(e,r,l,n);else if(u===i){t=y(t,e);break t}s(t,e,n=(n=i.children)(o)),t=e.child}else t=y(t,e)}return t;default:d("156")}}}}function wr(t,e){var n=e.source;null===e.stack&&ce(n),null!==n&&le(n),e=e.value,null!==t&&2===t.tag&&le(t);try{e&&e.suppressReactErrorLogging||console.error(e)}catch(t){t&&t.suppressReactErrorLogging||console.error(t)}}var xr={};function Cr(t){function e(){if(null!==tt)for(var t=tt.return;null!==t;)N(t),t=t.return;et=null,nt=0,tt=null,it=!1}function n(t){return null!==at&&at.has(t)}function r(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(512&t.effectTag)){e=L(e,t,nt);var o=t;if(1073741823===nt||1073741823!==o.expirationTime){t:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break t;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==e)return e;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t)),null!==r)return r;if(null===n){it=!0;break}t=n}else{if(null!==(t=j(t)))return t.effectTag&=2559,t;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;t=n}}return null}function o(t){var e=M(t.alternate,t,nt);return null===e&&(e=r(t)),Xt.current=null,e}function i(t,n,i){Z&&d("243"),Z=!0,n===nt&&t===et&&null!==tt||(e(),nt=n,tt=Yn((et=t).current,null,nt),t.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==tt&&!E();)tt=o(tt);else for(;null!==tt;)tt=o(tt)}catch(t){if(null===tt){a=!0,k(t);break}var u=(i=tt).return;if(null===u){a=!0,k(t);break}A(u,i,t),tt=r(i)}break}return Z=!1,a||null!==tt?null:it?(t.pendingCommitExpirationTime=n,t.current.alternate):void d("262")}function u(t,e,n,r){lr(e,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:t={value:n,source:t,stack:ce(t)},next:null}),c(e,r)}function s(t,e){t:{Z&&!ot&&d("263");for(var r=t.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(t,r,e,1),t=void 0;break t}break;case 3:u(t,r,e,1),t=void 0;break t}r=r.return}3===t.tag&&u(t,t,e,1),t=void 0}return t}function l(t){return t=0!==J?J:Z?ot?1:nt:1&t.mode?xt?10*(1+((h()+15)/10|0)):25*(1+((h()+500)/25|0)):1,xt&&(0===pt||t>pt)&&(pt=t),t}function c(t,n){t:{for(;null!==t;){if((0===t.expirationTime||t.expirationTime>n)&&(t.expirationTime=n),null!==t.alternate&&(0===t.alternate.expirationTime||t.alternate.expirationTime>n)&&(t.alternate.expirationTime=n),null===t.return){if(3!==t.tag){n=void 0;break t}var r=t.stateNode;!Z&&0!==nt&&n<nt&&e(),Z&&!ot&&et===r||v(r,n),Et>St&&d("185")}t=t.return}n=void 0}return n}function h(){return $=H()-X,2+($/10|0)}function p(t,e,n,r,o){var i=J;J=1;try{return t(e,n,r,o)}finally{J=i}}function g(t){if(0!==lt){if(t>lt)return;G(ct)}var e=H()-X;lt=t,ct=V(m,{timeout:10*(t-2)-e})}function v(t,e){if(null===t.nextScheduledRoot)t.remainingExpirationTime=e,null===st?(ut=st=t,t.nextScheduledRoot=t):(st=st.nextScheduledRoot=t).nextScheduledRoot=ut;else{var n=t.remainingExpirationTime;(0===n||e<n)&&(t.remainingExpirationTime=e)}ft||(bt?wt&&(dt=t,ht=1,C(t,1,!1)):1===e?b():g(e))}function y(){var t=0,e=null;if(null!==st)for(var n=st,r=ut;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===st)&&d("244"),r===r.nextScheduledRoot){ut=st=r.nextScheduledRoot=null;break}if(r===ut)ut=o=r.nextScheduledRoot,st.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===st){(st=n).nextScheduledRoot=ut,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===t||o<t)&&(t=o,e=r),r===st)break;n=r,r=r.nextScheduledRoot}}null!==(n=dt)&&n===e&&1===t?Et++:Et=0,dt=e,ht=t}function m(t){w(0,!0,t)}function b(){w(1,!1,null)}function w(t,e,n){if(mt=n,y(),e)for(;null!==dt&&0!==ht&&(0===t||t>=ht)&&(!gt||h()>=ht);)C(dt,ht,!gt),y();else for(;null!==dt&&0!==ht&&(0===t||t>=ht);)C(dt,ht,!1),y();null!==mt&&(lt=0,ct=-1),0!==ht&&g(ht),mt=null,gt=!1,x()}function x(){if(Et=0,null!==Ct){var t=Ct;Ct=null;for(var e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){vt||(vt=!0,yt=t)}}}if(vt)throw t=yt,yt=null,vt=!1,t}function C(t,e,n){ft&&d("245"),ft=!0,n?null!==(n=t.finishedWork)?S(t,n,e):(t.finishedWork=null,null!==(n=i(t,e,!0))&&(E()?t.finishedWork=n:S(t,n,e))):null!==(n=t.finishedWork)?S(t,n,e):(t.finishedWork=null,null!==(n=i(t,e,!1))&&S(t,n,e)),ft=!1}function S(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ct?Ct=[r]:Ct.push(r),r._defer))return t.finishedWork=e,void(t.remainingExpirationTime=0);t.finishedWork=null,ot=Z=!0,(n=e.stateNode).current===e&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var o=h();if(Xt.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var i=e.firstEffect}else i=e;else i=e.firstEffect;for(K(n.containerInfo),rt=i;null!==rt;){var a=!1,u=void 0;try{for(;null!==rt;)2048&rt.effectTag&&R(rt.alternate,rt),rt=rt.nextEffect}catch(t){a=!0,u=t}a&&(null===rt&&d("178"),s(rt,u),null!==rt&&(rt=rt.nextEffect))}for(rt=i;null!==rt;){a=!1,u=void 0;try{for(;null!==rt;){var l=rt.effectTag;if(16&l&&F(rt),128&l){var c=rt.alternate;null!==c&&B(c)}switch(14&l){case 2:I(rt),rt.effectTag&=-3;break;case 6:I(rt),rt.effectTag&=-3,U(rt.alternate,rt);break;case 4:U(rt.alternate,rt);break;case 8:D(rt)}rt=rt.nextEffect}}catch(t){a=!0,u=t}a&&(null===rt&&d("178"),s(rt,u),null!==rt&&(rt=rt.nextEffect))}for(Y(n.containerInfo),n.current=e,rt=i;null!==rt;){l=!1,c=void 0;try{for(i=n,a=o,u=r;null!==rt;){var f=rt.effectTag;36&f&&z(i,rt.alternate,rt,a,u),256&f&&q(rt,k),128&f&&W(rt);var p=rt.nextEffect;rt.nextEffect=null,rt=p}}catch(t){l=!0,c=t}l&&(null===rt&&d("178"),s(rt,c),null!==rt&&(rt=rt.nextEffect))}Z=ot=!1,nr(e.stateNode),0===(e=n.current.expirationTime)&&(at=null),t.remainingExpirationTime=e}function E(){return!(null===mt||mt.timeRemaining()>kt)&&(gt=!0)}function k(t){null===dt&&d("246"),dt.remainingExpirationTime=0,vt||(vt=!0,yt=t)}var _=function(){var t=[],e=-1;return{createCursor:function(t){return{current:t}},isEmpty:function(){return-1===e},pop:function(n){0>e||(n.current=t[e],t[e]=null,e--)},push:function(n,r){t[++e]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),P=function(t,e){function n(t){return t===xr&&d("174"),t}var r=t.getChildHostContext,o=t.getRootHostContext;t=e.createCursor;var i=e.push,a=e.pop,u=t(xr),s=t(xr),l=t(xr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(l.current)},popHostContainer:function(t){a(u,t),a(s,t),a(l,t)},popHostContext:function(t){s.current===t&&(a(u,t),a(s,t))},pushHostContainer:function(t,e){i(l,e,t),i(s,t,t),i(u,xr,t),e=o(e),a(u,t),i(u,e,t)},pushHostContext:function(t){var e=n(l.current),o=n(u.current);o!==(e=r(o,t.type,e))&&(i(s,t,t),i(u,e,t))}}}(t,_),O=function(t){function e(t,e,n){(t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=n}function n(t){return 2===t.tag&&null!=t.type.childContextTypes}function r(t,e){var n=t.stateNode,r=t.type.childContextTypes;if("function"!=typeof n.getChildContext)return e;for(var o in n=n.getChildContext())o in r||d("108",le(t)||"Unknown",o);return a({},e,n)}var o=t.createCursor,i=t.push,u=t.pop,s=o(f),l=o(!1),c=f;return{getUnmaskedContext:function(t){return n(t)?c:s.current},cacheContext:e,getMaskedContext:function(t,n){var r=t.type.contextTypes;if(!r)return f;var o=t.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&e(t,n,a),a},hasContextChanged:function(){return l.current},isContextConsumer:function(t){return 2===t.tag&&null!=t.type.contextTypes},isContextProvider:n,popContextProvider:function(t){n(t)&&(u(l,t),u(s,t))},popTopLevelContextObject:function(t){u(l,t),u(s,t)},pushTopLevelContextObject:function(t,e,n){null!=s.cursor&&d("168"),i(s,e,t),i(l,n,t)},processChildContext:r,pushContextProvider:function(t){if(!n(t))return!1;var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||f,c=s.current,i(s,e,t),i(l,l.current,t),!0},invalidateContextProvider:function(t,e){var n=t.stateNode;if(n||d("169"),e){var o=r(t,c);n.__reactInternalMemoizedMergedChildContext=o,u(l,t),u(s,t),i(s,o,t)}else u(l,t);i(l,e,t)},findCurrentUnmaskedContext:function(t){for((2!==Ye(t)||2!==t.tag)&&d("170");3!==t.tag;){if(n(t))return t.stateNode.__reactInternalMemoizedMergedChildContext;(t=t.return)||d("171")}return t.stateNode.context}}}(_);_=function(t){var e=t.createCursor,n=t.push,r=t.pop,o=e(null),i=e(null),a=e(0);return{pushProvider:function(t){var e=t.type._context;n(a,e._changedBits,t),n(i,e._currentValue,t),n(o,t,t),e._currentValue=t.pendingProps.value,e._changedBits=t.stateNode},popProvider:function(t){var e=a.current,n=i.current;r(o,t),r(i,t),r(a,t),(t=t.type._context)._currentValue=n,t._changedBits=e}}}(_);var T=function(t){function e(t,e){var n=new Kn(5,null,null,0);n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function n(t,e){switch(t.tag){case 5:return null!==(e=i(e,t.type,t.pendingProps))&&(t.stateNode=e,!0);case 6:return null!==(e=a(e,t.pendingProps))&&(t.stateNode=e,!0);default:return!1}}function r(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag;)t=t.return;f=t}var o=t.shouldSetTextContent;if(!(t=t.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=t.canHydrateInstance,a=t.canHydrateTextInstance,u=t.getNextHydratableSibling,s=t.getFirstHydratableChild,l=t.hydrateInstance,c=t.hydrateTextInstance,f=null,h=null,p=!1;return{enterHydrationState:function(t){return h=s(t.stateNode.containerInfo),f=t,p=!0},resetHydrationState:function(){h=f=null,p=!1},tryToClaimNextHydratableInstance:function(t){if(p){var r=h;if(r){if(!n(t,r)){if(!(r=u(r))||!n(t,r))return t.effectTag|=2,p=!1,void(f=t);e(f,h)}f=t,h=s(r)}else t.effectTag|=2,p=!1,f=t}},prepareToHydrateHostInstance:function(t,e,n){return e=l(t.stateNode,t.type,t.memoizedProps,e,n,t),t.updateQueue=e,null!==e},prepareToHydrateHostTextInstance:function(t){return c(t.stateNode,t.memoizedProps,t)},popHydrationState:function(t){if(t!==f)return!1;if(!p)return r(t),p=!0,!1;var n=t.type;if(5!==t.tag||"head"!==n&&"body"!==n&&!o(n,t.memoizedProps))for(n=h;n;)e(t,n),n=u(n);return r(t),h=f?u(t.stateNode):null,!0}}}(t),M=br(t,P,O,_,T,c,l).beginWork,L=function(t,e,n,r,o){function i(t){t.effectTag|=4}var a=t.createInstance,u=t.createTextInstance,s=t.appendInitialChild,l=t.finalizeInitialChildren,c=t.prepareUpdate,f=t.persistence,h=e.getRootHostContainer,p=e.popHostContext,g=e.getHostContext,v=e.popHostContainer,y=n.popContextProvider,m=n.popTopLevelContextObject,b=r.popProvider,w=o.prepareToHydrateHostInstance,x=o.prepareToHydrateHostTextInstance,C=o.popHydrationState,S=void 0,E=void 0,k=void 0;return t.mutation?(S=function(){},E=function(t,e,n){(e.updateQueue=n)&&i(e)},k=function(t,e,n,r){n!==r&&i(e)}):d(f?"235":"236"),{completeWork:function(t,e,n){var r=e.pendingProps;switch(e.tag){case 1:return null;case 2:return y(e),t=e.stateNode,null!==(r=e.updateQueue)&&null!==r.capturedValues&&(e.effectTag&=-65,"function"==typeof t.componentDidCatch?e.effectTag|=256:r.capturedValues=null),null;case 3:return v(e),m(e),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(C(e),e.effectTag&=-3),S(e),null!==(t=e.updateQueue)&&null!==t.capturedValues&&(e.effectTag|=256),null;case 5:p(e),n=h();var o=e.type;if(null!==t&&null!=e.stateNode){var f=t.memoizedProps,_=e.stateNode,P=g();_=c(_,o,f,r,n,P),E(t,e,_,o,f,r,n,P),t.ref!==e.ref&&(e.effectTag|=128)}else{if(!r)return null===e.stateNode&&d("166"),null;if(t=g(),C(e))w(e,n,t)&&i(e);else{f=a(o,r,n,t,e);t:for(P=e.child;null!==P;){if(5===P.tag||6===P.tag)s(f,P.stateNode);else if(4!==P.tag&&null!==P.child){P.child.return=P,P=P.child;continue}if(P===e)break;for(;null===P.sibling;){if(null===P.return||P.return===e)break t;P=P.return}P.sibling.return=P.return,P=P.sibling}l(f,o,r,n,t)&&i(e),e.stateNode=f}null!==e.ref&&(e.effectTag|=128)}return null;case 6:if(t&&null!=e.stateNode)k(t,e,t.memoizedProps,r);else{if("string"!=typeof r)return null===e.stateNode&&d("166"),null;t=h(),n=g(),C(e)?x(e)&&i(e):e.stateNode=u(r,t,n,e)}return null;case 7:(r=e.memoizedProps)||d("165"),e.tag=8,o=[];t:for((f=e.stateNode)&&(f.return=e);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===e)break t;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),e.child=yr(e,null!==t?t.child:null,r,n),e.child;case 8:return e.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return v(e),S(e),null;case 13:return b(e),null;case 12:return null;case 0:d("167");default:d("156")}}}}(t,P,O,_,T).completeWork,A=(P=function(t,e,n,r,o){var i=t.popHostContainer,a=t.popHostContext,u=e.popContextProvider,s=e.popTopLevelContextObject,l=n.popProvider;return{throwException:function(t,e,n){e.effectTag|=512,e.firstEffect=e.lastEffect=null,e={value:n,source:e,stack:ce(e)};do{switch(t.tag){case 3:return sr(t),t.updateQueue.capturedValues=[e],void(t.effectTag|=1024);case 2:if(n=t.stateNode,0==(64&t.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){sr(t);var r=(n=t.updateQueue).capturedValues;return null===r?n.capturedValues=[e]:r.push(e),void(t.effectTag|=1024)}}t=t.return}while(null!==t)},unwindWork:function(t){switch(t.tag){case 2:u(t);var e=t.effectTag;return 1024&e?(t.effectTag=-1025&e|64,t):null;case 3:return i(t),s(t),1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 5:return a(t),null;case 4:return i(t),null;case 13:return l(t),null;default:return null}},unwindInterruptedWork:function(t){switch(t.tag){case 2:u(t);break;case 3:i(t),s(t);break;case 5:a(t);break;case 4:i(t);break;case 13:l(t)}}}}(P,O,_,0,n)).throwException,j=P.unwindWork,N=P.unwindInterruptedWork,R=(P=function(t,e,n,r,o){function i(t){var n=t.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){e(t,n)}else n.current=null}function a(t){switch(rr(t),t.tag){case 2:i(t);var n=t.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=t.memoizedProps,n.state=t.memoizedState,n.componentWillUnmount()}catch(n){e(t,n)}break;case 5:i(t);break;case 7:u(t.stateNode);break;case 4:f&&l(t)}}function u(t){for(var e=t;;)if(a(e),null===e.child||f&&4===e.tag){if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;e=e.return}e.sibling.return=e.return,e=e.sibling}else e.child.return=e,e=e.child}function s(t){return 5===t.tag||3===t.tag||4===t.tag}function l(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break t;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(5===e.tag||6===e.tag)u(e),o?C(r,e.stateNode):x(r,e.stateNode);else if(4===e.tag?r=e.stateNode.containerInfo:a(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;4===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}var c=t.getPublicInstance,f=t.mutation;t=t.persistence,f||d(t?"235":"236");var h=f.commitMount,p=f.commitUpdate,g=f.resetTextContent,v=f.commitTextUpdate,y=f.appendChild,m=f.appendChildToContainer,b=f.insertBefore,w=f.insertInContainerBefore,x=f.removeChild,C=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(t,e){switch(e.tag){case 2:if(2048&e.effectTag&&null!==t){var n=t.memoizedProps,r=t.memoizedState;(t=e.stateNode).props=e.memoizedProps,t.state=e.memoizedState,e=t.getSnapshotBeforeUpdate(n,r),t.__reactInternalSnapshotBeforeUpdate=e}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(t){g(t.stateNode)},commitPlacement:function(t){t:{for(var e=t.return;null!==e;){if(s(e)){var n=e;break t}e=e.return}d("160"),n=void 0}var r=e=void 0;switch(n.tag){case 5:e=n.stateNode,r=!1;break;case 3:case 4:e=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(g(e),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||s(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(5===o.tag||6===o.tag)n?r?w(e,o.stateNode,n):b(e,o.stateNode,n):r?m(e,o.stateNode):y(e,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(t){l(t),t.return=null,t.child=null,t.alternate&&(t.alternate.child=null,t.alternate.return=null)},commitWork:function(t,e){switch(e.tag){case 2:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var o=e.type,i=e.updateQueue;e.updateQueue=null,null!==i&&p(n,i,o,t,r,e)}break;case 6:null===e.stateNode&&d("162"),n=e.memoizedProps,v(e.stateNode,null!==t?t.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(t,e,n){switch(n.tag){case 2:if(t=n.stateNode,4&n.effectTag)if(null===e)t.props=n.memoizedProps,t.state=n.memoizedState,t.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,t.props=n.memoizedProps,t.state=n.memoizedState,t.componentDidUpdate(r,e,t.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&dr(n,t);break;case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:t=c(n.child.stateNode);break;case 2:t=n.child.stateNode}dr(e,t)}break;case 5:t=n.stateNode,null===e&&4&n.effectTag&&h(t,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(t,e){switch(t.tag){case 2:var n=t.type;e=t.stateNode;var r=t.updateQueue;(null===r||null===r.capturedValues)&&d("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(e),e.props=t.memoizedProps,e.state=t.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;wr(t,r),e.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=t.updateQueue)||null===n.capturedValues)&&d("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)wr(t,r=i[n]),e(r.value);break;default:d("265")}},commitAttachRef:function(t){var e=t.ref;if(null!==e){var n=t.stateNode;switch(t.tag){case 5:t=c(n);break;default:t=n}"function"==typeof e?e(t):e.current=t}},commitDetachRef:function(t){null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null)}}}(t,s,0,0,function(t){null===at?at=new Set([t]):at.add(t)})).commitBeforeMutationLifeCycles,F=P.commitResetTextContent,I=P.commitPlacement,D=P.commitDeletion,U=P.commitWork,z=P.commitLifeCycles,q=P.commitErrorLogging,W=P.commitAttachRef,B=P.commitDetachRef,H=t.now,V=t.scheduleDeferredCallback,G=t.cancelDeferredCallback,K=t.prepareForCommit,Y=t.resetAfterCommit,X=H(),$=X,Q=0,J=0,Z=!1,tt=null,et=null,nt=0,rt=null,ot=!1,it=!1,at=null,ut=null,st=null,lt=0,ct=-1,ft=!1,dt=null,ht=0,pt=0,gt=!1,vt=!1,yt=null,mt=null,bt=!1,wt=!1,xt=!1,Ct=null,St=1e3,Et=0,kt=1;return{recalculateCurrentTime:h,computeExpirationForFiber:l,scheduleWork:c,requestWork:v,flushRoot:function(t,e){ft&&d("253"),dt=t,ht=e,C(t,e,!1),b(),x()},batchedUpdates:function(t,e){var n=bt;bt=!0;try{return t(e)}finally{(bt=n)||ft||b()}},unbatchedUpdates:function(t,e){if(bt&&!wt){wt=!0;try{return t(e)}finally{wt=!1}}return t(e)},flushSync:function(t,e){ft&&d("187");var n=bt;bt=!0;try{return p(t,e)}finally{bt=n,b()}},flushControlled:function(t){var e=bt;bt=!0;try{p(t)}finally{(bt=e)||ft||w(1,!1,null)}},deferredUpdates:function(t){var e=J;J=25*(1+((h()+500)/25|0));try{return t()}finally{J=e}},syncUpdates:p,interactiveUpdates:function(t,e,n){if(xt)return t(e,n);bt||ft||0===pt||(w(pt,!1,null),pt=0);var r=xt,o=bt;bt=xt=!0;try{return t(e,n)}finally{xt=r,(bt=o)||ft||b()}},flushInteractiveUpdates:function(){ft||0===pt||(w(pt,!1,null),pt=0)},computeUniqueAsyncExpiration:function(){var t=25*(1+((h()+500)/25|0));return t<=Q&&(t=Q+1),Q=t},legacyContext:O}}function Sr(t){function e(t,e,n,r,o,a){if(r=e.current,n){n=n._reactInternalFiber;var u=s(n);n=l(n)?c(n,u):u}else n=f;return null===e.context?e.context=n:e.pendingContext=n,lr(r,{expirationTime:o,partialState:{element:t},callback:void 0===(e=a)?null:e,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=t.getPublicInstance,r=(t=Cr(t)).recalculateCurrentTime,o=t.computeExpirationForFiber,i=t.scheduleWork,u=t.legacyContext,s=u.findCurrentUnmaskedContext,l=u.isContextProvider,c=u.processChildContext;return{createContainer:function(t,e,n){return t={current:e=new Kn(3,null,null,e?3:0),containerInfo:t,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},e.stateNode=t},updateContainer:function(t,n,i,a){var u=n.current;return e(t,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(t,n,o,i,a){return e(t,n,o,r(),i,a)},flushRoot:t.flushRoot,requestWork:t.requestWork,computeUniqueAsyncExpiration:t.computeUniqueAsyncExpiration,batchedUpdates:t.batchedUpdates,unbatchedUpdates:t.unbatchedUpdates,deferredUpdates:t.deferredUpdates,syncUpdates:t.syncUpdates,interactiveUpdates:t.interactiveUpdates,flushInteractiveUpdates:t.flushInteractiveUpdates,flushControlled:t.flushControlled,flushSync:t.flushSync,getPublicRootInstance:function(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:return n(t.child.stateNode);default:return t.child.stateNode}},findHostInstance:function(t){var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?d("188"):d("268",Object.keys(t))),null===(t=Je(e))?null:t.stateNode},findHostInstanceWithNoPortals:function(t){return null===(t=function(t){if(!(t=Qe(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child&&4!==e.tag)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},injectIntoDevTools:function(t){var e=t.findFiberByHostInstance;return function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);Zn=er(function(t){return e.onCommitFiberRoot(n,t)}),tr=er(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}return!0}(a({},t,{findHostInstanceByFiber:function(t){return null===(t=Je(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}}}var Er=Object.freeze({default:Sr}),kr=Er&&Sr||Er,_r=kr.default?kr.default:kr;var Pr="object"==typeof performance&&"function"==typeof performance.now,Or=void 0;Or=Pr?function(){return performance.now()}:function(){return Date.now()};var Tr=void 0,Mr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Lr=null,Ar=!1,jr=-1,Nr=!1,Rr=0,Fr=33,Ir=33,Dr=void 0;Dr=Pr?{didTimeout:!1,timeRemaining:function(){var t=Rr-performance.now();return 0<t?t:0}}:{didTimeout:!1,timeRemaining:function(){var t=Rr-Date.now();return 0<t?t:0}};var Ur="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(t){if(t.source===window&&t.data===Ur){if(Ar=!1,t=Or(),0>=Rr-t){if(!(-1!==jr&&jr<=t))return void(Nr||(Nr=!0,requestAnimationFrame(zr)));Dr.didTimeout=!0}else Dr.didTimeout=!1;jr=-1,t=Lr,Lr=null,null!==t&&t(Dr)}},!1);var zr=function(t){Nr=!1;var e=t-Rr+Ir;e<Ir&&Fr<Ir?(8>e&&(e=8),Ir=e<Fr?Fr:e):Fr=e,Rr=t+Ir,Ar||(Ar=!0,window.postMessage(Ur,"*"))};Tr=function(t,e){return Lr=t,null!=e&&"number"==typeof e.timeout&&(jr=Or()+e.timeout),Nr||(Nr=!0,requestAnimationFrame(zr)),0},Mr=function(){Lr=null,Ar=!1,jr=-1}}else Tr=window.requestIdleCallback,Mr=window.cancelIdleCallback;else Tr=function(t){return setTimeout(function(){t({timeRemaining:function(){return 1/0},didTimeout:!1})})},Mr=function(t){clearTimeout(t)};function qr(t,e){return t=a({children:void 0},e),(e=function(t){var e="";return o.Children.forEach(t,function(t){null==t||"string"!=typeof t&&"number"!=typeof t||(e+=t)}),e}(e.children))&&(t.children=e),t}function Wr(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+n,e=null,o=0;o<t.length;o++){if(t[o].value===n)return t[o].selected=!0,void(r&&(t[o].defaultSelected=!0));null!==e||t[o].disabled||(e=t[o])}null!==e&&(e.selected=!0)}}function Br(t,e){var n=e.value;t._wrapperState={initialValue:null!=n?n:e.defaultValue,wasMultiple:!!e.multiple}}function Hr(t,e){return null!=e.dangerouslySetInnerHTML&&d("91"),a({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Vr(t,e){var n=e.value;null==n&&(n=e.defaultValue,null!=(e=e.children)&&(null!=n&&d("92"),Array.isArray(e)&&(1>=e.length||d("93"),e=e[0]),n=""+e),null==n&&(n="")),t._wrapperState={initialValue:""+n}}function Gr(t,e){var n=e.value;null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&(t.defaultValue=n)),null!=e.defaultValue&&(t.defaultValue=e.defaultValue)}function Kr(t){var e=t.textContent;e===t._wrapperState.initialValue&&(t.value=e)}var Yr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Xr(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function $r(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?Xr(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Qr,Jr=void 0,Zr=(Qr=function(t,e){if(t.namespaceURI!==Yr.svg||"innerHTML"in t)t.innerHTML=e;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+e+"</svg>",e=Jr.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction(function(){return Qr(t,e)})}:Qr);function to(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=e[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||eo.hasOwnProperty(o)&&eo[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}Object.keys(eo).forEach(function(t){no.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),eo[e]=eo[t]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(t,e,n){e&&(oo[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&d("137",t,n()),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&d("60"),"object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML||d("61")),null!=e.style&&"object"!=typeof e.style&&d("62",n()))}function ao(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function so(t,e){var n=Rn(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=x[e];for(var r=0;r<e.length;r++){var o=e[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?xn("topScroll","scroll",t):"topFocus"===o||"topBlur"===o?(xn("topFocus","focus",t),xn("topBlur","blur",t),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Vt("cancel",!0)&&xn("topCancel","cancel",t),n.topCancel=!0):"topClose"===o?(Vt("close",!0)&&xn("topClose","close",t),n.topClose=!0):Mn.hasOwnProperty(o)&&wn(o,Mn[o],t),n[o]=!0)}}function lo(t,e,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Yr.html&&(r=Xr(t)),r===Yr.html?"script"===t?((t=n.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):t="string"==typeof e.is?n.createElement(t,{is:e.is}):n.createElement(t):t=n.createElementNS(r,t),t}function co(t,e){return(9===e.nodeType?e:e.ownerDocument).createTextNode(t)}function fo(t,e,n,r){var o=ao(e,n);switch(e){case"iframe":case"object":wn("topLoad","load",t);var i=n;break;case"video":case"audio":for(i in Ln)Ln.hasOwnProperty(i)&&wn(i,Ln[i],t);i=n;break;case"source":wn("topError","error",t),i=n;break;case"img":case"image":case"link":wn("topError","error",t),wn("topLoad","load",t),i=n;break;case"form":wn("topReset","reset",t),wn("topSubmit","submit",t),i=n;break;case"details":wn("topToggle","toggle",t),i=n;break;case"input":we(t,n),i=be(t,n),wn("topInvalid","invalid",t),so(r,"onChange");break;case"option":i=qr(t,n);break;case"select":Br(t,n),i=a({},n,{value:void 0}),wn("topInvalid","invalid",t),so(r,"onChange");break;case"textarea":Vr(t,n),i=Hr(t,n),wn("topInvalid","invalid",t),so(r,"onChange");break;default:i=n}io(e,i,uo);var s,l=i;for(s in l)if(l.hasOwnProperty(s)){var c=l[s];"style"===s?ro(t,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&Zr(t,c):"children"===s?"string"==typeof c?("textarea"!==e||""!==c)&&to(t,c):"number"==typeof c&&to(t,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?null!=c&&so(r,s):null!=c&&me(t,s,c,o))}switch(e){case"input":Kt(t),Se(t,n);break;case"textarea":Kt(t),Kr(t);break;case"option":null!=n.value&&t.setAttribute("value",n.value);break;case"select":t.multiple=!!n.multiple,null!=(e=n.value)?Wr(t,!!n.multiple,e,!1):null!=n.defaultValue&&Wr(t,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(t.onclick=u)}}function ho(t,e,n,r,o){var i=null;switch(e){case"input":n=be(t,n),r=be(t,r),i=[];break;case"option":n=qr(t,n),r=qr(t,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Hr(t,n),r=Hr(t,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(t.onclick=u)}io(e,r,uo),e=t=void 0;var s=null;for(t in n)if(!r.hasOwnProperty(t)&&n.hasOwnProperty(t)&&null!=n[t])if("style"===t){var l=n[t];for(e in l)l.hasOwnProperty(e)&&(s||(s={}),s[e]="")}else"dangerouslySetInnerHTML"!==t&&"children"!==t&&"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&"autoFocus"!==t&&(w.hasOwnProperty(t)?i||(i=[]):(i=i||[]).push(t,null));for(t in r){var c=r[t];if(l=null!=n?n[t]:void 0,r.hasOwnProperty(t)&&c!==l&&(null!=c||null!=l))if("style"===t)if(l){for(e in l)!l.hasOwnProperty(e)||c&&c.hasOwnProperty(e)||(s||(s={}),s[e]="");for(e in c)c.hasOwnProperty(e)&&l[e]!==c[e]&&(s||(s={}),s[e]=c[e])}else s||(i||(i=[]),i.push(t,s)),s=c;else"dangerouslySetInnerHTML"===t?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(t,""+c)):"children"===t?l===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(t,""+c):"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&(w.hasOwnProperty(t)?(null!=c&&so(o,t),i||l===c||(i=[])):(i=i||[]).push(t,c))}return s&&(i=i||[]).push("style",s),i}function po(t,e,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&xe(t,o),ao(n,r),r=ao(n,o);for(var i=0;i<e.length;i+=2){var a=e[i],u=e[i+1];"style"===a?ro(t,u):"dangerouslySetInnerHTML"===a?Zr(t,u):"children"===a?to(t,u):me(t,a,u,r)}switch(n){case"input":Ce(t,o);break;case"textarea":Gr(t,o);break;case"select":t._wrapperState.initialValue=void 0,e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Wr(t,!!o.multiple,n,!1):e!==!!o.multiple&&(null!=o.defaultValue?Wr(t,!!o.multiple,o.defaultValue,!0):Wr(t,!!o.multiple,o.multiple?[]:"",!1))}}function go(t,e,n,r,o){switch(e){case"iframe":case"object":wn("topLoad","load",t);break;case"video":case"audio":for(var i in Ln)Ln.hasOwnProperty(i)&&wn(i,Ln[i],t);break;case"source":wn("topError","error",t);break;case"img":case"image":case"link":wn("topError","error",t),wn("topLoad","load",t);break;case"form":wn("topReset","reset",t),wn("topSubmit","submit",t);break;case"details":wn("topToggle","toggle",t);break;case"input":we(t,n),wn("topInvalid","invalid",t),so(o,"onChange");break;case"select":Br(t,n),wn("topInvalid","invalid",t),so(o,"onChange");break;case"textarea":Vr(t,n),wn("topInvalid","invalid",t),so(o,"onChange")}for(var a in io(e,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?t.textContent!==i&&(r=["children",i]):"number"==typeof i&&t.textContent!==""+i&&(r=["children",""+i]):w.hasOwnProperty(a)&&null!=i&&so(o,a));switch(e){case"input":Kt(t),Se(t,n);break;case"textarea":Kt(t),Kr(t);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(t.onclick=u)}return r}function vo(t,e){return t.nodeValue!==e}var yo=Object.freeze({createElement:lo,createTextNode:co,setInitialProperties:fo,diffProperties:ho,updateProperties:po,diffHydratedProperties:go,diffHydratedText:vo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(t,e,n){switch(e){case"input":if(Ce(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=V(r);o||d("90"),Yt(r),Ce(r,o)}}}break;case"textarea":Gr(t,n);break;case"select":null!=(e=n.value)&&Wr(t,!!n.multiple,e,!1)}}});Tt.injectFiberControlledHostComponent(yo);var mo=null,bo=null;function wo(t){this._expirationTime=ko.computeUniqueAsyncExpiration(),this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Co(t,e,n){this._internalRoot=ko.createContainer(t,e,n)}function So(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function Eo(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}wo.prototype.render=function(t){this._defer||d("250"),this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new xo;return ko.updateContainerAtExpirationTime(t,e,null,n,r._onCommit),r},wo.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},wo.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(this._defer&&null!==e||d("251"),this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,o=e;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=e,t.firstBatch=this}this._defer=!1,ko.flushRoot(t,n),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},xo.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},xo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];"function"!=typeof n&&d("191",n),n()}}},Co.prototype.render=function(t,e){var n=this._internalRoot,r=new xo;return null!==(e=void 0===e?null:e)&&r.then(e),ko.updateContainer(t,n,null,r._onCommit),r},Co.prototype.unmount=function(t){var e=this._internalRoot,n=new xo;return null!==(t=void 0===t?null:t)&&n.then(t),ko.updateContainer(null,e,null,n._onCommit),n},Co.prototype.legacy_renderSubtreeIntoContainer=function(t,e,n){var r=this._internalRoot,o=new xo;return null!==(n=void 0===n?null:n)&&o.then(n),ko.updateContainer(e,r,t,o._onCommit),o},Co.prototype.createBatch=function(){var t=new wo(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime<=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t};var ko=_r({getRootHostContext:function(t){var e=t.nodeType;switch(e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:$r(null,"");break;default:t=$r(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}return t},getChildHostContext:function(t,e){return $r(t,e)},getPublicInstance:function(t){return t},prepareForCommit:function(){mo=mn;var t=s();if(Dn(t)){if("selectionStart"in t)var e={start:t.selectionStart,end:t.selectionEnd};else t:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){e=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{e.nodeType,o.nodeType}catch(t){e=null;break t}var i=0,a=-1,u=-1,l=0,c=0,f=t,d=null;e:for(;;){for(var h;f!==e||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(h=f.firstChild);)d=f,f=h;for(;;){if(f===t)break e;if(d===e&&++l===r&&(a=i),d===o&&++c===n&&(u=i),null!==(h=f.nextSibling))break;d=(f=d).parentNode}f=h}e=-1===a||-1===u?null:{start:a,end:u}}else e=null}e=e||{start:0,end:0}}else e=null;bo={focusedElem:t,selectionRange:e},bn(!1)},resetAfterCommit:function(){var t=bo,e=s(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&c(document.documentElement,n)){if(Dn(n))if(e=r.start,void 0===(t=r.end)&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(window.getSelection){e=window.getSelection();var o=n[ot()].length;t=Math.min(r.start,o),r=void 0===r.end?t:Math.min(r.end,o),!e.extend&&t>r&&(o=r,r=t,t=o),o=In(n,t);var i=In(n,r);if(o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),e.removeAllRanges(),t>r?(e.addRange(a),e.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),e.addRange(a))}}for(e=[],t=n;t=t.parentNode;)1===t.nodeType&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(n.focus(),n=0;n<e.length;n++)(t=e[n]).element.scrollLeft=t.left,t.element.scrollTop=t.top}bo=null,bn(mo),mo=null},createInstance:function(t,e,n,r,o){return(t=lo(t,e,n,r))[q]=o,t[W]=e,t},appendInitialChild:function(t,e){t.appendChild(e)},finalizeInitialChildren:function(t,e,n,r){return fo(t,e,n,r),Eo(e,n)},prepareUpdate:function(t,e,n,r,o){return ho(t,e,n,r,o)},shouldSetTextContent:function(t,e){return"textarea"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&"string"==typeof e.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(t,e){return!!e.hidden},createTextInstance:function(t,e,n,r){return(t=co(t,e))[q]=r,t},now:Or,mutation:{commitMount:function(t,e,n){Eo(e,n)&&t.focus()},commitUpdate:function(t,e,n,r,o){t[W]=o,po(t,e,n,r,o)},resetTextContent:function(t){to(t,"")},commitTextUpdate:function(t,e,n){t.nodeValue=n},appendChild:function(t,e){t.appendChild(e)},appendChildToContainer:function(t,e){8===t.nodeType?t.parentNode.insertBefore(e,t):t.appendChild(e)},insertBefore:function(t,e,n){t.insertBefore(e,n)},insertInContainerBefore:function(t,e,n){8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},removeChildFromContainer:function(t,e){8===t.nodeType?t.parentNode.removeChild(e):t.removeChild(e)}},hydration:{canHydrateInstance:function(t,e){return 1!==t.nodeType||e.toLowerCase()!==t.nodeName.toLowerCase()?null:t},canHydrateTextInstance:function(t,e){return""===e||3!==t.nodeType?null:t},getNextHydratableSibling:function(t){for(t=t.nextSibling;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t},getFirstHydratableChild:function(t){for(t=t.firstChild;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t},hydrateInstance:function(t,e,n,r,o,i){return t[q]=i,t[W]=n,go(t,e,n,o,r)},hydrateTextInstance:function(t,e,n){return t[q]=n,vo(t,e)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Tr,cancelDeferredCallback:Mr}),_o=ko;function Po(t,e,n,r,o){So(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var t=ko.getPublicRootInstance(i._internalRoot);a.call(t)}}null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)}else{if(i=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Co(t,!1,e)}(n,r),"function"==typeof o){var u=o;o=function(){var t=ko.getPublicRootInstance(i._internalRoot);u.call(t)}}ko.unbatchedUpdates(function(){null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)})}return ko.getPublicRootInstance(i._internalRoot)}function Oo(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return So(e)||d("200"),function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}It=_o.batchedUpdates,Dt=_o.interactiveUpdates,Ut=_o.flushInteractiveUpdates;var To={createPortal:Oo,findDOMNode:function(t){return null==t?null:1===t.nodeType?t:ko.findHostInstance(t)},hydrate:function(t,e,n){return Po(null,t,e,!0,n)},render:function(t,e,n){return Po(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){return(null==t||void 0===t._reactInternalFiber)&&d("38"),Po(t,e,n,!1,r)},unmountComponentAtNode:function(t){return So(t)||d("40"),!!t._reactRootContainer&&(ko.unbatchedUpdates(function(){Po(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Oo.apply(void 0,arguments)},unstable_batchedUpdates:ko.batchedUpdates,unstable_deferredUpdates:ko.deferredUpdates,flushSync:ko.flushSync,unstable_flushControlled:ko.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:E,EventPropagators:nt,ReactControlledComponent:Ft,ReactDOMComponentTree:G,ReactDOMEventListener:En},unstable_createRoot:function(t,e){return new Co(t,!0,null!=e&&!0===e.hydrate)}};ko.injectIntoDevTools({findFiberByHostInstance:B,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Mo=Object.freeze({default:To}),Lo=Mo&&To||Mo;t.exports=Lo.default?Lo.default:Lo},function(t,e,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(53),o=n(31),i=n(52),a=n(51),u="function"==typeof Symbol&&Symbol.for,s=u?Symbol.for("react.element"):60103,l=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,d=u?Symbol.for("react.provider"):60109,h=u?Symbol.for("react.context"):60110,p=u?Symbol.for("react.async_mode"):60111,g=u?Symbol.for("react.forward_ref"):60112,v="function"==typeof Symbol&&Symbol.iterator;function y(t){for(var e=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||m}function w(){}function x(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||m}b.prototype.isReactComponent={},b.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&y("85"),this.updater.enqueueSetState(this,t,e,"setState")},b.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},w.prototype=b.prototype;var C=x.prototype=new w;C.constructor=x,r(C,b.prototype),C.isPureReactComponent=!0;var S={current:null},E=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function _(t,e,n){var r=void 0,o={},i=null,a=null;if(null!=e)for(r in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(i=""+e.key),e)E.call(e,r)&&!k.hasOwnProperty(r)&&(o[r]=e[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(t&&t.defaultProps)for(r in u=t.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:s,type:t,key:i,ref:a,props:o,_owner:S.current}}function P(t){return"object"==typeof t&&null!==t&&t.$$typeof===s}var O=/\/+/g,T=[];function M(t,e,n,r){if(T.length){var o=T.pop();return o.result=t,o.keyPrefix=e,o.func=n,o.context=r,o.count=0,o}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function L(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>T.length&&T.push(t)}function A(t,e,n,r){var o=typeof t;"undefined"!==o&&"boolean"!==o||(t=null);var i=!1;if(null===t)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(t.$$typeof){case s:case l:i=!0}}if(i)return n(r,t,""===e?"."+j(t,0):e),1;if(i=0,e=""===e?".":e+":",Array.isArray(t))for(var a=0;a<t.length;a++){var u=e+j(o=t[a],a);i+=A(o,u,n,r)}else if(null===t||void 0===t?u=null:u="function"==typeof(u=v&&t[v]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),a=0;!(o=t.next()).done;)i+=A(o=o.value,u=e+j(o,a++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":n,"");return i}function j(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function N(t,e){t.func.call(t.context,e,t.count++)}function R(t,e,n){var r=t.result,o=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?F(t,r,n,a.thatReturnsArgument):null!=t&&(P(t)&&(e=o+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(O,"$&/")+"/")+n,t={$$typeof:s,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}),r.push(t))}function F(t,e,n,r,o){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),e=M(e,i,r,o),null==t||A(t,"",R,e),L(e)}var I={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return F(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;e=M(null,null,e,n),null==t||A(t,"",N,e),L(e)},count:function(t){return null==t?0:A(t,"",a.thatReturnsNull,null)},toArray:function(t){var e=[];return F(t,e,null,a.thatReturnsArgument),e},only:function(t){return P(t)||y("143"),t}},createRef:function(){return{current:null}},Component:b,PureComponent:x,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:h,_calculateChangedBits:e,_defaultValue:t,_currentValue:t,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:t},t.Consumer=t},forwardRef:function(t){return{$$typeof:g,render:t}},Fragment:c,StrictMode:f,unstable_AsyncMode:p,createElement:_,cloneElement:function(t,e,n){(null===t||void 0===t)&&y("267",t);var o=void 0,i=r({},t.props),a=t.key,u=t.ref,l=t._owner;if(null!=e){void 0!==e.ref&&(u=e.ref,l=S.current),void 0!==e.key&&(a=""+e.key);var c=void 0;for(o in t.type&&t.type.defaultProps&&(c=t.type.defaultProps),e)E.call(e,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===e[o]&&void 0!==c?c[o]:e[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:s,type:t.type,key:a,ref:u,props:i,_owner:l}},createFactory:function(t){var e=_.bind(null,t);return e.type=t,e},isValidElement:P,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},D=Object.freeze({default:I}),U=D&&I||D;t.exports=U.default?U.default:U},function(t,e,n){"use strict";var r=f(n(2)),o=f(n(75)),i=n(13);n(198),n(196),n(191),n(187);var a=f(n(74)),u=f(n(139)),s=f(n(135)),l=f(n(81)),c=f(n(80));function f(t){return t&&t.__esModule?t:{default:t}}l.default.initialize("UA-120159289-1"),l.default.pageview(window.location.pathname+window.location.search),c.default.init("hz29tl/uad_demo_prod");var d=document.getElementById("app"),h=(0,u.default)(),p=r.default.createElement(i.Provider,{store:h},r.default.createElement(s.default,null));o.default.render(p,d),h.runSaga(a.default)},function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(this,n(50))},function(t,e){},function(t,e){},,,,function(t,e){},,,,,function(t,e){},,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2NoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9idWZmZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL2ZzbUl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL3Rha2VFdmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlTGF0ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvcHJvYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9ydW5TYWdhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL21pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZ3JvY2tldC9kaXN0L2J1aWxkLnVtZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9yZWFjdC1nYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nSW5kaWNhdG9yL0xvYWRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9hZGluZ0luZGljYXRvci9ob2MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9hZGluZ0luZGljYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VsZWN0b3JzL2xlZ2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VsZWN0b3JzL2NoYXJ0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvQ2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNoYXJ0anMvbGliL2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNoYXJ0anMvbGliL1BpZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydEpTLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU3VtbWFyeUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlbGVjdG9ycy9zdW1tYXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N1bW1hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGVnZW5kSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWdlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lkZWJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VsZWN0b3JzL2ZlYXR1cmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VcmJhbkFuYWx5dGljc0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvYXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtbG9nZ2VyL2Rpc3QvcmVkdXgtbG9nZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWd1cmVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiY2xvbmVhYmxlR2VuZXJhdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInN5bSIsImlkIiwiVEFTSyIsIkhFTFBFUiIsIk1BVENIIiwiQ0FOQ0VMIiwiU0FHQV9BQ1RJT04iLCJTRUxGX0NBTkNFTExBVElPTiIsImtvbnN0IiwidiIsImtUcnVlIiwibm9vcCIsImlkZW50IiwiY2hlY2siLCJwcmVkaWNhdGUiLCJlcnJvciIsImxvZyIsIkVycm9yIiwiaGFzT3duIiwiaXMiLCJub3RVbmRlZiIsInVuZGVmIiwidW5kZWZpbmVkIiwiZnVuYyIsImYiLCJudW1iZXIiLCJzdHJpbmciLCJhcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2UiLCJ0aGVuIiwiaXQiLCJuZXh0IiwidGhyb3ciLCJpdGVyYWJsZSIsInRhc2siLCJ0Iiwib2JzZXJ2YWJsZSIsIm9iIiwic3Vic2NyaWJlIiwiYnVmZmVyIiwiYnVmIiwiaXNFbXB0eSIsInRha2UiLCJwdXQiLCJwYXR0ZXJuIiwicGF0IiwiY2hhbm5lbCIsImNoIiwiY2xvc2UiLCJoZWxwZXIiLCJzdHJpbmdhYmxlRnVuYyIsInJlbW92ZSIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmcm9tIiwiYXJyIiwiZGVmZXJyZWQiLCJwcm9wcyIsImRlZiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYXJyYXlPZkRlZmZlcmVkIiwicHVzaCIsImRlbGF5IiwibXMiLCJ2YWwiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3JlYXRlTW9ja1Rhc2siLCJfcmVmIiwicnVubmluZyIsIl9yZXN1bHQiLCJfZXJyb3IiLCJpc1J1bm5pbmciLCJyZXN1bHQiLCJzZXRSdW5uaW5nIiwiYiIsInNldFJlc3VsdCIsInNldEVycm9yIiwiZSIsInVpZCIsInNlZWQiLCJhdXRvSW5jIiwia1Rocm93IiwiZXJyIiwia1JldHVybiIsImRvbmUiLCJtYWtlSXRlcmF0b3IiLCJ0aHJvIiwiaXNIZWxwZXIiLCJyZXR1cm4iLCJsZXZlbCIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJjb25zb2xlIiwic3RhY2siLCJkZXByZWNhdGUiLCJmbiIsImRlcHJlY2F0aW9uV2FybmluZyIsImFwcGx5IiwidXBkYXRlSW5jZW50aXZlIiwiZGVwcmVjYXRlZCIsInByZWZlcnJlZCIsImludGVybmFsRXJyIiwiY3JlYXRlU2V0Q29udGV4dFdhcm5pbmciLCJjdHgiLCJ3cmFwU2FnYURpc3BhdGNoIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJnZW5lcmF0b3JGdW5jIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiaGlzdG9yeSIsImdlbiIsImFyZyIsImNsb25lIiwiY2xvbmVkR2VuIiwiZm9yRWFjaCIsImV4Y2VwdGlvbiIsIklPIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJUQUtFIiwiUFVUIiwiQUxMIiwiUkFDRSIsIkNBTEwiLCJDUFMiLCJGT1JLIiwiSk9JTiIsIlNFTEVDVCIsIkFDVElPTl9DSEFOTkVMIiwiQ0FOQ0VMTEVEIiwiRkxVU0giLCJHRVRfQ09OVEVYVCIsIlNFVF9DT05URVhUIiwiVEVTVF9ISU5UIiwiZWZmZWN0IiwidHlwZSIsInBheWxvYWQiLCJkZXRhY2giLCJlZmYiLCJhc0VmZmVjdCIsImZvcmsiLCJkZXRhY2hlZCIsInBhdHRlcm5PckNoYW5uZWwiLCJTdHJpbmciLCJtYXliZSIsInRha2VtIiwiYWxsIiwiZWZmZWN0cyIsInJhY2UiLCJnZXRGbkNhbGxEZXNjIiwibWV0aCIsImNvbnRleHQiLCJfZm4iLCJfZm4yIiwiY3BzIiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJzcGF3biIsIl9sZW40IiwiX2tleTQiLCJjb25jYXQiLCJqb2luIiwiX2xlbjUiLCJ0YXNrcyIsIl9rZXk1IiwibWFwIiwiY2FuY2VsIiwiX2xlbjYiLCJfa2V5NiIsInNlbGVjdCIsInNlbGVjdG9yIiwiX2xlbjciLCJfa2V5NyIsImFjdGlvbkNoYW5uZWwiLCJjYW5jZWxsZWQiLCJmbHVzaCIsImdldENvbnRleHQiLCJwcm9wIiwic2V0Q29udGV4dCIsInRha2VFdmVyeSIsIndvcmtlciIsIl9sZW44IiwiX2tleTgiLCJfc2FnYUhlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInRha2VMYXRlc3QiLCJfbGVuOSIsIl9rZXk5IiwidGhyb3R0bGUiLCJfbGVuMTAiLCJfa2V5MTAiLCJzeW5jIiwiY3JlYXRlQXNFZmZlY3RUeXBlIiwiX3NjaGVkdWxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiRU5EIiwiaXNFbmQiLCJhIiwiZW1pdHRlciIsInN1YnNjcmliZXJzIiwic3ViIiwiZW1pdCIsInNsaWNlIiwibGVuIiwiSU5WQUxJRF9CVUZGRVIiLCJVTkRFRklORURfSU5QVVRfRVJST1IiLCJfYnVmZmVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZml4ZWQiLCJjbG9zZWQiLCJ0YWtlcnMiLCJjaGVja0ZvcmJpZGRlblN0YXRlcyIsImNiIiwiaW5wdXQiLCJfX3Rha2Vyc19fIiwiX19jbG9zZWRfXyIsImV2ZW50Q2hhbm5lbCIsIm5vbmUiLCJtYXRjaGVyIiwiY2hhbiIsInVuc3Vic2NyaWJlIiwic3RkQ2hhbm5lbCIsImJpbmQiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRvY3VtZW50IiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImV4dGVuZCIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsIkJVRkZFUl9PVkVSRkxPVyIsIk9OX09WRVJGTE9XX1RIUk9XIiwiT05fT1ZFUkZMT1dfU0xJREUiLCJPTl9PVkVSRkxPV19FWFBBTkQiLCJ6ZXJvQnVmZmVyIiwicmluZ0J1ZmZlciIsImxpbWl0Iiwib3ZlcmZsb3dBY3Rpb24iLCJwdXNoSW5kZXgiLCJwb3BJbmRleCIsIml0ZW1zIiwiZG91YmxlZExpbWl0IiwiYnVmZmVycyIsImRyb3BwaW5nIiwic2xpZGluZyIsImV4cGFuZGluZyIsImluaXRpYWxTaXplIiwiZ2xvYmFsIiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsInFFbmQiLCJzYWZlTmFtZSIsInV0aWxzIiwiZW50cnkiLCJmc21JdGVyYXRvciIsImZzbSIsInEwIiwidXBkYXRlU3RhdGUiLCJxTmV4dCIsIl9mc20kcU5leHQiLCJxIiwib3V0cHV0IiwiX3VwZGF0ZVN0YXRlIiwieVRha2UiLCJpbyIsInNldEFjdGlvbiIsImFjIiwicTEiLCJxMiIsImludGVybmFsX2NoYW5uZWwiLCJ5Rm9yayIsInNldFRhc2siLCJ5Q2FuY2VsIiwicTMiLCJkZWxheUxlbmd0aCIsInlBY3Rpb25DaGFubmVsIiwieURlbGF5Iiwic2V0Q2hhbm5lbCIsInE0IiwiaGVscGVyTmFtZSIsInNhZ2FIZWxwZXJzX3Rha2VFdmVyeSIsInNhZ2FIZWxwZXJzX3Rha2VMYXRlc3QiLCJzYWdhSGVscGVyc190aHJvdHRsZSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiVHlwZUVycm9yIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiaXNSZXF1aXJlZCIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImlzU3Vic2NyaWJlZCIsInN0b3JlU2hhcGUiLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl90aGlzIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0b3JlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsInJlbmRlciIsInJlYWN0Iiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsImxpc3RlbmVycyIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJjbGVhciIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJrZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29udGV4dFR5cGVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0YXRlIiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJzZXRXcmFwcGVkSW5zdGFuY2UiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInJ1biIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvcmNlVXBkYXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwicmVmIiwic291cmNlU2VsZWN0b3IiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSIsInNldFN0YXRlIiwiYWRkRXh0cmFQcm9wcyIsIndpdGhFeHRyYXMiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19kZWZhdWx0IiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIl9TeW1ib2wiLCJfZnJlZUdsb2JhbCIsIm9iamVjdFByb3RvIiwidG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsImZ1bmNQcm90byIsImlzUGxhaW5PYmplY3Rfb2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiY29ubmVjdF9tYXBEaXNwYXRjaFRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJyZWR1eCIsImNvbm5lY3RfbWFwU3RhdGVUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwibWVyZ2VQcm9wc19leHRlbmRzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsImNvbm5lY3RfbWVyZ2VQcm9wcyIsIm1lcmdlUHJvcHMiLCJwdXJlIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZWRQcm9wcyIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwic2VsZWN0b3JGYWN0b3J5X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29ubmVjdF9leHRlbmRzIiwibWF0Y2giLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiVVNFX1NZTUJPTCIsIklPYmplY3QiLCJkZWZpbmVkIiwiY3JlYXRlRGVzYyIsImhpZGUiLCJoYXMiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJDIiwidmlydHVhbCIsIlIiLCJVIiwicXVldWUiLCJzZW1hcGhvcmUiLCJleGVjIiwic3VzcGVuZCIsInJlbGVhc2UiLCJhc2FwIiwic2hpZnQiLCJfZDNDb2xvciIsImNvbG9ycyIsIm9yYW5nZSIsImJsdWUiLCJncmVlbiIsInJlZCIsIml0ZW1zQ29sb3JzIiwiYXBhcnRtZW50cyIsImhvdXNlIiwib3RoZXIiLCJ1bmtub3duIiwiYnJpZ2h0ZXJDb2xvciIsIml0ZW1Db2xvciIsImsiLCJjb2xvciIsImJyaWdodGVyIiwiZ2V0Q29sb3IiLCJpdGVtVHlwZSIsIl9zZXRQcm90b3R5cGVPZjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NyZWF0ZTIiLCJfdHlwZW9mMyIsImRlZmF1bHQiLCJfdHlwZW9mMiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwiYml0bWFwIiwidmFsaWRhdGVGb3JtYXQiLCJmb3JtYXQiLCJjb25kaXRpb24iLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJjaGFyQXQiLCJUQUciLCJ0YWciLCJzdGF0IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiUHJvcGVydGllcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNwbGl0Iiwic2hhcmVkIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ2YWx1ZU9mIiwiX2Fzc2lnbiIsIl9hc3NpZ24yIiwiUkVRVUVTVCIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwiX2V4dGVuZHMzIiwiYmFzZSIsIkxPQURfQVJFQV9EQVRBIiwiRkVUQ0hfQVJFQSIsImxvYWRBcmVhRGF0YSIsImNvb3JkaW5hdGVzIiwicmVkdWNlIiwiYWNjIiwiYXJlYSIsInJlcXVlc3QiLCJzdWNjZXNzIiwiZmVhdHVyZXMiLCJmYWlsdXJlIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsInRyYW5zZm9ybVJlcXVlc3QiLCJkYXRhIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwibWV0aG9kIiwiZyIsImV2YWwiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsIkFjdGlvblR5cGVzIiwiSU5JVCIsInN1YnN0cmluZyIsIlJFUExBQ0UiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaGlkZGVuS2V5cyIsInJlZGVmaW5lIiwiSXRlcmF0b3JzIiwiJGl0ZXJDcmVhdGUiLCJzZXRUb1N0cmluZ1RhZyIsIklURVJBVE9SIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiQmFzZSIsIk5BTUUiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsIl9pdGVyYXRvcjIiLCJfc3ltYm9sMiIsInNldEZlYXR1cmVzRmlsdGVyIiwiZmVhdHVyZSIsImNsZWFyRmlsdGVyIiwiY29mIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJjcmVhdGVFbGVtZW50IiwiYUZ1bmN0aW9uIiwidGhhdCIsIkNhbmNlbCIsIl9fQ0FOQ0VMX18iLCJlbmhhbmNlRXJyb3IiLCJjb25maWciLCJjb2RlIiwicmVzcG9uc2UiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiYnRvYSIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJ1cmwiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJhYm9ydCIsInNlbmQiLCJfZWZmZWN0cyIsIl9hcGkiLCJfYWN0aW9ucyIsImFjdGlvbnMiLCJsb2FkQXJlYSIsIndhdGNoQUxvYWRBcmVhIiwiX3JlZ2VuZXJhdG9yMiIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJhcGkiLCJmZXRjaEFyZWEiLCJzZW50IiwidDAiLCJzdG9wIiwiX21hcmtlZCIsIl9jb250ZXh0MyIsIl9tYXJrZWQzIiwiX2NvbnRleHQ0IiwiX21hcmtlZDQiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIlJFQUNUX1NUQVRJQ1MiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImZhY3RvcnkiLCJOT1RfSVRFUkFUT1JfRVJST1IiLCJDSEFOTkVMX0VORCIsIlRBU0tfQ0FOQ0VMIiwibWF0Y2hlcnMiLCJ3aWxkY2FyZCIsInBhdHRlcm5zIiwic29tZSIsIl9wcmVkaWNhdGUiLCJ3cmFwSGVscGVyIiwicHJvYyIsInBhcmVudENvbnRleHQiLCJwYXJlbnRFZmZlY3RJZCIsImNvbnQiLCJydW5QYXJhbGxlbEVmZmVjdCIsInJ1bkFsbEVmZmVjdCIsInNhZ2FNb25pdG9yIiwibG9nZ2VyIiwib25FcnJvciIsImxvZ0Vycm9yIiwic2FnYVN0YWNrIiwidGFza0NvbnRleHQiLCJfcmVmOSIsIl9tdXRhdG9yTWFwIiwiX2RlZmVycmVkRW5kIiwiX2lzUnVubmluZyIsImpvaW5lcnMiLCJpc0NhbmNlbGxlZCIsIl9pc0NhbmNlbGxlZCIsImlzQWJvcnRlZCIsIl9pc0Fib3J0ZWQiLCJkZXNjcyIsImRlc2MiLCJfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMiLCJuZXdUYXNrIiwibWFpblRhc2siLCJ0YXNrUXVldWUiLCJjb21wbGV0ZWQiLCJjYW5jZWxBbGwiLCJhZGRUYXNrIiwicmVzIiwiaXNFcnIiLCJnZXRUYXNrcyIsInRhc2tOYW1lcyIsImZvcmtRdWV1ZSIsImVuZCIsImlzTWFpblJ1bm5pbmciLCJydW5FZmZlY3QiLCJqIiwibGFiZWwiLCJlZmZlY3RJZCIsImVmZmVjdFRyaWdnZXJlZCIsImVmZmVjdFNldHRsZWQiLCJjdXJyQ2IiLCJlZmZlY3RSZWplY3RlZCIsImVmZmVjdFJlc29sdmVkIiwiZWZmZWN0Q2FuY2VsbGVkIiwicmVzb2x2ZVByb21pc2UiLCJydW5Gb3JrRWZmZWN0IiwicmVzb2x2ZUl0ZXJhdG9yIiwidGFrZUNiIiwiaW5wIiwicnVuVGFrZUVmZmVjdCIsIl9yZWYzIiwic2NoZWR1bGVyIiwicnVuUHV0RWZmZWN0IiwiY2hpbGRDYnMiLCJjaENiQXRLZXkiLCJfcmVzcG9uc2UiLCJydW5SYWNlRWZmZWN0IiwiX3JlZjQiLCJydW5DYWxsRWZmZWN0IiwiX3JlZjUiLCJjcHNDYiIsInJ1bkNQU0VmZmVjdCIsImpvaW5lciIsInJ1bkpvaW5FZmZlY3QiLCJ0YXNrVG9DYW5jZWwiLCJydW5DYW5jZWxFZmZlY3QiLCJfcmVmNyIsInJ1blNlbGVjdEVmZmVjdCIsIl9yZWY4IiwicnVuQ2hhbm5lbEVmZmVjdCIsInJ1bkZsdXNoRWZmZWN0IiwicnVuQ2FuY2VsbGVkRWZmZWN0IiwicnVuR2V0Q29udGV4dEVmZmVjdCIsInJ1blNldENvbnRleHRFZmZlY3QiLCJjYW5jZWxQcm9taXNlIiwiX3JlZjYiLCJ0YXNrSXRlcmF0b3IiLCJwYyIsImNyZWF0ZVRhc2tJdGVyYXRvciIsIl90YXNrIiwiY29tcGxldGVkQ291bnQiLCJyZXN1bHRzIiwiTk9OX0dFTkVSQVRPUl9FUlIiLCJSVU5fU0FHQV9TSUdOQVRVUkUiLCJydW5TYWdhIiwic3RvcmVJbnRlcmZhY2UiLCJzYWdhIiwiX3N0b3JlSW50ZXJmYWNlIiwiYWN0aW9uRGlzcGF0Y2hlZCIsIl9yZWYkY29udGV4dCIsInNhZ2FNaWRkbGV3YXJlIiwic2FnYUVtaXR0ZXIiLCJkZWZpbmUiLCJwYXJlbnQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJSZWdFeHAiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiUmdiIiwicGFyc2VJbnQiLCJyZ2JuIiwicmdiYSIsImhzbGEiLCJOYU4iLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImhleCIsIm1heCIsIm1pbiIsInJvdW5kIiwiaCIsIkhzbCIsImhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTEiLCJtMiIsImRpc3BsYXlhYmxlIiwicG93IiwiZGFya2VyIiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsInQxIiwidDIiLCJ0MyIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJjb3MiLCJzaW4iLCJ6IiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImF0YW4yIiwic3FydCIsImxjaCIsImhjbCIsIkEiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImNvc2giLCJzaW5oIiwibG9hZGVkIiwiX20iLCJjYXB0dXJlTWVzc2FnZSIsImV4Y2VwdGlvblR5cGUiLCJicm93c2VySHJlZiIsImxvY2F0aW9uIiwiaHJlZiIsInNjcnViIiwiYWRkRXZlbnQiLCJjYXB0dXJlRXhjZXB0aW9uIiwidHJhY2UiLCJfVHJhY2VLaXQyIiwiY29tcHV0ZVN0YWNrVHJhY2UiLCJlcnJvclR5cGUiLCJhZGRFdmVudE9wdGlvbnMiLCJfc3RhY2tUcmFjZSIsIl9zdGFja1RyYWNlRnJvbUVycm9yMiIsImlzU2NhbGFyIiwidGVzdCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJmaWVsZCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2ZpZWxkIiwiZGlydHkiLCJzY3J1YmJlZCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zIiwiX2RpZEl0ZXJhdG9yRXJyb3IzIiwiX2l0ZXJhdG9yRXJyb3IzIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl92YWx1ZSIsInNldEFjdGl2ZSIsInNob3VsZEJlQWN0aXZlIiwiaXNBY3RpdmUiLCJhZGRSZXF1ZXN0IiwiYWRkUmVzcG9uc2UiLCJfWEhSIiwieGhyTWFwIiwiV2Vha01hcCIsInVuc3Vic2NyaWJlZEZyb21YaHIiLCJfbHJYTUxIdHRwUmVxdWVzdCIsIm1vekFub24iLCJtb3pTeXN0ZW0iLCJ4aHJPYmplY3QiLCJzZXQiLCJ4aHJJZCIsImN1cnJlbnRYSFJJZCIsIl9lbmhhbmNlRnVuYzIiLCJjdXJyZW50WEhSIiwiX21hcFZhbHVlczIiLCJoZWFkZXJWYWx1ZXMiLCJib2R5IiwiaGVhZGVyIiwieGhyTGlzdGVuZXJzIiwicmVhZHlzdGF0ZWNoYW5nZSIsInByZXZpb3VzIiwiaGVhZGVyUGFydHMiLCJyZXNwb25zZVhNTCIsInZhcmlhYmxlIiwiVHJhY2VLaXQiLCJjb2xsZWN0V2luZG93RXJyb3JzIiwiZGVidWciLCJfd2luZG93IiwiX3NsaWNlIiwiVU5LTk9XTl9GVU5DVElPTiIsIkVSUk9SX1RZUEVTX1JFIiwiZ2V0TG9jYXRpb25IcmVmIiwicmVwb3J0IiwiX29sZE9uZXJyb3JIYW5kbGVyIiwiX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkIiwiaGFuZGxlcnMiLCJsYXN0QXJncyIsImxhc3RFeGNlcHRpb24iLCJsYXN0RXhjZXB0aW9uU3RhY2siLCJub3RpZnlIYW5kbGVycyIsImlzV2luZG93RXJyb3IiLCJpbm5lciIsInRyYWNlS2l0V2luZG93T25FcnJvciIsImxpbmVObyIsImNvbE5vIiwiZXgiLCJhdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudCIsInByb2Nlc3NMYXN0RXhjZXB0aW9uIiwiZ3JvdXBzIiwibGluZSIsImNvbHVtbiIsIm1zZyIsIl9sYXN0RXhjZXB0aW9uU3RhY2siLCJfbGFzdEFyZ3MiLCJyZXRocm93IiwiaW5jb21wbGV0ZSIsImhhbmRsZXIiLCJ1bmluc3RhbGwiLCJjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AiLCJwYXJ0cyIsImNocm9tZSIsImdlY2tvIiwid2luanMiLCJsaW5lcyIsImlzTmF0aXZlIiwiY29sdW1uTnVtYmVyIiwic3RhY2tJbmZvIiwiaW5pdGlhbCIsInVuc2hpZnQiLCJwYXJ0aWFsIiwiY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbiIsImRlcHRoIiwiZnVuY3Rpb25OYW1lIiwicmVjdXJzaW9uIiwiY3VyciIsInNvdXJjZVVSTCIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImRlc2NyaXB0aW9uIiwib3JpZ2luYWwiLCJfcmVnaXN0ZXJDb25zb2xlIiwiX3JlZ2lzdGVyQ29uc29sZTIiLCJ1bnN1YkZ1bmN0aW9ucyIsIl9yZWYkaXNFbmFibGVkIiwiaXNFbmFibGVkIiwibG9nTGV2ZWwiLCJ1bnN1YkZ1bmN0aW9uIiwiX2VuaGFuY2VGdW5jIiwiQ2FwdHVyZSIsInJlZ2lzdGVyRXhjZXB0aW9ucyIsIl9yZWdpc3RlckV4Y2VwdGlvbnMiLCJfcmVnaXN0ZXJFeGNlcHRpb25zMiIsIm5ld09iaiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NyZWF0ZUNsYXNzIiwiX1RyYWNlS2l0Iiwid2hhdCIsImhhc0tleSIsImZpbGwiLCJyZXBsYWNlbWVudCIsInRyYWNrIiwib3JpZyIsIkhhbmRsZXIiLCJfZXJyb3JIYW5kbGVyIiwiX2lnbm9yZU9uRXJyb3IiLCJfd3JhcHBlZEJ1aWx0SW5zIiwiX2luc3RydW1lbnRUcnlDYXRjaCIsImJ1aWx0aW4iLCJfYmVmb3JlIiwiX19scl9fIiwiX19scl93cmFwcGVyX18iLCJ3cmFwcGVkIiwiZGVlcCIsIl9pZ25vcmVOZXh0T25FcnJvciIsIl9faW5uZXJfXyIsIndyYXBwZWRCdWlsdElucyIsIndyYXBUaW1lRm4iLCJvcmlnaW5hbENhbGxiYWNrIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXZlbnRUYXJnZXRzIiwiZXZ0TmFtZSIsImNhcHR1cmUiLCJzZWN1cmUiLCJoYW5kbGVFdmVudCIsImJlZm9yZSIsImV2dCIsIiQiLCJqUXVlcnkiLCJyZWFkeSIsInJhdmVuIiwiX3JhdmVuMiIsImVycm9yUmVwb3J0IiwicmVqZWN0aW9uSGFuZGxlciIsInJlYXNvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfcmF2ZW4iLCJtYWtlTm90TnVsbCIsImZyYW1lIiwiX3JlZ2lzdGVyWEhSIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyMiIsImludGVyY2VwdG9ycyIsImF0dGFjaCIsImVudiIsImZldGNoIiwiZmV0Y2hJZCIsImlzUG9seWZpbGwiLCJwb2x5ZmlsbCIsInJldmVyc2VkSW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXF1ZXN0RXJyb3IiLCJfZXJyIiwicmVzcG9uc2VFcnJvciIsImRpZEF0dGFjaCIsInJlZ2lzdGVyIiwiaWdub3JlZE5ldHdvcmsiLCJ0cnVuY2F0ZSIsImJlZ2lubmluZyIsInJlcUlkIiwiX3JlZiRyZXF1ZXN0U2FuaXRpemVyIiwicmVxdWVzdFNhbml0aXplciIsInNhbml0aXplZCIsImhlYWRlclZhbHVlIiwicmVmZXJyZXIiLCJtb2RlIiwiY3JlZGVudGlhbHMiLCJfcmVmMiRpc0VuYWJsZWQiLCJfcmVmMiRyZXNwb25zZVNhbml0aXoiLCJyZXNwb25zZVNhbml0aXplciIsInVuc3ViRmV0Y2giLCJfcmVnaXN0ZXJGZXRjaDIiLCJ1bnN1YlhIUiIsIl9yZWdpc3RlclhIUjIiLCJfZmV0Y2hJbnRlcmNlcHQyIiwiUmVxdWVzdCIsInRleHQiLCJwbHVja0ZldGNoRmllbGRzIiwicmVxIiwiY2xvbmVkVGV4dCIsInJlc3BvbnNlSGFzaCIsInN0cmluZ2lmeUhlYWRlcnMiLCJtYWtlT2JqZWN0RnJvbUhlYWRlcnMiLCJfcmVmJHN0YXRlU2FuaXRpemVyIiwic3RhdGVTYW5pdGl6ZXIiLCJfcmVmJGFjdGlvblNhbml0aXplciIsImFjdGlvblNhbml0aXplciIsImluaXRpYWxTdGF0ZSIsIm9yaWdpbmFsRGlzcGF0Y2giLCJzdG9yZUlkIiwic3RvcmVJZENvdW50ZXIiLCJzYW5pdGl6ZWRTdGF0ZSIsInN0YXJ0IiwiX25vdzIiLCJkdXJhdGlvbiIsInNhbml0aXplZEFjdGlvbiIsInN0YXRlRGVsdGEiLCJfbm93IiwiY3JlYXRlRW5oYW5jZXIiLCJjcmVhdGVNaWRkbGV3YXJlIiwiX2NyZWF0ZUVuaGFuY2VyMiIsIl9jcmVhdGVNaWRkbGV3YXJlMiIsImRhdGVOb3ciLCJEYXRlIiwibm93IiwibG9hZFRpbWUiLCJwZXJmb3JtYW5jZSIsIk1BWF9RVUVVRV9TSVpFIiwiX2xvZ3JvY2tldE5ldHdvcmsyIiwiX2xvZ3JvY2tldEV4Y2VwdGlvbnMiLCJfbG9ncm9ja2V0Q29uc29sZTIiLCJfbG9ncm9ja2V0UmVkdXgiLCJMb2dSb2NrZXQiLCJfYnVmZmVyIiwic2hvdWxkQ2FwdHVyZVN0YWNrVHJhY2UiLCJfaXNJbml0aWFsaXplZCIsIl9pbnN0YWxsZWQiLCJnZXRNZXNzYWdlIiwib3B0cyIsInRpbWUiLCJfcnVuIiwidGltZU92ZXJyaWRlIiwiX2xvZ2dlciIsIl9pc0Rpc2FibGVkIiwid2FybiIsImFwcElEIiwiaW5pdCIsImlkZW50aWZ5Iiwic3RhcnROZXdTZXNzaW9uIiwiY3VzdG9tRXZlbnROYW1lIiwiZ2V0U2Vzc2lvblVSTCIsInJlY29yZGluZ1VSTCIsInRyYW5zYWN0aW9uSUQiLCJyZWNvcmRpbmdJRCIsInRocmVhZElEIiwidGFiSUQiLCJnZXRMb2dnZXIiLCJSRUFDVF9OQVRJVkVfTk9USUNFIiwiX2Rpc2FibGVMb2dSb2NrZXQiLCJtYWtlTm9vcFBvbHlmaWxsIiwiTXV0YXRpb25PYnNlcnZlciIsIl9sck11dGF0aW9uT2JzZXJ2ZXIiLCJfTG9nUm9ja2V0MiIsIl9Mb2dSb2NrZXQiLCJpbmZvIiwicmVkdXhFbmhhbmNlciIsInJlZHV4TWlkZGxld2FyZSIsImdldFZlcnNpb24iLCJvbkxvZ2dlciIsInNldENsb2NrIiwiX21ha2VMb2dSb2NrZXQiLCJzY3JpcHQiLCJfX1NES0NPTkZJR19fIiwibG9nZ2VyVVJMIiwiX2xyQXN5bmNTY3JpcHQiLCJhc3luYyIsImhlYWQiLCJvbmxvYWQiLCJfTFJMb2dnZXIiLCJzZGtWZXJzaW9uIiwiX193ZWJwYWNrX21vZHVsZV90ZW1wbGF0ZV9hcmd1bWVudF8wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzExX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzEyX18iLCJ0ZXN0TW9kZUFQSSIsIk91dGJvdW5kTGluayIsInBsdWdpbiIsImluaXRpYWxpemUiLCJnYSIsInBhZ2V2aWV3IiwibW9kYWx2aWV3IiwidGltaW5nIiwiZXZlbnQiLCJvdXRib3VuZExpbmsiLCJfZm9ybWF0MyIsIl9yZW1vdmVMZWFkaW5nU2xhc2gyIiwiX3RyaW0yIiwiX2xvYWRHQTIiLCJfd2FybjIiLCJfbG9nMiIsIl90ZXN0TW9kZUFQSTIiLCJfT3V0Ym91bmRMaW5rMiIsIl9kZWJ1ZyIsIl90aXRsZUNhc2UiLCJfdGVzdE1vZGUiLCJfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIiLCJpbnRlcm5hbEdhIiwiX2Zvcm1hdCIsIl9nYUNvbW1hbmQiLCJ0cmFja2VyTmFtZXMiLCJjb21tYW5kIiwiX2luaXRpYWxpemUiLCJnYVRyYWNraW5nSUQiLCJ0aXRsZUNhc2UiLCJnYU9wdGlvbnMiLCJjb25maWdzT3JUcmFja2luZ0lkIiwidGVzdE1vZGUiLCJhbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciIsInRyYWNraW5nSWQiLCJmaWVsZHNPYmplY3QiLCJmaWVsZE9iamVjdCIsInJhd1BhdGgiLCJ0aXRsZSIsInBhdGgiLCJleHRyYUZpZWxkcyIsImhpdFR5cGUiLCJwYWdlIiwiZXh0cmFMb2ciLCJyYXdNb2RhbE5hbWUiLCJtb2RhbE5hbWUiLCJjYXRlZ29yeSIsInRpbWluZ0NhdGVnb3J5IiwidGltaW5nVmFyIiwidGltaW5nVmFsdWUiLCJ0aW1pbmdMYWJlbCIsIm5vbkludGVyYWN0aW9uIiwidHJhbnNwb3J0IiwiZXZlbnRDYXRlZ29yeSIsImV2ZW50QWN0aW9uIiwiZXZlbnRMYWJlbCIsImV2ZW50VmFsdWUiLCJmaWx0ZXIiLCJzdWJzdHIiLCJmYXRhbCIsImV4RGVzY3JpcHRpb24iLCJleEZhdGFsIiwicmVxdWlyZSIsInJhd05hbWUiLCJleGVjdXRlIiwicGx1Z2luTmFtZSIsImhpdENhbGxiYWNrIiwic2FmZXR5Q2FsbGJhY2tDYWxsZWQiLCJvcmlnVHJhY2tMaW5rIiwidHJhY2tMaW5rIiwiX21pZ2h0QmVFbWFpbDIiLCJyZWRhY3RlZCIsIl90b1RpdGxlQ2FzZTIiLCJzZWFyY2giLCJzbWFsbFdvcmRzIiwiX3RyaW0iLCJnYUFkZHJlc3MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJnYUNhbGxzIiwiY2FsbHMiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3Byb3BUeXBlczIiLCJORVdUQUIiLCJNSURETEVDTElDSyIsIl90ZW1wIiwiaGFuZGxlQ2xpY2siLCJfdGhpcyRwcm9wcyIsIm9uQ2xpY2siLCJldmVudE1ldGEiLCJzYW1lVGFyZ2V0Iiwibm9ybWFsQ2xpY2siLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJtZXRhS2V5IiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJDb21wb25lbnQiLCJpc0xvYWRpbmciLCJMb2FkaW5nQ29tcG9uZW50IiwiTG9hZGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjazMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMzIiwiX2NyZWF0ZUNsYXNzMyIsImxvYWRpbmciLCJMb2FkaW5nIiwiY2xhc3NOYW1lIiwiUmVhY3QiLCJfaG9jIiwibG9hZGVySG9jIiwiZmlsdGVycyIsImFncmVnYXRlZCIsIl9mZWF0dXJlJHByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwicG9wdWxhdGlvbiIsImNoYXJ0IiwibGVnZW5kIiwidG9MaXN0T2ZPYmplY3RzIiwiaXNBcmVhU2VsZWN0ZWQiLCJjdXJyZW50SXRlbSIsImNvdW50IiwiX2NvbnN0YW50cyIsInRvQ2hhcnQiLCJhZ2dyZWdhdGVkRGF0YSIsImhpZ2hsaWdodCIsIl9fd2VicGFja19hbWRfb3B0aW9uc19fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJDaGFydCIsImNhbnZhcyIsImNvbXB1dGVEaW1lbnNpb24iLCJkaW1lbnNpb24iLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwid2lkdGgiLCJoZWlnaHQiLCJhc3BlY3RSYXRpbyIsImhlbHBlcnMiLCJyZXRpbmFTY2FsZSIsImFuaW1hdGlvbiIsImFuaW1hdGlvblN0ZXBzIiwiYW5pbWF0aW9uRWFzaW5nIiwic2hvd1NjYWxlIiwic2NhbGVPdmVycmlkZSIsInNjYWxlU3RlcHMiLCJzY2FsZVN0ZXBXaWR0aCIsInNjYWxlU3RhcnRWYWx1ZSIsInNjYWxlTGluZUNvbG9yIiwic2NhbGVMaW5lV2lkdGgiLCJzY2FsZVNob3dMYWJlbHMiLCJzY2FsZUxhYmVsIiwic2NhbGVJbnRlZ2Vyc09ubHkiLCJzY2FsZUJlZ2luQXRaZXJvIiwic2NhbGVGb250RmFtaWx5Iiwic2NhbGVGb250U2l6ZSIsInNjYWxlRm9udFN0eWxlIiwic2NhbGVGb250Q29sb3IiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInNob3dUb29sdGlwcyIsImN1c3RvbVRvb2x0aXBzIiwidG9vbHRpcEV2ZW50cyIsInRvb2x0aXBGaWxsQ29sb3IiLCJ0b29sdGlwRm9udEZhbWlseSIsInRvb2x0aXBGb250U2l6ZSIsInRvb2x0aXBGb250U3R5bGUiLCJ0b29sdGlwRm9udENvbG9yIiwidG9vbHRpcFRpdGxlRm9udEZhbWlseSIsInRvb2x0aXBUaXRsZUZvbnRTaXplIiwidG9vbHRpcFRpdGxlRm9udFN0eWxlIiwidG9vbHRpcFRpdGxlRm9udENvbG9yIiwidG9vbHRpcFRpdGxlVGVtcGxhdGUiLCJ0b29sdGlwWVBhZGRpbmciLCJ0b29sdGlwWFBhZGRpbmciLCJ0b29sdGlwQ2FyZXRTaXplIiwidG9vbHRpcENvcm5lclJhZGl1cyIsInRvb2x0aXBYT2Zmc2V0IiwidG9vbHRpcFRlbXBsYXRlIiwibXVsdGlUb29sdGlwVGVtcGxhdGUiLCJtdWx0aVRvb2x0aXBLZXlCYWNrZ3JvdW5kIiwic2VnbWVudENvbG9yRGVmYXVsdCIsInNlZ21lbnRIaWdobGlnaHRDb2xvckRlZmF1bHRzIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJ0eXBlcyIsImVhY2giLCJsb29wYWJsZSIsImNhbGxiYWNrIiwiYWRkaXRpb25hbEFyZ3MiLCJvYmpDbG9uZSIsImV4dGVuc2lvbk9iamVjdCIsIm1hc3RlciIsImFycmF5VG9TZWFyY2giLCJpbmhlcml0cyIsIndoZXJlIiwiY29sbGVjdGlvbiIsImZpbHRlckNhbGxiYWNrIiwiZmlsdGVyZWQiLCJmaW5kTmV4dFdoZXJlIiwic3RhcnRJbmRleCIsImZpbmRQcmV2aW91c1doZXJlIiwiZXh0ZW5zaW9ucyIsIkNoYXJ0RWxlbWVudCIsIlN1cnJvZ2F0ZSIsIl9fc3VwZXJfXyIsImFtZCIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImdldERlY2ltYWxQbGFjZXMiLCJjYXAiLCJ2YWx1ZVRvQ2FwIiwibWF4VmFsdWUiLCJtaW5WYWx1ZSIsIm51bSIsInRvUmFkaWFucyIsInJhZGlhbnMiLCJkZWdyZWVzIiwiYWxpYXNQaXhlbCIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJhbmdsZSIsImRpc3RhbmNlIiwicGl4ZWxXaWR0aCIsImNhbGN1bGF0ZU9yZGVyT2ZNYWduaXR1ZGUiLCJzcGxpbmVDdXJ2ZSIsIkZpcnN0UG9pbnQiLCJNaWRkbGVQb2ludCIsIkFmdGVyUG9pbnQiLCJkMDEiLCJkMTIiLCJmYSIsImZiIiwib3V0ZXIiLCJMTjEwIiwidGVtcGxhdGUiLCJjYWxjdWxhdGVTY2FsZVJhbmdlIiwidmFsdWVzQXJyYXkiLCJkcmF3aW5nU2l6ZSIsInRleHRTaXplIiwic3RhcnRGcm9tWmVybyIsImludGVnZXJzT25seSIsIm1heFN0ZXBzIiwic2tpcEZpdHRpbmciLCJ2YWx1ZVJhbmdlIiwiYWJzIiwicmFuZ2VPcmRlck9mTWFnbml0dWRlIiwiZ3JhcGhNYXgiLCJncmFwaE1pbiIsImdyYXBoUmFuZ2UiLCJzdGVwVmFsdWUiLCJudW1iZXJPZlN0ZXBzIiwic3RlcHMiLCJ0ZW1wbGF0ZVN0cmluZyIsInZhbHVlc09iamVjdCIsImNhY2hlIiwiZWFzaW5nRWZmZWN0cyIsImdlbmVyYXRlTGFiZWxzIiwibGFiZWxzQXJyYXkiLCJsaW5lYXIiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImFzaW4iLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsInJlcXVlc3RBbmltRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwiYW5pbWF0aW9uTG9vcCIsInRvdGFsU3RlcHMiLCJlYXNpbmdTdHJpbmciLCJvblByb2dyZXNzIiwib25Db21wbGV0ZSIsImNoYXJ0SW5zdGFuY2UiLCJjdXJyZW50U3RlcCIsImVhc2luZ0Z1bmN0aW9uIiwiYW5pbWF0aW9uRnJhbWUiLCJzdGVwRGVjaW1hbCIsImVhc2VEZWNpbWFsIiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsIm1vdXNlWCIsIm1vdXNlWSIsIm9yaWdpbmFsRXZlbnQiLCJib3VuZGluZ1JlY3QiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJub2RlIiwiZXZlbnRUeXBlIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudCIsImRldGFjaEV2ZW50IiwidW5iaW5kRXZlbnRzIiwiYmluZEV2ZW50cyIsImFycmF5T2ZFdmVudHMiLCJldmVudHMiLCJldmVudE5hbWUiLCJnZXRNYXhpbXVtV2lkdGgiLCJkb21Ob2RlIiwiY29udGFpbmVyIiwicGFkZGluZyIsImdldFN0eWxlIiwiY2xpZW50V2lkdGgiLCJnZXRNYXhpbXVtSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZWwiLCJjdXJyZW50U3R5bGUiLCJnZXRNYXhpbXVtU2l6ZSIsImRldmljZVBpeGVsUmF0aW8iLCJzY2FsZSIsImNsZWFyUmVjdCIsImZvbnRTdHJpbmciLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwibG9uZ2VzdFRleHQiLCJmb250IiwiYXJyYXlPZlN0cmluZ3MiLCJsb25nZXN0IiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJkcmF3Um91bmRlZFJlY3RhbmdsZSIsInJhZGl1cyIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJjbG9zZVBhdGgiLCJpbnN0YW5jZXMiLCJUeXBlIiwicmVzaXplIiwiYW5pbWF0aW9uU2VydmljZSIsImNhbmNlbEFuaW1hdGlvbiIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwicmVmbG93IiwiQW5pbWF0aW9uIiwibnVtU3RlcHMiLCJlYXNpbmciLCJhbmltYXRpb25PYmplY3QiLCJkcmF3IiwiYWRkQW5pbWF0aW9uIiwiZ2VuZXJhdGVMZWdlbmQiLCJsZWdlbmRUZW1wbGF0ZSIsImRlc3Ryb3kiLCJyZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsInNob3dUb29sdGlwIiwiQ2hhcnRFbGVtZW50cyIsImZvcmNlUmVkcmF3IiwiYWN0aXZlRWxlbWVudHMiLCJFbGVtZW50cyIsImNoYW5nZWQiLCJkYXRhc2V0cyIsImRhdGFBcnJheSIsImRhdGFJbmRleCIsInBvaW50cyIsImJhcnMiLCJzZWdtZW50cyIsInRvb2x0aXBMYWJlbHMiLCJ0b29sdGlwQ29sb3JzIiwibWVkaWFuUG9zaXRpb24iLCJkYXRhQ29sbGVjdGlvbiIsInhNYXgiLCJ5TWF4IiwieE1pbiIsInlNaW4iLCJ4UG9zaXRpb25zIiwieVBvc2l0aW9ucyIsImRhdGFzZXQiLCJoYXNWYWx1ZSIsIl9zYXZlZCIsImZpbGxDb2xvciIsInN0cm9rZSIsInN0cm9rZUNvbG9yIiwiTXVsdGlUb29sdGlwIiwieFBhZGRpbmciLCJ5UGFkZGluZyIsInhPZmZzZXQiLCJ0ZXh0Q29sb3IiLCJmb250U2l6ZSIsInRpdGxlVGV4dENvbG9yIiwidGl0bGVGb250RmFtaWx5IiwidGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTaXplIiwiY29ybmVyUmFkaXVzIiwibGFiZWxzIiwibGVnZW5kQ29sb3JzIiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwiY3VzdG9tIiwiRWxlbWVudCIsInRvb2x0aXBQb3NpdGlvbiIsIlRvb2x0aXAiLCJjYXJldEhlaWdodCIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJDaGFydFR5cGUiLCJjaGFydE5hbWUiLCJiYXNlRGVmYXVsdHMiLCJjb25maWd1cmF0aW9uIiwic2F2ZSIsInJlc3RvcmUiLCJ1cGRhdGUiLCJuZXdQcm9wcyIsInRyYW5zaXRpb24iLCJlYXNlIiwiUG9pbnQiLCJpblJhbmdlIiwiY2hhcnRYIiwiY2hhcnRZIiwiaGl0RGV0ZWN0aW9uUmFuZ2UiLCJoaXREZXRlY3Rpb25SYWRpdXMiLCJhcmMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVdpZHRoIiwiZmlsbFN0eWxlIiwiQXJjIiwicG9pbnRSZWxhdGl2ZVBvc2l0aW9uIiwicG9pbnRSZWxhdGl2ZUFuZ2xlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJjZW50cmVBbmdsZSIsInJhbmdlRnJvbUNlbnRyZSIsImFuaW1hdGlvblBlcmNlbnQiLCJsaW5lSm9pbiIsInNob3dTdHJva2UiLCJSZWN0YW5nbGUiLCJoYWxmV2lkdGgiLCJsZWZ0WCIsInJpZ2h0WCIsImhhbGZTdHJva2UiLCJ4QWxpZ24iLCJ5QWxpZ24iLCJjYXJldFBhZGRpbmciLCJ0b29sdGlwV2lkdGgiLCJ0b29sdGlwUmVjdEhlaWdodCIsInRvb2x0aXBIZWlnaHQiLCJ0b29sdGlwWCIsInRvb2x0aXBZIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJ0aXRsZUZvbnQiLCJ0aXRsZUhlaWdodCIsInRpdGxlV2lkdGgiLCJsYWJlbFdpZHRoIiwibG9uZ2VzdFRleHRXaWR0aCIsImhhbGZIZWlnaHQiLCJnZXRMaW5lSGVpZ2h0IiwiYmFzZUxpbmVIZWlnaHQiLCJhZnRlclRpdGxlSW5kZXgiLCJmaWxsUmVjdCIsIlNjYWxlIiwiZml0IiwiYnVpbGRZTGFiZWxzIiwieUxhYmVscyIsInN0ZXBEZWNpbWFsUGxhY2VzIiwidG9GaXhlZCIsInlMYWJlbFdpZHRoIiwic2hvd0xhYmVscyIsImFkZFhMYWJlbCIsInhMYWJlbHMiLCJ2YWx1ZXNDb3VudCIsInJlbW92ZVhMYWJlbCIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImNhY2hlZFlMYWJlbFdpZHRoIiwiY2FjaGVkRW5kUG9pbnQiLCJjYWNoZWRIZWlnaHQiLCJjYWxjdWxhdGVZUmFuZ2UiLCJjYWxjdWxhdGVYTGFiZWxSb3RhdGlvbiIsImZpcnN0Um90YXRlZCIsImZpcnN0V2lkdGgiLCJsYXN0V2lkdGgiLCJ4U2NhbGVQYWRkaW5nUmlnaHQiLCJ4U2NhbGVQYWRkaW5nTGVmdCIsInhMYWJlbFJvdGF0aW9uIiwiY29zUm90YXRpb24iLCJvcmlnaW5hbExhYmVsV2lkdGgiLCJ4TGFiZWxXaWR0aCIsInhHcmlkV2lkdGgiLCJjYWxjdWxhdGVYIiwiZHJhd2luZ0FyZWEiLCJjYWxjdWxhdGVZIiwic2NhbGluZ0ZhY3RvciIsInZhbHVlV2lkdGgiLCJ2YWx1ZU9mZnNldCIsIm9mZnNldEdyaWRMaW5lcyIsInlMYWJlbEdhcCIsInhTdGFydCIsImxhYmVsU3RyaW5nIiwieUxhYmVsQ2VudGVyIiwibGluZVBvc2l0aW9uWSIsImRyYXdIb3Jpem9udGFsTGluZSIsInNob3dIb3Jpem9udGFsTGluZXMiLCJncmlkTGluZVdpZHRoIiwiZ3JpZExpbmVDb2xvciIsImxpbmVDb2xvciIsInhQb3MiLCJsaW5lUG9zIiwiaXNSb3RhdGVkIiwiZHJhd1ZlcnRpY2FsTGluZSIsInNob3dWZXJ0aWNhbExpbmVzIiwidHJhbnNsYXRlIiwicm90YXRlIiwiUmFkaWFsU2NhbGUiLCJzaXplIiwiYmFja2Ryb3BQYWRkaW5nWSIsImNhbGN1bGF0ZUNlbnRlck9mZnNldCIsImxpbmVBcmMiLCJzZXRTY2FsZVNpemUiLCJnZXRDaXJjdW1mZXJlbmNlIiwicG9pbnRQb3NpdGlvbiIsImhhbGZUZXh0V2lkdGgiLCJmdXJ0aGVzdFJpZ2h0SW5kZXgiLCJmdXJ0aGVzdFJpZ2h0QW5nbGUiLCJmdXJ0aGVzdExlZnRJbmRleCIsImZ1cnRoZXN0TGVmdEFuZ2xlIiwieFByb3RydXNpb25MZWZ0IiwieFByb3RydXNpb25SaWdodCIsInJhZGl1c1JlZHVjdGlvblJpZ2h0IiwicmFkaXVzUmVkdWN0aW9uTGVmdCIsImxhcmdlc3RQb3NzaWJsZVJhZGl1cyIsInBvaW50TGFiZWxGb250U2l6ZSIsImZ1cnRoZXN0UmlnaHQiLCJmdXJ0aGVzdExlZnQiLCJwb2ludExhYmVsRm9udFN0eWxlIiwicG9pbnRMYWJlbEZvbnRGYW1pbHkiLCJnZXRQb2ludFBvc2l0aW9uIiwiZ2V0SW5kZXhBbmdsZSIsInNldENlbnRlclBvaW50IiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsIm1heFJpZ2h0IiwibWF4TGVmdCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwidGhpc0FuZ2xlIiwieUNlbnRlck9mZnNldCIsInlIZWlnaHQiLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmdYIiwiZm9udENvbG9yIiwiYW5nbGVMaW5lV2lkdGgiLCJhbmdsZUxpbmVDb2xvciIsImNlbnRlck9mZnNldCIsIm91dGVyUG9zaXRpb24iLCJhbmdsZUxpbmVJbnRlcnZhbCIsImJhY2tncm91bmRDb2xvcnMiLCJwcmV2aW91c091dGVyUG9zaXRpb24iLCJuZXh0T3V0ZXJQb3NpdGlvbiIsInByZXZpb3VzT3V0ZXJIYWxmd2F5IiwibmV4dE91dGVySGFsZndheSIsInBvaW50TGFiZWxQb3NpdGlvbiIsInBvaW50TGFiZWxGb250Q29sb3IiLCJsYWJlbHNDb3VudCIsImhhbGZMYWJlbHNDb3VudCIsInF1YXJ0ZXJMYWJlbHNDb3VudCIsInVwcGVySGFsZiIsImV4YWN0UXVhcnRlciIsImZyYW1lRHVyYXRpb24iLCJhbmltYXRpb25zIiwiZHJvcEZyYW1lcyIsImRpZ2VzdFdyYXBwZXIiLCJhbmltYXRpb25XcmFwcGVyIiwic3RhcnREaWdlc3QiLCJzdGFydFRpbWUiLCJmcmFtZXNUb0Ryb3AiLCJmcmFtZURlbGF5Iiwibm9Db25mbGljdCIsInNjYWxlU2hvd0dyaWRMaW5lcyIsInNjYWxlR3JpZExpbmVDb2xvciIsInNjYWxlR3JpZExpbmVXaWR0aCIsInNjYWxlU2hvd0hvcml6b250YWxMaW5lcyIsInNjYWxlU2hvd1ZlcnRpY2FsTGluZXMiLCJiYXJTaG93U3Ryb2tlIiwiYmFyU3Ryb2tlV2lkdGgiLCJiYXJWYWx1ZVNwYWNpbmciLCJiYXJEYXRhc2V0U3BhY2luZyIsIlNjYWxlQ2xhc3MiLCJjYWxjdWxhdGVCYXJYIiwiZGF0YXNldENvdW50IiwiZGF0YXNldEluZGV4IiwiYmFySW5kZXgiLCJ4V2lkdGgiLCJjYWxjdWxhdGVCYXNlV2lkdGgiLCJ4QWJzb2x1dGUiLCJiYXJXaWR0aCIsImNhbGN1bGF0ZUJhcldpZHRoIiwiYWN0aXZlQmFycyIsImdldEJhcnNBdEV2ZW50IiwiZWFjaEJhcnMiLCJiYXIiLCJhY3RpdmVCYXIiLCJoaWdobGlnaHRGaWxsIiwiaGlnaGxpZ2h0U3Ryb2tlIiwiQmFyQ2xhc3MiLCJkYXRhc2V0T2JqZWN0IiwiZGF0YVBvaW50IiwiZGF0YXNldExhYmVsIiwiYnVpbGRTY2FsZSIsImFjdGl2ZUVsZW1lbnQiLCJiYXJzQXJyYXkiLCJldmVudFBvc2l0aW9uIiwiZGF0YXNldEl0ZXJhdG9yIiwic2NhbGVPcHRpb25zIiwiYmVnaW5BdFplcm8iLCJjdXJyZW50SGVpZ2h0IiwidXBkYXRlZFJhbmdlcyIsImFkZERhdGEiLCJyZW1vdmVEYXRhIiwibmV3U2NhbGVQcm9wcyIsImVhc2luZ0RlY2ltYWwiLCJkZWZhdWx0Q29uZmlnIiwic2VnbWVudFNob3dTdHJva2UiLCJzZWdtZW50U3Ryb2tlQ29sb3IiLCJzZWdtZW50U3Ryb2tlV2lkdGgiLCJwZXJjZW50YWdlSW5uZXJDdXRvdXQiLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwiU2VnbWVudEFyYyIsImFjdGl2ZVNlZ21lbnRzIiwiZ2V0U2VnbWVudHNBdEV2ZW50Iiwic2VnbWVudCIsImFjdGl2ZVNlZ21lbnQiLCJoaWdobGlnaHRDb2xvciIsImNhbGN1bGF0ZVRvdGFsIiwiZGF0YXBvaW50Iiwic2VnbWVudHNBcnJheSIsImF0SW5kZXgiLCJzaWxlbnQiLCJjaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsInRvdGFsIiwiaW5kZXhUb0RlbGV0ZSIsImFuaW1EZWNpbWFsIiwiRG91Z2hudXQiLCJiZXppZXJDdXJ2ZSIsImJlemllckN1cnZlVGVuc2lvbiIsInBvaW50RG90IiwicG9pbnREb3RSYWRpdXMiLCJwb2ludERvdFN0cm9rZVdpZHRoIiwicG9pbnRIaXREZXRlY3Rpb25SYWRpdXMiLCJkYXRhc2V0U3Ryb2tlIiwiZGF0YXNldFN0cm9rZVdpZHRoIiwiZGF0YXNldEZpbGwiLCJQb2ludENsYXNzIiwiYWN0aXZlUG9pbnRzIiwiZ2V0UG9pbnRzQXRFdmVudCIsImVhY2hQb2ludHMiLCJwb2ludCIsImFjdGl2ZVBvaW50IiwicG9pbnRDb2xvciIsInBvaW50U3Ryb2tlQ29sb3IiLCJwb2ludEhpZ2hsaWdodEZpbGwiLCJwb2ludEhpZ2hsaWdodFN0cm9rZSIsInBvaW50c0FycmF5IiwicHJldmlvdXNQb2ludCIsInBvaW50c1dpdGhWYWx1ZXMiLCJ0ZW5zaW9uIiwiY29udHJvbFBvaW50cyIsIm5leHRQb2ludCIsImJlemllckN1cnZlVG8iLCJzY2FsZVNob3dMYWJlbEJhY2tkcm9wIiwic2NhbGVCYWNrZHJvcENvbG9yIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdZIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdYIiwic2NhbGVTaG93TGluZSIsInVwZGF0ZVNjYWxlUmFuZ2UiLCJkYXRhcG9pbnRzIiwic2NhbGVTaXplcyIsImFuZ2xlU2hvd0xpbmVPdXQiLCJhY3RpdmVQb2ludHNDb2xsZWN0aW9uIiwibW91c2VQb3NpdGlvbiIsImZyb21DZW50ZXIiLCJhbmdsZVBlckluZGV4IiwicG9pbnRJbmRleCIsInNjYWxlQmFja2dyb3VuZENvbG9ycyIsInRvdGFsRGF0YUFycmF5IiwiZW1wdHlPYmplY3QiLCJfaW52YXJpYW50IiwiTUlYSU5TX0tFWSIsIlJlYWN0Q29tcG9uZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsImluamVjdGVkTWl4aW5zIiwiUmVhY3RDbGFzc0ludGVyZmFjZSIsInN0YXRpY3MiLCJnZXRJbml0aWFsU3RhdGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlIiwiUkVTRVJWRURfU1BFQ19LRVlTIiwibWl4U3BlY0ludG9Db21wb25lbnQiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsImlzUmVzZXJ2ZWQiLCJpc0FscmVhZHlEZWZpbmVkIiwic3BlY1BvbGljeSIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50IiwiYXV0b2JpbmQiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwiUmVhY3RDbGFzc01peGluIiwic3BlYyIsImF1dG9CaW5kUGFpcnMiLCJfX3JlYWN0QXV0b0JpbmRQYWlycyIsImlzUmVhY3RDbGFzc01ldGhvZCIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMiLCJvbmUiLCJ0d28iLCJiaW5kQXV0b0JpbmRNZXRob2QiLCJjb21wb25lbnQiLCJJc01vdW50ZWRQcmVNaXhpbiIsIl9faXNNb3VudGVkIiwiSXNNb3VudGVkUG9zdE1peGluIiwicmVwbGFjZVN0YXRlIiwibmV3U3RhdGUiLCJ1cGRhdGVyIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImlzTW91bnRlZCIsIlJlYWN0Q2xhc3NDb21wb25lbnQiLCJwYWlycyIsImF1dG9CaW5kS2V5IiwiYmluZEF1dG9CaW5kTWV0aG9kcyIsInJlZnMiLCJjcmVhdGVSZWFjdENsYXNzIiwiUmVhY3RET00iLCJjcmVhdGVDbGFzcyIsImNoYXJ0VHlwZSIsIm1ldGhvZE5hbWVzIiwiZGF0YUtleSIsImV4Y2x1ZGVkUHJvcHMiLCJjbGFzc0RhdGEiLCJfcHJvcHMiLCJleHRyYXMiLCJleHRyYSIsImluaXRpYWxpemVDaGFydCIsInJlZHJhdyIsImRhdGFLZXlzIiwidXBkYXRlUG9pbnRzIiwiZmluZERPTU5vZGUiLCJnZXRDaGFydCIsImdldENhbnZhc3MiLCJjYW52YXNzIiwiZ2V0Q2FudmFzIiwiTGluZSIsIlJhZGFyIiwiQmFyIiwic2VnbWVudEluZGV4Iiwic2V0SW5kZXgiLCJ2YXJzIiwiX3JlYWN0UmVkdXgiLCJQaWVDaGFydCIsIl9QaWUyIiwiY29ubmVjdCIsIl9jaGFydDIiLCJBY3Rpb25zIiwiU3VtbWFyeUl0ZW0iLCJzdW1tYXJ5IiwiYnVpbGRpbmdzIiwiY2l0aXplbnMiLCJTdW1tYXJ5IiwiX1N1bW1hcnlJdGVtMiIsIl9zdW1tYXJ5MiIsIkxlZ2VuZEl0ZW0iLCJsZWdlbmRJdGVtQ2xhc3NOYW1lIiwiZmlsdGVyRmVhdHVyZSIsImJhY2tncm91bmRDb2xvciIsImJveFNoYWRvdyIsIkxlZ2VuZCIsIl9MZWdlbmRJdGVtMiIsIl9maWx0ZXJzIiwiU2lkZWJhciIsImNvbHVtbnMiLCJfQ2hhcnRKUzIiLCJfTGVnZW5kMiIsIl9TdW1tYXJ5MiIsIl9BY3Rpb25zMiIsIl9sZWdlbmQyIiwiaXNGZXRjaGluZyIsImdvb2dsZSIsIkwiLCJ0aWxlTGF5ZXIiLCJvc20iLCJjZW50ZXIiLCJ6b29tIiwibGF5ZXJzIiwic2Nyb2xsd2hlZWwiLCJsZWdlbmRzIiwiaW5mb0NvbnRyb2wiLCJhdHRyaWJ1dGlvbkNvbnRyb2wiLCJiYXNlTGF5ZXJzIiwiR29vZ2xlIiwiT1NNIiwiZmVhdHVyZUdyb3VwIiwiRmVhdHVyZUdyb3VwIiwiZHJhd0NvbnRyb2wiLCJDb250cm9sIiwiRHJhdyIsInJlY3RhbmdsZSIsInBvbHlnb24iLCJpY29uIiwiRGl2SWNvbiIsImljb25TaXplIiwiYWxsb3dJbnRlcnNlY3Rpb24iLCJwb2x5bGluZSIsImNpcmNsZSIsIm1hcmtlciIsImNpcmNsZW1hcmtlciIsImVkaXQiLCJNYXAiLCJsYXllcnNDb250cm9sIiwicG9seWdvbkxheWVyIiwiX21hcE5vZGUiLCJjcmVhdGVSZWYiLCJfb3NtYiIsImdldERhdGEiLCJ3aXRoSW5Qb2x5Z29uIiwiZ2VvbWV0cnkiLCJmZWF0dXJlc0xpc3RUb0NvbGxlY3Rpb24iLCJsaXN0IiwiaW5pdERyYXdFdmVudHMiLCJvbiIsIkV2ZW50IiwiQ1JFQVRFRCIsImxheWVyIiwidG9HZW9KU09OIiwiVXRpbCIsInNldE9wdGlvbnMiLCJpbnRlcmFjdGl2ZSIsImN1cnJlbnRMYXllciIsInJlbW92ZUxheWVyIiwiYWRkTGF5ZXIiLCJzZXRNYXBCb3VuZHMiLCJsZWFmbGV0UG9seWdvbiIsImdlb0pTT04iLCJvbkVhY2hGZWF0dXJlIiwiZml0Qm91bmRzIiwiZ2V0Qm91bmRzIiwiYWRkVG8iLCJmaW5kRmVhdHVyZUJ5SWQiLCJmaW5kIiwic2V0T1NNQiIsImlvdSIsInJvb2ZDb2xvciIsImNsaWNrIiwianNvbiIsImNvbnRlbnQiLCJwb3B1cCIsIm1heEhlaWdodCIsImF1dG9QYW5QYWRkaW5nVG9wTGVmdCIsInNldExhdExuZyIsImxhdExuZyIsImxhdCIsImxvbiIsInNldENvbnRlbnQiLCJvcGVuT24iLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJPU01CdWlsZGluZ3MiLCJjb250cm9sIiwicG9zaXRpb24iLCJjb2xsYXBzZWQiLCJhZGRDb250cm9sIiwiX2ZlYXR1cmVzMiIsIiRPYmplY3QiLCJidWdneSIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ2V0S2V5cyIsImdPUFMiLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIktFWSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiREVTQ1JJUFRPUlMiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJPYmplY3RQcm90byIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIl9rIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJpdGVyYXRlZCIsIl90IiwiQXJndW1lbnRzIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJ0b0ludGVnZXIiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiJGF0IiwiX3JlZHV4IiwiVXJiYW5BbmFseXRpY3NBcHAiLCJfU2lkZWJhcjIiLCJfTWFwMiIsIl9Mb2FkaW5nSW5kaWNhdG9yMiIsImZpbHRlckRlZmF1bHRTdGF0ZSIsImFyZWFSZWR1Y2VyRGVmYXVsdFN0YXRlIiwic3VwZXJfIiwidSIsIk4iLCJwcmVmaWx0ZXIiLCJub3JtYWxpemUiLCJsaHMiLCJyaHMiLCJncm91cENvbGxhcHNlZCIsImdyb3VwIiwiZ3JvdXBFbmQiLCJhY3Rpb25UcmFuc2Zvcm1lciIsInRpdGxlRm9ybWF0dGVyIiwidGltZXN0YW1wIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInRvb2siLCJUIiwiTSIsIl8iLCJzdGF0ZVRyYW5zZm9ybWVyIiwiZXJyb3JUcmFuc2Zvcm1lciIsImxvZ0Vycm9ycyIsImRpZmZQcmVkaWNhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiRGVlcERpZmYiLCJvYnNlcnZhYmxlRGlmZiIsImFwcGx5RGlmZiIsImFwcGx5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiaXNDb25mbGljdCIsInRyYW5zZm9ybWVyIiwiY3JlYXRlTG9nZ2VyIiwiY29tcG9zZUVuaGFuY2VycyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIl9yZWR1eFNhZ2EyIiwiYXJlYVJlZHVjZXIiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCIkYXNzaWduIiwiSyIsImFMZW4iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwidG9rZW4iLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwiZm5zIiwidHJhbnNmb3JtRGF0YSIsImlzQ2FuY2VsIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsIkludGVyY2VwdG9yTWFuYWdlciIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZWplY3QiLCJleHBpcmVzIiwiZG9tYWluIiwiY29va2llIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJjaGFycyIsImJsb2NrIiwiY2hhckNvZGUiLCJpZHgiLCJvcmlnaW5VUkwiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwibm9ybWFsaXplZE5hbWUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImRpc3BhdGNoUmVxdWVzdCIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJyZWFkRmxvYXRMRSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsImNyZWF0ZUluc3RhbmNlIiwiYXhpb3MiLCJwcm9taXNlcyIsInNwcmVhZCIsIl9heGlvcyIsImJhY2tlbmRTZXJ2ZXIiLCJfY2xpZW50IiwicG9zdCIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwidW53cmFwcGVkIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiaGFkUnVudGltZSIsIm9sZFJ1bnRpbWUiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2MiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImJhIiwiZWEiLCJoYSIsImphIiwia2EiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidWEiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJQYSIsIlFhIiwiUmEiLCJpbmplY3Rpb24iLCJnZXRMaXN0ZW5lciIsInJ1bkV2ZW50c0luQmF0Y2giLCJydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJYYSIsImJiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJkYiIsImRpc3BhdGNoQ29uZmlnIiwiZWIiLCJfdGFyZ2V0SW5zdCIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibmIiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJkb2N1bWVudE1vZGUiLCJ6YiIsIkFiIiwiQmIiLCJLYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJMYiIsIk1iIiwia2V5Q29kZSIsIk5iIiwiZGV0YWlsIiwiT2IiLCJSYiIsIndoaWNoIiwiUGIiLCJhbHRLZXkiLCJjaGFyIiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwid2VlayIsImdjIiwiaGMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImljIiwiamMiLCJsYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwia2MiLCJtYyIsImNoZWNrZWQiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJvYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJDYyIsIkRjIiwiRWMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiViIsIlNjIiwiVGMiLCJVYyIsIkdjIiwiSGMiLCJGYyIsInNldEF0dHJpYnV0ZU5TIiwiVmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIldjIiwiWGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJ0YWJJbmRleCIsImJkIiwiY2hhbmdlIiwiY2QiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwicWQiLCJ2aWV3IiwicmQiLCJBbHQiLCJNZXRhIiwiU2hpZnQiLCJzZCIsImdldE1vZGlmaWVyU3RhdGUiLCJ0ZCIsInVkIiwic2NyZWVuWCIsInNjcmVlblkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsInZkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJ3ZCIsInBhcmVudFdpbmRvdyIsInhkIiwiZWZmZWN0VGFnIiwieWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiemQiLCJBZCIsImNoaWxkIiwic2libGluZyIsIkJkIiwiRGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiRWQiLCJjbGlwYm9hcmREYXRhIiwiRmQiLCJHZCIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwicmVwZWF0IiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk9kIiwiUGQiLCJRZCIsImlzSW50ZXJhY3RpdmUiLCJSZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIlNkIiwiVGQiLCJVZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiX2VuYWJsZWQiLCJzZXRFbmFibGVkIiwidHJhcEJ1YmJsZWRFdmVudCIsInRyYXBDYXB0dXJlZEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImFlIiwiYmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJjZSIsImRlIiwiZWUiLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwiZmlyc3RDaGlsZCIsIm1lIiwidGV4dENvbnRlbnQiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInZlIiwib25TZWxlY3QiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ6ZSIsIkFlIiwiaXNSZWFjdENvbXBvbmVudCIsIkJlIiwiQ2UiLCJEZSIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkVlIiwiRmUiLCJHZSIsIkllIiwiSmUiLCJLZSIsImJhc2VTdGF0ZSIsImZpcnN0IiwibGFzdCIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsImNhcHR1cmVkVmFsdWVzIiwiTGUiLCJTZXQiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwicGFydGlhbFN0YXRlIiwiUmUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhcHR1cmVkVmFsdWUiLCJTZSIsIlVlIiwiVmUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiV2UiLCJYZSIsIlEiLCJIIiwiWWUiLCJaZSIsIiRlIiwicGVuZGluZ0NvbnRleHQiLCJZIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJwdXNoUHJvdmlkZXIiLCJnZXRNYXNrZWRDb250ZXh0IiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQ2IiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVGUiLCJLYyIsIkxjIiwiRGIiLCJNYyIsIkViIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjZiIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJlZiIsImxmIiwiSSIsIllhIiwiWiIsIk5jIiwieWEiLCJjYSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIk9jIiwiWmEiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJjb21wb25lbnREaWRDYXRjaCIsImlhIiwiemEiLCJkYSIsIkZiIiwieGciLCJ5ZSIsIkljIiwiUGMiLCJHYiIsIm1nIiwiUWMiLCJsZyIsIm5leHRTY2hlZHVsZWRSb290IiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJsYSIsIkoiLCJIYiIsImFhIiwiJGEiLCJJYiIsIkFhIiwiX29uQ29tcGxldGUiLCJ3ZyIsIkJhIiwiSmIiLCJmaW5pc2hlZFdvcmsiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwiemciLCJhYiIsImtnIiwid2UiLCJnZyIsIkFnIiwiaGciLCJpZyIsImpnIiwidGltZVJlbWFpbmluZyIsIkJnIiwiY3JlYXRlQ3Vyc29yIiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2Iiwia2YiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImZmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJjdXJzb3IiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImhmIiwicG9wUHJvdmlkZXIiLCJqZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImdmIiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwicGVyc2lzdGVuY2UiLCJtdXRhdGlvbiIsImNvbXBsZXRlV29yayIsImFmIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYmYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiZGlkVGltZW91dCIsIkRmIiwiRWYiLCJwb3N0TWVzc2FnZSIsIkluZmluaXR5IiwiR2YiLCJDaGlsZHJlbiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkpmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJLZiIsIkxmIiwiTWYiLCJOZiIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJPZiIsIlBmIiwiUWYiLCJSZiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJTZiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlRmIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4IiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsIlVmIiwiVmYiLCJzZXRQcm9wZXJ0eSIsIldmIiwibWVudWl0ZW0iLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjcmVhdGVUZXh0Tm9kZSIsImNnIiwiX19odG1sIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm5nIiwib2ciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJoaWRkZW4iLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIkNnIiwiRWciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRGciLCJGZyIsInFmIiwiR2ciLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJIZyIsIklnIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiUmVhY3RHQSIsIm1vdW50Tm9kZSIsImdldEVsZW1lbnRCeUlkIiwiX2NvbmZpZ3VyZVN0b3JlMiIsImpzeCIsIl9VcmJhbkFuYWx5dGljc0FwcDIiLCJyb290U2FnYSIsImZyZWVHbG9iYWwiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVos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QyxlQUFBLFFBQ0FDLFNBQUEsU0FDQUMsUUFBQSxTQUNBQyxLQUFBLE1BQ0FDLFNBQUEsSUFDQUMsU0FBQSxNQUNBQyxjQUFBLFNBQ0FDLFNBQUEsU0FDQUMsVUFBQSxNQUNBQyxTQUFBLFNBQ0FDLFVBQUEsU0FDQUMsWUFBQSxRQUNBQyxlQUFBLFFBQ0FDLFdBQUEsU0FDQUMsV0FBQSxTQUNBQyxRQUFBLFFBQ0FDLFdBQUEsU0FDQUMsYUFBQSxRQUNBQyxjQUFBLFFBQ0FDLGNBQUEsUUFDQUMsY0FBQSxRQUNBQyxjQUFBLE1BQ0FDLFdBQUEsUUFDQUMsU0FBQSxTQUNBQyxZQUFBLE1BQ0FDLFFBQUEsUUFDQUMsUUFBQSxRQUNBQyxXQUFBLFFBQ0FDLFVBQUEsU0FDQUMsWUFBQSxTQUNBQyxZQUFBLFFBQ0FDLFFBQUEsU0FDQUMsVUFBQSxTQUNBQyxXQUFBLFNBQ0FDLEtBQUEsU0FDQUMsVUFBQSxTQUNBQyxLQUFBLFFBQ0E5ZCxNQUFBLE1BQ0ErZCxZQUFBLFNBQ0FDLEtBQUEsUUFDQUMsU0FBQSxTQUNBQyxRQUFBLFNBQ0FDLFVBQUEsU0FDQUMsT0FBQSxRQUNBQyxNQUFBLFNBQ0FDLE1BQUEsU0FDQUMsU0FBQSxTQUNBQyxjQUFBLFNBQ0FDLFVBQUEsUUFDQUMsYUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsU0FDQUMsVUFBQSxTQUNBQyxxQkFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFlBQUEsU0FDQUMsY0FBQSxRQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZUFBQSxRQUNBQyxlQUFBLFNBQ0FDLFlBQUEsU0FDQUMsS0FBQSxNQUNBQyxVQUFBLFFBQ0FDLE1BQUEsU0FDQUMsUUFBQSxTQUNBQyxPQUFBLFFBQ0FDLGlCQUFBLFFBQ0FDLFdBQUEsSUFDQUMsYUFBQSxTQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZ0JBQUEsUUFDQUMsa0JBQUEsTUFDQUMsZ0JBQUEsUUFDQUMsZ0JBQUEsU0FDQUMsYUFBQSxRQUNBQyxVQUFBLFNBQ0FD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QkFBQTMzRyxRQUFBcFQsaUJBQUFvVCxFQUVBclMsRUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIuXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxODQpO1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIHN5bSA9IGZ1bmN0aW9uIHN5bShpZCkge1xuICByZXR1cm4gJ0BAcmVkdXgtc2FnYS8nICsgaWQ7XG59O1xuXG5leHBvcnQgdmFyIFRBU0sgPSAvKiNfX1BVUkVfXyovc3ltKCdUQVNLJyk7XG5leHBvcnQgdmFyIEhFTFBFUiA9IC8qI19fUFVSRV9fKi9zeW0oJ0hFTFBFUicpO1xuZXhwb3J0IHZhciBNQVRDSCA9IC8qI19fUFVSRV9fKi9zeW0oJ01BVENIJyk7XG5leHBvcnQgdmFyIENBTkNFTCA9IC8qI19fUFVSRV9fKi9zeW0oJ0NBTkNFTF9QUk9NSVNFJyk7XG5leHBvcnQgdmFyIFNBR0FfQUNUSU9OID0gLyojX19QVVJFX18qL3N5bSgnU0FHQV9BQ1RJT04nKTtcbmV4cG9ydCB2YXIgU0VMRl9DQU5DRUxMQVRJT04gPSAvKiNfX1BVUkVfXyovc3ltKCdTRUxGX0NBTkNFTExBVElPTicpO1xuZXhwb3J0IHZhciBrb25zdCA9IGZ1bmN0aW9uIGtvbnN0KHYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcbn07XG5leHBvcnQgdmFyIGtUcnVlID0gLyojX19QVVJFX18qL2tvbnN0KHRydWUpO1xuZXhwb3J0IHZhciBrRmFsc2UgPSAvKiNfX1BVUkVfXyova29uc3QoZmFsc2UpO1xuZXhwb3J0IHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuZXhwb3J0IHZhciBpZGVudCA9IGZ1bmN0aW9uIGlkZW50KHYpIHtcbiAgcmV0dXJuIHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCBjaGVjaycsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGlzLm5vdFVuZGVmKG9iamVjdCkgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcbn1cblxuZXhwb3J0IHZhciBpcyA9IHtcbiAgdW5kZWY6IGZ1bmN0aW9uIHVuZGVmKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQ7XG4gIH0sXG4gIG5vdFVuZGVmOiBmdW5jdGlvbiBub3RVbmRlZih2KSB7XG4gICAgcmV0dXJuIHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkO1xuICB9LFxuICBmdW5jOiBmdW5jdGlvbiBmdW5jKGYpIHtcbiAgICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInO1xuICB9LFxuICBzdHJpbmc6IGZ1bmN0aW9uIHN0cmluZyhzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbiAgfSxcbiAgYXJyYXk6IEFycmF5LmlzQXJyYXksXG4gIG9iamVjdDogZnVuY3Rpb24gb2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgIWlzLmFycmF5KG9iaikgJiYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpID09PSAnb2JqZWN0JztcbiAgfSxcbiAgcHJvbWlzZTogZnVuY3Rpb24gcHJvbWlzZShwKSB7XG4gICAgcmV0dXJuIHAgJiYgaXMuZnVuYyhwLnRoZW4pO1xuICB9LFxuICBpdGVyYXRvcjogZnVuY3Rpb24gaXRlcmF0b3IoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXMuZnVuYyhpdC5uZXh0KSAmJiBpcy5mdW5jKGl0LnRocm93KTtcbiAgfSxcbiAgaXRlcmFibGU6IGZ1bmN0aW9uIGl0ZXJhYmxlKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGlzLmZ1bmMoU3ltYm9sKSA/IGlzLmZ1bmMoaXRbU3ltYm9sLml0ZXJhdG9yXSkgOiBpcy5hcnJheShpdCk7XG4gIH0sXG4gIHRhc2s6IGZ1bmN0aW9uIHRhc2sodCkge1xuICAgIHJldHVybiB0ICYmIHRbVEFTS107XG4gIH0sXG4gIG9ic2VydmFibGU6IGZ1bmN0aW9uIG9ic2VydmFibGUob2IpIHtcbiAgICByZXR1cm4gb2IgJiYgaXMuZnVuYyhvYi5zdWJzY3JpYmUpO1xuICB9LFxuICBidWZmZXI6IGZ1bmN0aW9uIGJ1ZmZlcihidWYpIHtcbiAgICByZXR1cm4gYnVmICYmIGlzLmZ1bmMoYnVmLmlzRW1wdHkpICYmIGlzLmZ1bmMoYnVmLnRha2UpICYmIGlzLmZ1bmMoYnVmLnB1dCk7XG4gIH0sXG4gIHBhdHRlcm46IGZ1bmN0aW9uIHBhdHRlcm4ocGF0KSB7XG4gICAgcmV0dXJuIHBhdCAmJiAoaXMuc3RyaW5nKHBhdCkgfHwgKHR5cGVvZiBwYXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdCkpID09PSAnc3ltYm9sJyB8fCBpcy5mdW5jKHBhdCkgfHwgaXMuYXJyYXkocGF0KSk7XG4gIH0sXG4gIGNoYW5uZWw6IGZ1bmN0aW9uIGNoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2ggJiYgaXMuZnVuYyhjaC50YWtlKSAmJiBpcy5mdW5jKGNoLmNsb3NlKTtcbiAgfSxcbiAgaGVscGVyOiBmdW5jdGlvbiBoZWxwZXIoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXRbSEVMUEVSXTtcbiAgfSxcbiAgc3RyaW5nYWJsZUZ1bmM6IGZ1bmN0aW9uIHN0cmluZ2FibGVGdW5jKGYpIHtcbiAgICByZXR1cm4gaXMuZnVuYyhmKSAmJiBoYXNPd24oZiwgJ3RvU3RyaW5nJyk7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgb2JqZWN0ID0ge1xuICBhc3NpZ246IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIGZvciAodmFyIGkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoaGFzT3duKHNvdXJjZSwgaSkpIHtcbiAgICAgICAgdGFyZ2V0W2ldID0gc291cmNlW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgaXRlbSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn1cblxuZXhwb3J0IHZhciBhcnJheSA9IHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShvYmopIHtcbiAgICB2YXIgYXJyID0gQXJyYXkob2JqLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgIGlmIChoYXNPd24ob2JqLCBpKSkge1xuICAgICAgICBhcnJbaV0gPSBvYmpbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZlcnJlZCgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgZGVmID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZi5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICBkZWYucHJvbWlzZSA9IHByb21pc2U7XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheU9mRGVmZmVyZWQobGVuZ3RoKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFyci5wdXNoKGRlZmVycmVkKCkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxheShtcykge1xuICB2YXIgdmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhciB0aW1lb3V0SWQgPSB2b2lkIDA7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKHZhbCk7XG4gICAgfSwgbXMpO1xuICB9KTtcblxuICBwcm9taXNlW0NBTkNFTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9O1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja1Rhc2soKSB7XG4gIHZhciBfcmVmO1xuXG4gIHZhciBydW5uaW5nID0gdHJ1ZTtcbiAgdmFyIF9yZXN1bHQgPSB2b2lkIDAsXG4gICAgICBfZXJyb3IgPSB2b2lkIDA7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltUQVNLXSA9IHRydWUsIF9yZWYuaXNSdW5uaW5nID0gZnVuY3Rpb24gaXNSdW5uaW5nKCkge1xuICAgIHJldHVybiBydW5uaW5nO1xuICB9LCBfcmVmLnJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfSwgX3JlZi5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgIHJldHVybiBfZXJyb3I7XG4gIH0sIF9yZWYuc2V0UnVubmluZyA9IGZ1bmN0aW9uIHNldFJ1bm5pbmcoYikge1xuICAgIHJldHVybiBydW5uaW5nID0gYjtcbiAgfSwgX3JlZi5zZXRSZXN1bHQgPSBmdW5jdGlvbiBzZXRSZXN1bHQocikge1xuICAgIHJldHVybiBfcmVzdWx0ID0gcjtcbiAgfSwgX3JlZi5zZXRFcnJvciA9IGZ1bmN0aW9uIHNldEVycm9yKGUpIHtcbiAgICByZXR1cm4gX2Vycm9yID0gZTtcbiAgfSwgX3JlZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9JbmMoKSB7XG4gIHZhciBzZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciB1aWQgPSAvKiNfX1BVUkVfXyovYXV0b0luYygpO1xuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xudmFyIGtSZXR1cm4gPSBmdW5jdGlvbiBrUmV0dXJuKHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSXRlcmF0b3IobmV4dCkge1xuICB2YXIgdGhybyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoga1Rocm93O1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gIHZhciBpc0hlbHBlciA9IGFyZ3VtZW50c1szXTtcblxuICB2YXIgaXRlcmF0b3IgPSB7IG5hbWU6IG5hbWUsIG5leHQ6IG5leHQsIHRocm93OiB0aHJvLCByZXR1cm46IGtSZXR1cm4gfTtcblxuICBpZiAoaXNIZWxwZXIpIHtcbiAgICBpdGVyYXRvcltIRUxQRVJdID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuXG4vKipcbiAgUHJpbnQgZXJyb3IgaW4gYSB1c2VmdWwgd2F5IHdoZXRoZXIgaW4gYSBicm93c2VyIGVudmlyb25tZW50XG4gICh3aXRoIGV4cGFuZGFibGUgZXJyb3Igc3RhY2sgdHJhY2VzKSwgb3IgaW4gYSBub2RlLmpzIGVudmlyb25tZW50XG4gICh0ZXh0LW9ubHkgbG9nIG91dHB1dClcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2cobGV2ZWwsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmxvZygncmVkdXgtc2FnYSAnICsgbGV2ZWwgKyAnOiAnICsgbWVzc2FnZSArICdcXG4nICsgKGVycm9yICYmIGVycm9yLnN0YWNrIHx8IGVycm9yKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZVtsZXZlbF0obWVzc2FnZSwgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIGRlcHJlY2F0aW9uV2FybmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgbG9nKCd3YXJuJywgZGVwcmVjYXRpb25XYXJuaW5nKTtcbiAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHVwZGF0ZUluY2VudGl2ZSA9IGZ1bmN0aW9uIHVwZGF0ZUluY2VudGl2ZShkZXByZWNhdGVkLCBwcmVmZXJyZWQpIHtcbiAgcmV0dXJuIGRlcHJlY2F0ZWQgKyAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgJyArIHByZWZlcnJlZCArICcsIHBsZWFzZSB1cGRhdGUgeW91ciBjb2RlJztcbn07XG5cbmV4cG9ydCB2YXIgaW50ZXJuYWxFcnIgPSBmdW5jdGlvbiBpbnRlcm5hbEVycihlcnIpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignXFxuICByZWR1eC1zYWdhOiBFcnJvciBjaGVja2luZyBob29rcyBkZXRlY3RlZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFRoaXMgaXMgbGlrZWx5IGEgYnVnXFxuICBpbiByZWR1eC1zYWdhIGNvZGUgYW5kIG5vdCB5b3Vycy4gVGhhbmtzIGZvciByZXBvcnRpbmcgdGhpcyBpbiB0aGUgcHJvamVjdFxcJ3MgZ2l0aHViIHJlcG8uXFxuICBFcnJvcjogJyArIGVyciArICdcXG4nKTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhjdHgsIHByb3BzKSB7XG4gIHJldHVybiAoY3R4ID8gY3R4ICsgJy4nIDogJycpICsgJ3NldENvbnRleHQocHJvcHMpOiBhcmd1bWVudCAnICsgcHJvcHMgKyAnIGlzIG5vdCBhIHBsYWluIG9iamVjdCc7XG59O1xuXG5leHBvcnQgdmFyIHdyYXBTYWdhRGlzcGF0Y2ggPSBmdW5jdGlvbiB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3Rpb24sIFNBR0FfQUNUSU9OLCB7IHZhbHVlOiB0cnVlIH0pKTtcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY2xvbmVhYmxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgaGlzdG9yeSA9IFtdO1xuICAgIHZhciBnZW4gPSBnZW5lcmF0b3JGdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoYXJnKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaChhcmcpO1xuICAgICAgICByZXR1cm4gZ2VuLm5leHQoYXJnKTtcbiAgICAgIH0sXG4gICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBjbG9uZWRHZW4gPSBjbG9uZWFibGVHZW5lcmF0b3IoZ2VuZXJhdG9yRnVuYykuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgaGlzdG9yeS5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVkR2VuLm5leHQoYXJnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbG9uZWRHZW47XG4gICAgICB9LFxuICAgICAgcmV0dXJuOiBmdW5jdGlvbiBfcmV0dXJuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZW4ucmV0dXJuKHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICB0aHJvdzogZnVuY3Rpb24gX3Rocm93KGV4Y2VwdGlvbikge1xuICAgICAgICByZXR1cm4gZ2VuLnRocm93KGV4Y2VwdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07IiwiaW1wb3J0IHsgc3ltLCBpcywgaWRlbnQsIGNoZWNrLCBkZXByZWNhdGUsIHVwZGF0ZUluY2VudGl2ZSwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcsIFNFTEZfQ0FOQ0VMTEFUSU9OIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyB0YWtlRXZlcnlIZWxwZXIsIHRha2VMYXRlc3RIZWxwZXIsIHRocm90dGxlSGVscGVyIH0gZnJvbSAnLi9zYWdhSGVscGVycyc7XG5cbnZhciBJTyA9IC8qI19fUFVSRV9fKi9zeW0oJ0lPJyk7XG52YXIgVEFLRSA9ICdUQUtFJztcbnZhciBQVVQgPSAnUFVUJztcbnZhciBBTEwgPSAnQUxMJztcbnZhciBSQUNFID0gJ1JBQ0UnO1xudmFyIENBTEwgPSAnQ0FMTCc7XG52YXIgQ1BTID0gJ0NQUyc7XG52YXIgRk9SSyA9ICdGT1JLJztcbnZhciBKT0lOID0gJ0pPSU4nO1xudmFyIENBTkNFTCA9ICdDQU5DRUwnO1xudmFyIFNFTEVDVCA9ICdTRUxFQ1QnO1xudmFyIEFDVElPTl9DSEFOTkVMID0gJ0FDVElPTl9DSEFOTkVMJztcbnZhciBDQU5DRUxMRUQgPSAnQ0FOQ0VMTEVEJztcbnZhciBGTFVTSCA9ICdGTFVTSCc7XG52YXIgR0VUX0NPTlRFWFQgPSAnR0VUX0NPTlRFWFQnO1xudmFyIFNFVF9DT05URVhUID0gJ1NFVF9DT05URVhUJztcblxudmFyIFRFU1RfSElOVCA9ICdcXG4oSElOVDogaWYgeW91IGFyZSBnZXR0aW5nIHRoaXMgZXJyb3JzIGluIHRlc3RzLCBjb25zaWRlciB1c2luZyBjcmVhdGVNb2NrVGFzayBmcm9tIHJlZHV4LXNhZ2EvdXRpbHMpJztcblxudmFyIGVmZmVjdCA9IGZ1bmN0aW9uIGVmZmVjdCh0eXBlLCBwYXlsb2FkKSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbSU9dID0gdHJ1ZSwgX3JlZlt0eXBlXSA9IHBheWxvYWQsIF9yZWY7XG59O1xuXG5leHBvcnQgdmFyIGRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaChlZmYpIHtcbiAgY2hlY2soYXNFZmZlY3QuZm9yayhlZmYpLCBpcy5vYmplY3QsICdkZXRhY2goZWZmKTogYXJndW1lbnQgbXVzdCBiZSBhIGZvcmsgZWZmZWN0Jyk7XG4gIGVmZltGT1JLXS5kZXRhY2hlZCA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGFrZSgpIHtcbiAgdmFyIHBhdHRlcm5PckNoYW5uZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcqJztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNoZWNrKGFyZ3VtZW50c1swXSwgaXMubm90VW5kZWYsICd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBwYXR0ZXJuT3JDaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICB9XG4gIGlmIChpcy5wYXR0ZXJuKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIGVmZmVjdChUQUtFLCB7IHBhdHRlcm46IHBhdHRlcm5PckNoYW5uZWwgfSk7XG4gIH1cbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgY2hhbm5lbDogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCkgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVybicpO1xufVxuXG50YWtlLm1heWJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gdGFrZS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIGVmZltUQUtFXS5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5leHBvcnQgdmFyIHRha2VtID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlLm1heWJlLCAvKiNfX1BVUkVfXyovdXBkYXRlSW5jZW50aXZlKCd0YWtlbScsICd0YWtlLm1heWJlJykpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHV0KGNoYW5uZWwsIGFjdGlvbikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBjaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKGNoYW5uZWwsIGlzLmNoYW5uZWwsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgJyArIGNoYW5uZWwgKyAnIGlzIG5vdCBhIHZhbGlkIGNoYW5uZWwnKTtcbiAgICBjaGVjayhhY3Rpb24sIGlzLm5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5ub3RVbmRlZiwgJ3B1dChhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgYWN0aW9uID0gY2hhbm5lbDtcbiAgICBjaGFubmVsID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFBVVCwgeyBjaGFubmVsOiBjaGFubmVsLCBhY3Rpb246IGFjdGlvbiB9KTtcbn1cblxucHV0LnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbUFVUXS5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbnB1dC5zeW5jID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZShwdXQucmVzb2x2ZSwgLyojX19QVVJFX18qL3VwZGF0ZUluY2VudGl2ZSgncHV0LnN5bmMnLCAncHV0LnJlc29sdmUnKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGwoZWZmZWN0cykge1xuICByZXR1cm4gZWZmZWN0KEFMTCwgZWZmZWN0cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYWNlKGVmZmVjdHMpIHtcbiAgcmV0dXJuIGVmZmVjdChSQUNFLCBlZmZlY3RzKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm5DYWxsRGVzYyhtZXRoLCBmbiwgYXJncykge1xuICBjaGVjayhmbiwgaXMubm90VW5kZWYsIG1ldGggKyAnOiBhcmd1bWVudCBmbiBpcyB1bmRlZmluZWQnKTtcblxuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIGlmIChpcy5hcnJheShmbikpIHtcbiAgICB2YXIgX2ZuID0gZm47XG4gICAgY29udGV4dCA9IF9mblswXTtcbiAgICBmbiA9IF9mblsxXTtcbiAgfSBlbHNlIGlmIChmbi5mbikge1xuICAgIHZhciBfZm4yID0gZm47XG4gICAgY29udGV4dCA9IF9mbjIuY29udGV4dDtcbiAgICBmbiA9IF9mbjIuZm47XG4gIH1cbiAgaWYgKGNvbnRleHQgJiYgaXMuc3RyaW5nKGZuKSAmJiBpcy5mdW5jKGNvbnRleHRbZm5dKSkge1xuICAgIGZuID0gY29udGV4dFtmbl07XG4gIH1cbiAgY2hlY2soZm4sIGlzLmZ1bmMsIG1ldGggKyAnOiBhcmd1bWVudCAnICsgZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cbiAgcmV0dXJuIHsgY29udGV4dDogY29udGV4dCwgZm46IGZuLCBhcmdzOiBhcmdzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdjYWxsJywgZm4sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGNvbnRleHQsIGZuKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcblxuICByZXR1cm4gZWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2MoJ2FwcGx5JywgeyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4gfSwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3BzKGZuKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDUFMsIGdldEZuQ2FsbERlc2MoJ2NwcycsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JrKGZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChGT1JLLCBnZXRGbkNhbGxEZXNjKCdmb3JrJywgZm4sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwYXduKGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgcmV0dXJuIGRldGFjaChmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW2ZuXS5jb25jYXQoYXJncykpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgdGFza3MgPSBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIHRhc2tzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICBpZiAodGFza3MubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBhbGwodGFza3MubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gam9pbih0KTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHRhc2sgPSB0YXNrc1swXTtcbiAgY2hlY2sodGFzaywgaXMubm90VW5kZWYsICdqb2luKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICBjaGVjayh0YXNrLCBpcy50YXNrLCAnam9pbih0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0ICcgKyBURVNUX0hJTlQpO1xuICByZXR1cm4gZWZmZWN0KEpPSU4sIHRhc2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIHRhc2tzID0gQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICB0YXNrc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYWxsKHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGNhbmNlbCh0KTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHRhc2sgPSB0YXNrc1swXTtcbiAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNoZWNrKHRhc2ssIGlzLm5vdFVuZGVmLCAnY2FuY2VsKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKHRhc2ssIGlzLnRhc2ssICdjYW5jZWwodGFzayk6IGFyZ3VtZW50ICcgKyB0YXNrICsgJyBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCAnICsgVEVTVF9ISU5UKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KENBTkNFTCwgdGFzayB8fCBTRUxGX0NBTkNFTExBVElPTik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjcgPiAxID8gX2xlbjcgLSAxIDogMCksIF9rZXk3ID0gMTsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTcgLSAxXSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHNlbGVjdG9yID0gaWRlbnQ7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soc2VsZWN0b3IsIGlzLm5vdFVuZGVmLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgc2VsZWN0b3IgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soc2VsZWN0b3IsIGlzLmZ1bmMsICdzZWxlY3Qoc2VsZWN0b3IsWy4uLl0pOiBhcmd1bWVudCAnICsgc2VsZWN0b3IgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChTRUxFQ1QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBhcmdzOiBhcmdzIH0pO1xufVxuXG4vKipcbiAgY2hhbm5lbChwYXR0ZXJuLCBbYnVmZmVyXSkgICAgPT4gY3JlYXRlcyBhbiBldmVudCBjaGFubmVsIGZvciBzdG9yZSBhY3Rpb25zXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcikge1xuICBjaGVjayhwYXR0ZXJuLCBpcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwuLi4pOiBhcmd1bWVudCBwYXR0ZXJuIGlzIHVuZGVmaW5lZCcpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBjaGVjayhidWZmZXIsIGlzLm5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCBidWZmZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50ICcgKyBidWZmZXIgKyAnIGlzIG5vdCBhIHZhbGlkIGJ1ZmZlcicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoQUNUSU9OX0NIQU5ORUwsIHsgcGF0dGVybjogcGF0dGVybiwgYnVmZmVyOiBidWZmZXIgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxsZWQoKSB7XG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMTEVELCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaChjaGFubmVsKSB7XG4gIGNoZWNrKGNoYW5uZWwsIGlzLmNoYW5uZWwsICdmbHVzaChjaGFubmVsKTogYXJndW1lbnQgJyArIGNoYW5uZWwgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsJyk7XG4gIHJldHVybiBlZmZlY3QoRkxVU0gsIGNoYW5uZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChwcm9wKSB7XG4gIGNoZWNrKHByb3AsIGlzLnN0cmluZywgJ2dldENvbnRleHQocHJvcCk6IGFyZ3VtZW50ICcgKyBwcm9wICsgJyBpcyBub3QgYSBzdHJpbmcnKTtcbiAgcmV0dXJuIGVmZmVjdChHRVRfQ09OVEVYVCwgcHJvcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gIGNoZWNrKHByb3BzLCBpcy5vYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKG51bGwsIHByb3BzKSk7XG4gIHJldHVybiBlZmZlY3QoU0VUX0NPTlRFWFQsIHByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VFdmVyeShwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjggPiAyID8gX2xlbjggLSAyIDogMCksIF9rZXk4ID0gMjsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgIGFyZ3NbX2tleTggLSAyXSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFt0YWtlRXZlcnlIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW45ID4gMiA/IF9sZW45IC0gMiA6IDApLCBfa2V5OSA9IDI7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICBhcmdzW19rZXk5IC0gMl0gPSBhcmd1bWVudHNbX2tleTldO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbdGFrZUxhdGVzdEhlbHBlciwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUobXMsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjEwID4gMyA/IF9sZW4xMCAtIDMgOiAwKSwgX2tleTEwID0gMzsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykge1xuICAgIGFyZ3NbX2tleTEwIC0gM10gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3Rocm90dGxlSGVscGVyLCBtcywgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG52YXIgY3JlYXRlQXNFZmZlY3RUeXBlID0gZnVuY3Rpb24gY3JlYXRlQXNFZmZlY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QpIHtcbiAgICByZXR1cm4gZWZmZWN0ICYmIGVmZmVjdFtJT10gJiYgZWZmZWN0W3R5cGVdO1xuICB9O1xufTtcblxuZXhwb3J0IHZhciBhc0VmZmVjdCA9IHtcbiAgdGFrZTogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShUQUtFKSxcbiAgcHV0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFBVVCksXG4gIGFsbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShBTEwpLFxuICByYWNlOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFJBQ0UpLFxuICBjYWxsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTEwpLFxuICBjcHM6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQ1BTKSxcbiAgZm9yazogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShGT1JLKSxcbiAgam9pbjogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShKT0lOKSxcbiAgY2FuY2VsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTCksXG4gIHNlbGVjdDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShTRUxFQ1QpLFxuICBhY3Rpb25DaGFubmVsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEFDVElPTl9DSEFOTkVMKSxcbiAgY2FuY2VsbGVkOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTExFRCksXG4gIGZsdXNoOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEZMVVNIKSxcbiAgZ2V0Q29udGV4dDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShHRVRfQ09OVEVYVCksXG4gIHNldENvbnRleHQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoU0VUX0NPTlRFWFQpXG59OyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHsgaXMsIGNoZWNrLCByZW1vdmUsIE1BVENILCBpbnRlcm5hbEVyciwgU0FHQV9BQ1RJT04gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuaW1wb3J0IHsgYXNhcCB9IGZyb20gJy4vc2NoZWR1bGVyJztcblxudmFyIENIQU5ORUxfRU5EX1RZUEUgPSAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbmV4cG9ydCB2YXIgRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG5leHBvcnQgdmFyIGlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW1pdHRlcigpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN1Yikge1xuICAgIHN1YnNjcmliZXJzLnB1c2goc3ViKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlbW92ZShzdWJzY3JpYmVycywgc3ViKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChpdGVtKSB7XG4gICAgdmFyIGFyciA9IHN1YnNjcmliZXJzLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZW1pdDogZW1pdFxuICB9O1xufVxuXG5leHBvcnQgdmFyIElOVkFMSURfQlVGRkVSID0gJ2ludmFsaWQgYnVmZmVyIHBhc3NlZCB0byBjaGFubmVsIGZhY3RvcnkgZnVuY3Rpb24nO1xuZXhwb3J0IHZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVU5ERUZJTkVEX0lOUFVUX0VSUk9SICs9ICdcXG5IaW50czpcXG4gICAgLSBjaGVjayB0aGF0IHlvdXIgQWN0aW9uIENyZWF0b3IgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWVcXG4gICAgLSBpZiB0aGUgU2FnYSB3YXMgc3RhcnRlZCB1c2luZyBydW5TYWdhLCBjaGVjayB0aGF0IHlvdXIgc3Vic2NyaWJlIHNvdXJjZSBwcm92aWRlcyB0aGUgYWN0aW9uIHRvIGl0cyBsaXN0ZW5lcnNcXG4gICc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsKCkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBidWZmZXJzLmZpeGVkKCk7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsIElOVkFMSURfQlVGRkVSKTtcblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIHRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBhIGNsb3NlZCBjaGFubmVsIHdpdGggcGVuZGluZyB0YWtlcnMnKTtcbiAgICB9XG4gICAgaWYgKHRha2Vycy5sZW5ndGggJiYgIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBwZW5kaW5nIHRha2VycyB3aXRoIG5vbiBlbXB0eSBidWZmZXInKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXQoaW5wdXQpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGlucHV0LCBpcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltNQVRDSF0gfHwgY2JbTUFUQ0hdKGlucHV0KSkge1xuICAgICAgICB0YWtlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2UoY2IpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGNiLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgY2hlY2soY2IsIGlzLmZ1bmMsIFwiY2hhbm5lbC5mbHVzaCcgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2IoYnVmZmVyLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0YWtlcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgICAgIHRha2VycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXJyW2ldKEVORCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IHRha2UsXG4gICAgcHV0OiBwdXQsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBnZXQgX190YWtlcnNfXygpIHtcbiAgICAgIHJldHVybiB0YWtlcnM7XG4gICAgfSxcbiAgICBnZXQgX19jbG9zZWRfXygpIHtcbiAgICAgIHJldHVybiBjbG9zZWQ7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBidWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCAnSW52YWxpZCBtYXRjaCBmdW5jdGlvbiBwYXNzZWQgdG8gZXZlbnRDaGFubmVsJyk7XG4gIH1cblxuICB2YXIgY2hhbiA9IGNoYW5uZWwoYnVmZmVyKTtcbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKCFjaGFuLl9fY2xvc2VkX18pIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgY2hhbi5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYXRjaGVyICYmICFtYXRjaGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGFuLnB1dChpbnB1dCk7XG4gIH0pO1xuICBpZiAoY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGlmICghaXMuZnVuYyh1bnN1YnNjcmliZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luIGV2ZW50Q2hhbm5lbDogc3Vic2NyaWJlIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiBjaGFuLnRha2UsXG4gICAgZmx1c2g6IGNoYW4uZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgY2hhbiA9IGV2ZW50Q2hhbm5lbChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0W1NBR0FfQUNUSU9OXSkge1xuICAgICAgICBjYihpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2hhbiwge1xuICAgIHRha2U6IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIG1hdGNoZXIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICBjYltNQVRDSF0gPSBtYXRjaGVyO1xuICAgICAgfVxuICAgICAgY2hhbi50YWtlKGNiKTtcbiAgICB9XG4gIH0pO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJpbXBvcnQgeyBrVHJ1ZSwgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdmFyIEJVRkZFUl9PVkVSRkxPVyA9IFwiQ2hhbm5lbCdzIEJ1ZmZlciBvdmVyZmxvdyFcIjtcblxudmFyIE9OX09WRVJGTE9XX1RIUk9XID0gMTtcbnZhciBPTl9PVkVSRkxPV19EUk9QID0gMjtcbnZhciBPTl9PVkVSRkxPV19TTElERSA9IDM7XG52YXIgT05fT1ZFUkZMT1dfRVhQQU5EID0gNDtcblxudmFyIHplcm9CdWZmZXIgPSB7IGlzRW1wdHk6IGtUcnVlLCBwdXQ6IG5vb3AsIHRha2U6IG5vb3AgfTtcblxuZnVuY3Rpb24gcmluZ0J1ZmZlcigpIHtcbiAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDtcbiAgdmFyIG92ZXJmbG93QWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgd2hpbGUgKGxlbmd0aCkge1xuICAgICAgaXRlbXMucHVzaCh0YWtlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCA9PSAwO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbiBwdXQoaXQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBsaW1pdCkge1xuICAgICAgICBwdXNoKGl0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkb3VibGVkTGltaXQgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19TTElERTpcbiAgICAgICAgICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gcHVzaEluZGV4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19FWFBBTkQ6XG4gICAgICAgICAgICBkb3VibGVkTGltaXQgPSAyICogbGltaXQ7XG5cbiAgICAgICAgICAgIGFyciA9IGZsdXNoKCk7XG5cbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuXG4gICAgICAgICAgICBhcnIubGVuZ3RoID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgbGltaXQgPSBkb3VibGVkTGltaXQ7XG5cbiAgICAgICAgICAgIHB1c2goaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBEUk9QXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRha2U6IHRha2UsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59XG5cbmV4cG9ydCB2YXIgYnVmZmVycyA9IHtcbiAgbm9uZTogZnVuY3Rpb24gbm9uZSgpIHtcbiAgICByZXR1cm4gemVyb0J1ZmZlcjtcbiAgfSxcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1RIUk9XKTtcbiAgfSxcbiAgZHJvcHBpbmc6IGZ1bmN0aW9uIGRyb3BwaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xuICB9LFxuICBzbGlkaW5nOiBmdW5jdGlvbiBzbGlkaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1NMSURFKTtcbiAgfSxcbiAgZXhwYW5kaW5nOiBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihpbml0aWFsU2l6ZSwgT05fT1ZFUkZMT1dfRVhQQU5EKTtcbiAgfVxufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJpbXBvcnQgeyBpcywgbWFrZUl0ZXJhdG9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG52YXIgZG9uZSA9IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuZXhwb3J0IHZhciBxRW5kID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSB7XG4gIGlmIChpcy5jaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuICdjaGFubmVsJztcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoZW50cnkpO1xuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZzbUl0ZXJhdG9yKGZzbSwgcTApIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpdGVyYXRvcic7XG5cbiAgdmFyIHVwZGF0ZVN0YXRlID0gdm9pZCAwLFxuICAgICAgcU5leHQgPSBxMDtcblxuICBmdW5jdGlvbiBuZXh0KGFyZywgZXJyb3IpIHtcbiAgICBpZiAocU5leHQgPT09IHFFbmQpIHtcbiAgICAgIHJldHVybiBkb25lO1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcU5leHQgPSBxRW5kO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZVN0YXRlICYmIHVwZGF0ZVN0YXRlKGFyZyk7XG5cbiAgICAgIHZhciBfZnNtJHFOZXh0ID0gZnNtW3FOZXh0XSgpLFxuICAgICAgICAgIHEgPSBfZnNtJHFOZXh0WzBdLFxuICAgICAgICAgIG91dHB1dCA9IF9mc20kcU5leHRbMV0sXG4gICAgICAgICAgX3VwZGF0ZVN0YXRlID0gX2ZzbSRxTmV4dFsyXTtcblxuICAgICAgcU5leHQgPSBxO1xuICAgICAgdXBkYXRlU3RhdGUgPSBfdXBkYXRlU3RhdGU7XG4gICAgICByZXR1cm4gcU5leHQgPT09IHFFbmQgPyBkb25lIDogb3V0cHV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlSXRlcmF0b3IobmV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIG5leHQobnVsbCwgZXJyb3IpO1xuICB9LCBuYW1lLCB0cnVlKTtcbn0iLCJpbXBvcnQgZnNtSXRlcmF0b3IsIHsgcUVuZCwgc2FmZU5hbWUgfSBmcm9tICcuL2ZzbUl0ZXJhdG9yJztcbmltcG9ydCB7IHRha2UsIGZvcmsgfSBmcm9tICcuLi9pbyc7XG5pbXBvcnQgeyBFTkQgfSBmcm9tICcuLi9jaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gRU5EID8gW3FFbmRdIDogWydxMScsIHlGb3JrKGFjdGlvbildO1xuICAgIH1cbiAgfSwgJ3ExJywgJ3Rha2VFdmVyeSgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgY2FuY2VsLCB0YWtlLCBmb3JrIH0gZnJvbSAnLi4vaW8nO1xuaW1wb3J0IHsgRU5EIH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5Q2FuY2VsID0gZnVuY3Rpb24geUNhbmNlbCh0YXNrKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBjYW5jZWwodGFzaykgfTtcbiAgfTtcblxuICB2YXIgdGFzayA9IHZvaWQgMCxcbiAgICAgIGFjdGlvbiA9IHZvaWQgMDtcbiAgdmFyIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRUYXNrKHQpIHtcbiAgICByZXR1cm4gdGFzayA9IHQ7XG4gIH07XG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gRU5EID8gW3FFbmRdIDogdGFzayA/IFsncTMnLCB5Q2FuY2VsKHRhc2spXSA6IFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBbJ3ExJywgeUZvcmsoYWN0aW9uKSwgc2V0VGFza107XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUxhdGVzdCgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgdGFrZSwgZm9yaywgYWN0aW9uQ2hhbm5lbCwgY2FsbCB9IGZyb20gJy4uL2lvJztcbmltcG9ydCB7IEVORCB9IGZyb20gJy4uL2NoYW5uZWwnO1xuaW1wb3J0IHsgYnVmZmVycyB9IGZyb20gJy4uL2J1ZmZlcnMnO1xuaW1wb3J0IHsgZGVsYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYWN0aW9uID0gdm9pZCAwLFxuICAgICAgY2hhbm5lbCA9IHZvaWQgMDtcblxuICB2YXIgeUFjdGlvbkNoYW5uZWwgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXJzLnNsaWRpbmcoMSkpIH07XG4gIHZhciB5VGFrZSA9IGZ1bmN0aW9uIHlUYWtlKCkge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGFrZShjaGFubmVsKSB9O1xuICB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlEZWxheSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBjYWxsKGRlbGF5LCBkZWxheUxlbmd0aCkgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuICB2YXIgc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIHNldENoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2hhbm5lbCA9IGNoO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIFsncTInLCB5QWN0aW9uQ2hhbm5lbCwgc2V0Q2hhbm5lbF07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gWydxMycsIHlUYWtlKCksIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiBbJ3E0JywgeUZvcmsoYWN0aW9uKV07XG4gICAgfSxcbiAgICBxNDogZnVuY3Rpb24gcTQoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlEZWxheV07XG4gICAgfVxuICB9LCAncTEnLCAndGhyb3R0bGUoJyArIHNhZmVOYW1lKHBhdHRlcm4pICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn0iLCJpbXBvcnQgdGFrZUV2ZXJ5SGVscGVyIGZyb20gJy4vdGFrZUV2ZXJ5JztcbmltcG9ydCB0YWtlTGF0ZXN0SGVscGVyIGZyb20gJy4vdGFrZUxhdGVzdCc7XG5pbXBvcnQgdGhyb3R0bGVIZWxwZXIgZnJvbSAnLi90aHJvdHRsZSc7XG5cbmltcG9ydCB7IGRlcHJlY2F0ZSB9IGZyb20gJy4uL3V0aWxzJztcblxudmFyIGRlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhoZWxwZXJOYW1lKSB7XG4gIHJldHVybiAnaW1wb3J0IHsgJyArIGhlbHBlck5hbWUgKyAnIH0gZnJvbSBcXCdyZWR1eC1zYWdhXFwnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgaW1wb3J0IHsgJyArIGhlbHBlck5hbWUgKyAnIH0gZnJvbSBcXCdyZWR1eC1zYWdhL2VmZmVjdHNcXCcuXFxuVGhlIGxhdHRlciB3aWxsIG5vdCB3b3JrIHdpdGggeWllbGQqLCBhcyBoZWxwZXIgZWZmZWN0cyBhcmUgd3JhcHBlZCBhdXRvbWF0aWNhbGx5IGZvciB5b3UgaW4gZm9yayBlZmZlY3QuXFxuVGhlcmVmb3JlIHlpZWxkICcgKyBoZWxwZXJOYW1lICsgJyB3aWxsIHJldHVybiB0YXNrIGRlc2NyaXB0b3IgdG8geW91ciBzYWdhIGFuZCBleGVjdXRlIG5leHQgbGluZXMgb2YgY29kZS4nO1xufTtcblxudmFyIHRha2VFdmVyeSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZUV2ZXJ5SGVscGVyLCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlRXZlcnknKSk7XG52YXIgdGFrZUxhdGVzdCA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZUxhdGVzdEhlbHBlciwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGFrZUxhdGVzdCcpKTtcbnZhciB0aHJvdHRsZSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGhyb3R0bGVIZWxwZXIsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rocm90dGxlJykpO1xuXG5leHBvcnQgeyB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlLCB0YWtlRXZlcnlIZWxwZXIsIHRha2VMYXRlc3RIZWxwZXIsIHRocm90dGxlSGVscGVyIH07IiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIHF1ZXVlID0gW107XG4vKipcbiAgVmFyaWFibGUgdG8gaG9sZCBhIGNvdW50aW5nIHNlbWFwaG9yZVxuICAtIEluY3JlbWVudGluZyBhZGRzIGEgbG9jayBhbmQgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgKGlmIGl0J3Mgbm90XG4gICAgYWxyZWFkeSBzdXNwZW5kZWQpXG4gIC0gRGVjcmVtZW50aW5nIHJlbGVhc2VzIGEgbG9jay4gWmVybyBsb2NrcyBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLiBUaGlzXG4gICAgdHJpZ2dlcnMgZmx1c2hpbmcgdGhlIHF1ZXVlZCB0YXNrcy5cbioqL1xudmFyIHNlbWFwaG9yZSA9IDA7XG5cbi8qKlxuICBFeGVjdXRlcyBhIHRhc2sgJ2F0b21pY2FsbHknLiBUYXNrcyBzY2hlZHVsZWQgZHVyaW5nIHRoaXMgZXhlY3V0aW9uIHdpbGwgYmUgcXVldWVkXG4gIGFuZCBmbHVzaGVkIGFmdGVyIHRoaXMgdGFzayBoYXMgZmluaXNoZWQgKGFzc3VtaW5nIHRoZSBzY2hlZHVsZXIgZW5kdXAgaW4gYSByZWxlYXNlZFxuICBzdGF0ZSkuXG4qKi9cbmZ1bmN0aW9uIGV4ZWModGFzaykge1xuICB0cnkge1xuICAgIHN1c3BlbmQoKTtcbiAgICB0YXNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG59XG5cbi8qKlxuICBFeGVjdXRlcyBvciBxdWV1ZXMgYSB0YXNrIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdGhlIHNjaGVkdWxlciAoYHN1c3BlbmRlZGAgb3IgYHJlbGVhc2VkYClcbioqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzYXAodGFzaykge1xuICBxdWV1ZS5wdXNoKHRhc2spO1xuXG4gIGlmICghc2VtYXBob3JlKSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIGZsdXNoKCk7XG4gIH1cbn1cblxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGBzdXNwZW5kZWRgIHN0YXRlLiBTY2hlZHVsZWQgdGFza3Mgd2lsbCBiZSBxdWV1ZWQgdW50aWwgdGhlXG4gIHNjaGVkdWxlciBpcyByZWxlYXNlZC5cbioqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1c3BlbmQoKSB7XG4gIHNlbWFwaG9yZSsrO1xufVxuXG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHJlbGVhc2VkYCBzdGF0ZS5cbioqL1xuZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgc2VtYXBob3JlLS07XG59XG5cbi8qKlxuICBSZWxlYXNlcyB0aGUgY3VycmVudCBsb2NrLiBFeGVjdXRlcyBhbGwgcXVldWVkIHRhc2tzIGlmIHRoZSBzY2hlZHVsZXIgaXMgaW4gdGhlIHJlbGVhc2VkIHN0YXRlLlxuKiovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2goKSB7XG4gIHJlbGVhc2UoKTtcblxuICB2YXIgdGFzayA9IHZvaWQgMDtcbiAgd2hpbGUgKCFzZW1hcGhvcmUgJiYgKHRhc2sgPSBxdWV1ZS5zaGlmdCgpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXhlYyh0YXNrKTtcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsImltcG9ydCB7IGNvbG9yIH0gZnJvbSAnZDMtY29sb3InXG5cbmV4cG9ydCBjb25zdCBjb2xvcnMgPSB7XG4gICAgb3JhbmdlOiBcInJnYigyNTUsIDEyNywgMTQpXCIsXG4gICAgYmx1ZTogXCJyZ2IoMzEsIDExOSwgMTgwKVwiLFxuICAgIGdyZWVuOiBcInJnYig0NCwgMTYwLCA0NClcIixcbiAgICByZWQ6IFwicmdiKDIxNCwgMzksIDQwKVwiLFxufVxuXG4vLyBleHBvcnQgY29uc3QgY29sb3JzID0ge1xuLy8gICAgIG9yYW5nZTogXCIjRkZDRTU2XCIsXG4vLyAgICAgYmx1ZTogXCIjMzZBMkVCXCIsXG4vLyAgICAgZ3JlZW46IFwiIzRCQzBDMFwiLFxuLy8gICAgIHJlZDogXCIjRkY2Mzg0XCIsXG4vLyB9XG5cbi8vIGV4cG9ydCBjb25zdCBjb2xvcnMgPSB7XG4vLyAgICAgb3JhbmdlOiBcIiNFMzkwMTJcIixcbi8vICAgICBibHVlOiBcIiMxQjYzRkZcIixcbi8vICAgICBncmVlbjogXCIjMjJBMTExXCIsXG4vLyAgICAgcmVkOiBcIiNBMTExNzFcIixcbi8vIH1cblxuZXhwb3J0IGNvbnN0IGl0ZW1zQ29sb3JzID0ge1xuICAgIGFwYXJ0bWVudHM6ICdvcmFuZ2UnLFxuICAgIGhvdXNlOiAnZ3JlZW4nLFxuICAgIG90aGVyOiAnYmx1ZScsXG4gICAgdW5rbm93bjogJ3JlZCdcbn1cblxuZXhwb3J0IGNvbnN0IGJyaWdodGVyQ29sb3IgPSAoaXRlbUNvbG9yLCBrID0gMSkgPT4gY29sb3IoaXRlbUNvbG9yKS5icmlnaHRlcihba10pLnRvU3RyaW5nKClcblxuZXhwb3J0IGNvbnN0IGdldENvbG9yID0gKGl0ZW1UeXBlKSA9PiAoXG4gICAgY29sb3JzW1xuICAgIGl0ZW1zQ29sb3JzW2l0ZW1UeXBlXVxuICAgIF1cbikiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfYXNzaWduMi5kZWZhdWx0IHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJjb25zdCBSRVFVRVNUID0gJ1JFUVVFU1QnXG5jb25zdCBTVUNDRVNTID0gJ1NVQ0NFU1MnXG5jb25zdCBGQUlMVVJFID0gJ0ZBSUxVUkUnXG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RUeXBlcyhiYXNlKSB7XG4gICAgcmV0dXJuIFtSRVFVRVNULCBTVUNDRVNTLCBGQUlMVVJFXS5yZWR1Y2UoKGFjYywgdHlwZSkgPT4ge1xuICAgICAgICBhY2NbdHlwZV0gPSBgJHtiYXNlfV8ke3R5cGV9YFxuICAgICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG59XG5cbmZ1bmN0aW9uIGFjdGlvbih0eXBlLCBwYXlsb2FkID0ge30pIHtcbiAgICByZXR1cm4geyB0eXBlLCAuLi5wYXlsb2FkIH1cbn1cblxuLyoqXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgTE9BRCBBUkVBIERBVEFcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuZXhwb3J0IGNvbnN0IExPQURfQVJFQV9EQVRBID0gJ0xPQURfQVJFQV9EQVRBJ1xuZXhwb3J0IGNvbnN0IGxvYWRBcmVhRGF0YSA9IChjb29yZGluYXRlcykgPT4gYWN0aW9uKExPQURfQVJFQV9EQVRBLCB7IGNvb3JkaW5hdGVzIH0pXG5leHBvcnQgY29uc3QgRkVUQ0hfQVJFQSA9IGNyZWF0ZVJlcXVlc3RUeXBlcygnRkVUQ0hfQVJFQScpXG5leHBvcnQgY29uc3QgYXJlYSA9IHtcbiAgICByZXF1ZXN0OiAoY29vcmRpbmF0ZXMpID0+IGFjdGlvbihGRVRDSF9BUkVBW1JFUVVFU1RdLCB7IGNvb3JkaW5hdGVzIH0pLFxuICAgIHN1Y2Nlc3M6IChmZWF0dXJlcykgPT4gYWN0aW9uKEZFVENIX0FSRUFbU1VDQ0VTU10sIHsgZmVhdHVyZXMgfSksXG4gICAgZmFpbHVyZTogKGVycm9yKSA9PiBhY3Rpb24oRkVUQ0hfQVJFQVtGQUlMVVJFXSwgeyBlcnJvciB9KVxufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCJleHBvcnQgY29uc3Qgc2V0RmVhdHVyZXNGaWx0ZXIgPSAoZmVhdHVyZSkgPT4gKHtcbiAgICB0eXBlOiAnU0VUX0ZFQVRVUkVTX0ZJTFRFUicsXG4gICAgZmVhdHVyZVxufSlcblxuZXhwb3J0IGNvbnN0IGNsZWFyRmlsdGVyID0gKCkgPT4gKHtcbiAgICB0eXBlOiAnQ0xFQVJfRkVBVFVSRVNfRklMVEVSJ1xufSkiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBjYWxsLCBwdXQsIHRha2UsIGFsbCwgZm9yaywgdGFrZUV2ZXJ5LCB0YWtlTGF0ZXN0IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJ1xuXG5pbXBvcnQgeyBhcGkgfSBmcm9tICcuL2FwaSdcbmltcG9ydCB7IGFyZWEgfSBmcm9tICcuL2FjdGlvbnMnXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucydcbmltcG9ydCB7IGNsZWFyRmlsdGVyIH0gZnJvbSAnLi9hY3Rpb25zL2ZpbHRlcnMnXG5cbmZ1bmN0aW9uKiBsb2FkQXJlYSh7IGNvb3JkaW5hdGVzIH0pIHtcbiAgICB0cnkge1xuICAgICAgICB5aWVsZCBwdXQoYXJlYS5yZXF1ZXN0KGNvb3JkaW5hdGVzKSlcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKGFwaS5mZXRjaEFyZWEsIGNvb3JkaW5hdGVzKVxuICAgICAgICB5aWVsZCBwdXQoYXJlYS5zdWNjZXNzKHJlc3BvbnNlLmRhdGEpKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHlpZWxkIHB1dChhcmVhLmZhaWx1cmUoZXJyb3IpKVxuICAgIH1cbn1cblxuZnVuY3Rpb24qIGNsZWFyRmlsdGVycygpIHtcbiAgICB5aWVsZCBwdXQoY2xlYXJGaWx0ZXIpXG59XG5cbmZ1bmN0aW9uKiB3YXRjaEFMb2FkQXJlYSgpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAvLyB5aWVsZCBjYWxsKGNsZWFyRmlsdGVycylcbiAgICAgICAgY29uc3QgeyBjb29yZGluYXRlcyB9ID0geWllbGQgdGFrZShhY3Rpb25zLkxPQURfQVJFQV9EQVRBKVxuICAgICAgICB5aWVsZCBjYWxsKGxvYWRBcmVhLCB7IGNvb3JkaW5hdGVzIH0pXG4gICAgfVxuICAgIC8vIHlpZWxkIHRha2VMYXRlc3QoYWN0aW9ucy5MT0FEX0FSRUFfREFUQSwgbG9hZEFyZWEpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiByb290KCkge1xuICAgIHlpZWxkIGFsbChbXG4gICAgICAgIGZvcmsod2F0Y2hBTG9hZEFyZWEpXG4gICAgXSlcbn0iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaiwgZGVzY3MpIHsgZm9yICh2YXIga2V5IGluIGRlc2NzKSB7IHZhciBkZXNjID0gZGVzY3Nba2V5XTsgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIGRlc2Mud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIGRlc2MpOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgbm9vcCwga1RydWUsIGlzLCBsb2cgYXMgX2xvZywgY2hlY2ssIGRlZmVycmVkLCB1aWQgYXMgbmV4dEVmZmVjdElkLCBhcnJheSwgcmVtb3ZlLCBvYmplY3QsIFRBU0ssIENBTkNFTCwgU0VMRl9DQU5DRUxMQVRJT04sIG1ha2VJdGVyYXRvciwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcsIGRlcHJlY2F0ZSwgdXBkYXRlSW5jZW50aXZlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBhc2FwLCBzdXNwZW5kLCBmbHVzaCB9IGZyb20gJy4vc2NoZWR1bGVyJztcbmltcG9ydCB7IGFzRWZmZWN0IH0gZnJvbSAnLi9pbyc7XG5pbXBvcnQgeyBzdGRDaGFubmVsIGFzIF9zdGRDaGFubmVsLCBldmVudENoYW5uZWwsIGlzRW5kIH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuXG5leHBvcnQgdmFyIE5PVF9JVEVSQVRPUl9FUlJPUiA9ICdwcm9jIGZpcnN0IGFyZ3VtZW50IChTYWdhIGZ1bmN0aW9uIHJlc3VsdCkgbXVzdCBiZSBhbiBpdGVyYXRvcic7XG5cbmV4cG9ydCB2YXIgQ0hBTk5FTF9FTkQgPSB7XG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0BAcmVkdXgtc2FnYS9DSEFOTkVMX0VORCc7XG4gIH1cbn07XG5leHBvcnQgdmFyIFRBU0tfQ0FOQ0VMID0ge1xuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvVEFTS19DQU5DRUwnO1xuICB9XG59O1xuXG52YXIgbWF0Y2hlcnMgPSB7XG4gIHdpbGRjYXJkOiBmdW5jdGlvbiB3aWxkY2FyZCgpIHtcbiAgICByZXR1cm4ga1RydWU7XG4gIH0sXG4gIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KHBhdHRlcm4pIHtcbiAgICByZXR1cm4gKHR5cGVvZiBwYXR0ZXJuID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXR0ZXJuKSkgPT09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gcGF0dGVybjtcbiAgICB9IDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gU3RyaW5nKHBhdHRlcm4pO1xuICAgIH07XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbiBhcnJheShwYXR0ZXJucykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJucy5zb21lKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVyKHApKGlucHV0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sXG4gIHByZWRpY2F0ZTogZnVuY3Rpb24gcHJlZGljYXRlKF9wcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gX3ByZWRpY2F0ZShpbnB1dCk7XG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWF0Y2hlcihwYXR0ZXJuKSB7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICByZXR1cm4gKHBhdHRlcm4gPT09ICcqJyA/IG1hdGNoZXJzLndpbGRjYXJkIDogaXMuYXJyYXkocGF0dGVybikgPyBtYXRjaGVycy5hcnJheSA6IGlzLnN0cmluZ2FibGVGdW5jKHBhdHRlcm4pID8gbWF0Y2hlcnMuZGVmYXVsdCA6IGlzLmZ1bmMocGF0dGVybikgPyBtYXRjaGVycy5wcmVkaWNhdGUgOiBtYXRjaGVycy5kZWZhdWx0KShwYXR0ZXJuKTtcbn1cblxuLyoqXG4gIFVzZWQgdG8gdHJhY2sgYSBwYXJlbnQgdGFzayBhbmQgaXRzIGZvcmtzXG4gIEluIHRoZSBuZXcgZm9yayBtb2RlbCwgZm9ya2VkIHRhc2tzIGFyZSBhdHRhY2hlZCBieSBkZWZhdWx0IHRvIHRoZWlyIHBhcmVudFxuICBXZSBtb2RlbCB0aGlzIHVzaW5nIHRoZSBjb25jZXB0IG9mIFBhcmVudCB0YXNrICYmIG1haW4gVGFza1xuICBtYWluIHRhc2sgaXMgdGhlIG1haW4gZmxvdyBvZiB0aGUgY3VycmVudCBHZW5lcmF0b3IsIHRoZSBwYXJlbnQgdGFza3MgaXMgdGhlXG4gIGFnZ3JlZ2F0aW9uIG9mIHRoZSBtYWluIHRhc2tzICsgYWxsIGl0cyBmb3JrZWQgdGFza3MuXG4gIFRodXMgdGhlIHdob2xlIG1vZGVsIHJlcHJlc2VudHMgYW4gZXhlY3V0aW9uIHRyZWUgd2l0aCBtdWx0aXBsZSBicmFuY2hlcyAodnMgdGhlXG4gIGxpbmVhciBleGVjdXRpb24gdHJlZSBpbiBzZXF1ZW50aWFsIChub24gcGFyYWxsZWwpIHByb2dyYW1taW5nKVxuXG4gIEEgcGFyZW50IHRhc2tzIGhhcyB0aGUgZm9sbG93aW5nIHNlbWFudGljc1xuICAtIEl0IGNvbXBsZXRlcyBpZiBhbGwgaXRzIGZvcmtzIGVpdGhlciBjb21wbGV0ZSBvciBhbGwgY2FuY2VsbGVkXG4gIC0gSWYgaXQncyBjYW5jZWxsZWQsIGFsbCBmb3JrcyBhcmUgY2FuY2VsbGVkIGFzIHdlbGxcbiAgLSBJdCBhYm9ydHMgaWYgYW55IHVuY2F1Z2h0IGVycm9yIGJ1YmJsZXMgdXAgZnJvbSBmb3Jrc1xuICAtIElmIGl0IGNvbXBsZXRlcywgdGhlIHJldHVybiB2YWx1ZSBpcyB0aGUgb25lIHJldHVybmVkIGJ5IHRoZSBtYWluIHRhc2tcbioqL1xuZnVuY3Rpb24gZm9ya1F1ZXVlKG5hbWUsIG1haW5UYXNrLCBjYikge1xuICB2YXIgdGFza3MgPSBbXSxcbiAgICAgIHJlc3VsdCA9IHZvaWQgMCxcbiAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICBhZGRUYXNrKG1haW5UYXNrKTtcblxuICBmdW5jdGlvbiBhYm9ydChlcnIpIHtcbiAgICBjYW5jZWxBbGwoKTtcbiAgICBjYihlcnIsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkVGFzayh0YXNrKSB7XG4gICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICB0YXNrLmNvbnQgPSBmdW5jdGlvbiAocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZSh0YXNrcywgdGFzayk7XG4gICAgICB0YXNrLmNvbnQgPSBub29wO1xuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIGFib3J0KHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFzayA9PT0gbWFpblRhc2spIHtcbiAgICAgICAgICByZXN1bHQgPSByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIHRhc2suY29udC5jYW5jZWwgPSB0YXNrLmNhbmNlbFxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWxsKCkge1xuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICB0LmNvbnQgPSBub29wO1xuICAgICAgdC5jYW5jZWwoKTtcbiAgICB9KTtcbiAgICB0YXNrcyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRUYXNrOiBhZGRUYXNrLFxuICAgIGNhbmNlbEFsbDogY2FuY2VsQWxsLFxuICAgIGFib3J0OiBhYm9ydCxcbiAgICBnZXRUYXNrczogZnVuY3Rpb24gZ2V0VGFza3MoKSB7XG4gICAgICByZXR1cm4gdGFza3M7XG4gICAgfSxcbiAgICB0YXNrTmFtZXM6IGZ1bmN0aW9uIHRhc2tOYW1lcygpIHtcbiAgICAgIHJldHVybiB0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQubmFtZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0l0ZXJhdG9yKF9yZWYpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBmbiA9IF9yZWYuZm4sXG4gICAgICBhcmdzID0gX3JlZi5hcmdzO1xuXG4gIGlmIChpcy5pdGVyYXRvcihmbikpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTIgYW5kICM0NDFcbiAgdmFyIHJlc3VsdCA9IHZvaWQgMCxcbiAgICAgIGVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVycjtcbiAgfVxuXG4gIC8vIGkuZS4gYSBnZW5lcmF0b3IgZnVuY3Rpb24gcmV0dXJucyBhbiBpdGVyYXRvclxuICBpZiAoaXMuaXRlcmF0b3IocmVzdWx0KSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBkbyBub3QgYnViYmxlIHVwIHN5bmNocm9ub3VzIGZhaWx1cmVzIGZvciBkZXRhY2hlZCBmb3Jrc1xuICAvLyBpbnN0ZWFkIGNyZWF0ZSBhIGZhaWxlZCB0YXNrLiBTZWUgIzE1MiBhbmQgIzQ0MVxuICByZXR1cm4gZXJyb3IgPyBtYWtlSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KSA6IG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBjID0gdm9pZCAwO1xuICAgIHZhciBlZmYgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcmVzdWx0IH07XG4gICAgdmFyIHJldCA9IGZ1bmN0aW9uIHJldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH07XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgaWYgKCFwYykge1xuICAgICAgICBwYyA9IHRydWU7XG4gICAgICAgIHJldHVybiBlZmY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmV0KGFyZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSgpKTtcbn1cblxudmFyIHdyYXBIZWxwZXIgPSBmdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlcikge1xuICByZXR1cm4geyBmbjogaGVscGVyIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9jKGl0ZXJhdG9yKSB7XG4gIHZhciBzdWJzY3JpYmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm9vcDtcbiAgfTtcbiAgdmFyIGRpc3BhdGNoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBub29wO1xuICB2YXIgZ2V0U3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5vb3A7XG4gIHZhciBwYXJlbnRDb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7fTtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IHt9O1xuICB2YXIgcGFyZW50RWZmZWN0SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IDA7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiAnYW5vbnltb3VzJztcbiAgdmFyIGNvbnQgPSBhcmd1bWVudHNbOF07XG5cbiAgY2hlY2soaXRlcmF0b3IsIGlzLml0ZXJhdG9yLCBOT1RfSVRFUkFUT1JfRVJST1IpO1xuXG4gIHZhciBlZmZlY3RzU3RyaW5nID0gJ1suLi5lZmZlY3RzXSc7XG4gIHZhciBydW5QYXJhbGxlbEVmZmVjdCA9IGRlcHJlY2F0ZShydW5BbGxFZmZlY3QsIHVwZGF0ZUluY2VudGl2ZShlZmZlY3RzU3RyaW5nLCAnYWxsKCcgKyBlZmZlY3RzU3RyaW5nICsgJyknKSk7XG5cbiAgdmFyIHNhZ2FNb25pdG9yID0gb3B0aW9ucy5zYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyLFxuICAgICAgb25FcnJvciA9IG9wdGlvbnMub25FcnJvcjtcblxuICB2YXIgbG9nID0gbG9nZ2VyIHx8IF9sb2c7XG4gIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uIGxvZ0Vycm9yKGVycikge1xuICAgIHZhciBtZXNzYWdlID0gZXJyLnNhZ2FTdGFjaztcblxuICAgIGlmICghbWVzc2FnZSAmJiBlcnIuc3RhY2spIHtcbiAgICAgIG1lc3NhZ2UgPSBlcnIuc3RhY2suc3BsaXQoJ1xcbicpWzBdLmluZGV4T2YoZXJyLm1lc3NhZ2UpICE9PSAtMSA/IGVyci5zdGFjayA6ICdFcnJvcjogJyArIGVyci5tZXNzYWdlICsgJ1xcbicgKyBlcnIuc3RhY2s7XG4gICAgfVxuXG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCAnICsgbmFtZSwgbWVzc2FnZSB8fCBlcnIubWVzc2FnZSB8fCBlcnIpO1xuICB9O1xuICB2YXIgc3RkQ2hhbm5lbCA9IF9zdGRDaGFubmVsKHN1YnNjcmliZSk7XG4gIHZhciB0YXNrQ29udGV4dCA9IE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCk7XG4gIC8qKlxuICAgIFRyYWNrcyB0aGUgY3VycmVudCBlZmZlY3QgY2FuY2VsbGF0aW9uXG4gICAgRWFjaCB0aW1lIHRoZSBnZW5lcmF0b3IgcHJvZ3Jlc3Nlcy4gY2FsbGluZyBydW5FZmZlY3Qgd2lsbCBzZXQgYSBuZXcgdmFsdWVcbiAgICBvbiBpdC4gSXQgYWxsb3dzIHByb3BhZ2F0aW5nIGNhbmNlbGxhdGlvbiB0byBjaGlsZCBlZmZlY3RzXG4gICoqL1xuICBuZXh0LmNhbmNlbCA9IG5vb3A7XG5cbiAgLyoqXG4gICAgQ3JlYXRlcyBhIG5ldyB0YXNrIGRlc2NyaXB0b3IgZm9yIHRoaXMgZ2VuZXJhdG9yLCBXZSdsbCBhbHNvIGNyZWF0ZSBhIG1haW4gdGFza1xuICAgIHRvIHRyYWNrIHRoZSBtYWluIGZsb3cgKGJlc2lkZXMgb3RoZXIgZm9ya2VkIHRhc2tzKVxuICAqKi9cbiAgdmFyIHRhc2sgPSBuZXdUYXNrKHBhcmVudEVmZmVjdElkLCBuYW1lLCBpdGVyYXRvciwgY29udCk7XG4gIHZhciBtYWluVGFzayA9IHsgbmFtZTogbmFtZSwgY2FuY2VsOiBjYW5jZWxNYWluLCBpc1J1bm5pbmc6IHRydWUgfTtcbiAgdmFyIHRhc2tRdWV1ZSA9IGZvcmtRdWV1ZShuYW1lLCBtYWluVGFzaywgZW5kKTtcblxuICAvKipcbiAgICBjYW5jZWxsYXRpb24gb2YgdGhlIG1haW4gdGFzay4gV2UnbGwgc2ltcGx5IHJlc3VtZSB0aGUgR2VuZXJhdG9yIHdpdGggYSBDYW5jZWxcbiAgKiovXG4gIGZ1bmN0aW9uIGNhbmNlbE1haW4oKSB7XG4gICAgaWYgKG1haW5UYXNrLmlzUnVubmluZyAmJiAhbWFpblRhc2suaXNDYW5jZWxsZWQpIHtcbiAgICAgIG1haW5UYXNrLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgIG5leHQoVEFTS19DQU5DRUwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgIFRoaXMgbWF5IGJlIGNhbGxlZCBieSBhIHBhcmVudCBnZW5lcmF0b3IgdG8gdHJpZ2dlci9wcm9wYWdhdGUgY2FuY2VsbGF0aW9uXG4gICAgY2FuY2VsIGFsbCBwZW5kaW5nIHRhc2tzIChpbmNsdWRpbmcgdGhlIG1haW4gdGFzayksIHRoZW4gZW5kIHRoZSBjdXJyZW50IHRhc2suXG4gICAgIENhbmNlbGxhdGlvbiBwcm9wYWdhdGVzIGRvd24gdG8gdGhlIHdob2xlIGV4ZWN1dGlvbiB0cmVlIGhvbGRlZCBieSB0aGlzIFBhcmVudCB0YXNrXG4gICAgSXQncyBhbHNvIHByb3BhZ2F0ZWQgdG8gYWxsIGpvaW5lcnMgb2YgdGhpcyB0YXNrIGFuZCB0aGVpciBleGVjdXRpb24gdHJlZS9qb2luZXJzXG4gICAgIENhbmNlbGxhdGlvbiBpcyBub29wIGZvciB0ZXJtaW5hdGVkL0NhbmNlbGxlZCB0YXNrcyB0YXNrc1xuICAqKi9cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIC8qKlxuICAgICAgV2UgbmVlZCB0byBjaGVjayBib3RoIFJ1bm5pbmcgYW5kIENhbmNlbGxlZCBzdGF0dXNcbiAgICAgIFRhc2tzIGNhbiBiZSBDYW5jZWxsZWQgYnV0IHN0aWxsIFJ1bm5pbmdcbiAgICAqKi9cbiAgICBpZiAoaXRlcmF0b3IuX2lzUnVubmluZyAmJiAhaXRlcmF0b3IuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICBpdGVyYXRvci5faXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgdGFza1F1ZXVlLmNhbmNlbEFsbCgpO1xuICAgICAgLyoqXG4gICAgICAgIEVuZGluZyB3aXRoIGEgTmV2ZXIgcmVzdWx0IHdpbGwgcHJvcGFnYXRlIHRoZSBDYW5jZWxsYXRpb24gdG8gYWxsIGpvaW5lcnNcbiAgICAgICoqL1xuICAgICAgZW5kKFRBU0tfQ0FOQ0VMKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAgYXR0YWNoZXMgY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHRoaXMgdGFzaydzIGNvbnRpbnVhdGlvblxuICAgIHRoaXMgd2lsbCBwZXJtaXQgY2FuY2VsbGF0aW9uIHRvIHByb3BhZ2F0ZSBkb3duIHRoZSBjYWxsIGNoYWluXG4gICoqL1xuICBjb250ICYmIChjb250LmNhbmNlbCA9IGNhbmNlbCk7XG5cbiAgLy8gdHJhY2tzIHRoZSBydW5uaW5nIHN0YXR1c1xuICBpdGVyYXRvci5faXNSdW5uaW5nID0gdHJ1ZTtcblxuICAvLyBraWNrcyB1cCB0aGUgZ2VuZXJhdG9yXG4gIG5leHQoKTtcblxuICAvLyB0aGVuIHJldHVybiB0aGUgdGFzayBkZXNjcmlwdG9yIHRvIHRoZSBjYWxsZXJcbiAgcmV0dXJuIHRhc2s7XG5cbiAgLyoqXG4gICAgVGhpcyBpcyB0aGUgZ2VuZXJhdG9yIGRyaXZlclxuICAgIEl0J3MgYSByZWN1cnNpdmUgYXN5bmMvY29udGludWF0aW9uIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGl0c2VsZlxuICAgIHVudGlsIHRoZSBnZW5lcmF0b3IgdGVybWluYXRlcyBvciB0aHJvd3NcbiAgKiovXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBpc0Vycikge1xuICAgIC8vIFByZXZlbnRpdmUgbWVhc3VyZS4gSWYgd2UgZW5kIHVwIGhlcmUsIHRoZW4gdGhlcmUgaXMgcmVhbGx5IHNvbWV0aGluZyB3cm9uZ1xuICAgIGlmICghbWFpblRhc2suaXNSdW5uaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byByZXN1bWUgYW4gYWxyZWFkeSBmaW5pc2hlZCBnZW5lcmF0b3InKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIGlmIChpc0Vycikge1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci50aHJvdyhhcmcpO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIGdldHRpbmcgVEFTS19DQU5DRUwgYXV0b21hdGljYWxseSBjYW5jZWxzIHRoZSBtYWluIHRhc2tcbiAgICAgICAgICBXZSBjYW4gZ2V0IHRoaXMgdmFsdWUgaGVyZVxuICAgICAgICAgICAtIEJ5IGNhbmNlbGxpbmcgdGhlIHBhcmVudCB0YXNrIG1hbnVhbGx5XG4gICAgICAgICAgLSBCeSBqb2luaW5nIGEgQ2FuY2VsbGVkIHRhc2tcbiAgICAgICAgKiovXG4gICAgICAgIG1haW5UYXNrLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAgQ2FuY2VscyB0aGUgY3VycmVudCBlZmZlY3Q7IHRoaXMgd2lsbCBwcm9wYWdhdGUgdGhlIGNhbmNlbGxhdGlvbiBkb3duIHRvIGFueSBjYWxsZWQgdGFza3NcbiAgICAgICAgKiovXG4gICAgICAgIG5leHQuY2FuY2VsKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgIElmIHRoaXMgR2VuZXJhdG9yIGhhcyBhIGByZXR1cm5gIG1ldGhvZCB0aGVuIGludm9rZXMgaXRcbiAgICAgICAgICBUaGlzIHdpbGwganVtcCB0byB0aGUgZmluYWxseSBibG9ja1xuICAgICAgICAqKi9cbiAgICAgICAgcmVzdWx0ID0gaXMuZnVuYyhpdGVyYXRvci5yZXR1cm4pID8gaXRlcmF0b3IucmV0dXJuKFRBU0tfQ0FOQ0VMKSA6IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IFRBU0tfQ0FOQ0VMIH07XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PT0gQ0hBTk5FTF9FTkQpIHtcbiAgICAgICAgLy8gV2UgZ2V0IENIQU5ORUxfRU5EIGJ5IHRha2luZyBmcm9tIGEgY2hhbm5lbCB0aGF0IGVuZGVkIHVzaW5nIGB0YWtlYCAoYW5kIG5vdCBgdGFrZW1gIHVzZWQgdG8gdHJhcCBFbmQgb2YgY2hhbm5lbHMpXG4gICAgICAgIHJlc3VsdCA9IGlzLmZ1bmMoaXRlcmF0b3IucmV0dXJuKSA/IGl0ZXJhdG9yLnJldHVybigpIDogeyBkb25lOiB0cnVlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KGFyZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcnVuRWZmZWN0KHJlc3VsdC52YWx1ZSwgcGFyZW50RWZmZWN0SWQsICcnLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIFRoaXMgR2VuZXJhdG9yIGhhcyBlbmRlZCwgdGVybWluYXRlIHRoZSBtYWluIHRhc2sgYW5kIG5vdGlmeSB0aGUgZm9yayBxdWV1ZVxuICAgICAgICAqKi9cbiAgICAgICAgbWFpblRhc2suaXNNYWluUnVubmluZyA9IGZhbHNlO1xuICAgICAgICBtYWluVGFzay5jb250ICYmIG1haW5UYXNrLmNvbnQocmVzdWx0LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKG1haW5UYXNrLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgIGxvZ0Vycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIG1haW5UYXNrLmlzTWFpblJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIG1haW5UYXNrLmNvbnQoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChyZXN1bHQsIGlzRXJyKSB7XG4gICAgaXRlcmF0b3IuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgIHN0ZENoYW5uZWwuY2xvc2UoKTtcbiAgICBpZiAoIWlzRXJyKSB7XG4gICAgICBpdGVyYXRvci5fcmVzdWx0ID0gcmVzdWx0O1xuICAgICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kICYmIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCAnc2FnYVN0YWNrJywge1xuICAgICAgICAgIHZhbHVlOiAnYXQgJyArIG5hbWUgKyAnIFxcbiAnICsgKHJlc3VsdC5zYWdhU3RhY2sgfHwgcmVzdWx0LnN0YWNrKSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRhc2suY29udCkge1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IgJiYgb25FcnJvcikge1xuICAgICAgICAgIG9uRXJyb3IocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dFcnJvcihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpdGVyYXRvci5fZXJyb3IgPSByZXN1bHQ7XG4gICAgICBpdGVyYXRvci5faXNBYm9ydGVkID0gdHJ1ZTtcbiAgICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCAmJiBpdGVyYXRvci5fZGVmZXJyZWRFbmQucmVqZWN0KHJlc3VsdCk7XG4gICAgfVxuICAgIHRhc2suY29udCAmJiB0YXNrLmNvbnQocmVzdWx0LCBpc0Vycik7XG4gICAgdGFzay5qb2luZXJzLmZvckVhY2goZnVuY3Rpb24gKGopIHtcbiAgICAgIHJldHVybiBqLmNiKHJlc3VsdCwgaXNFcnIpO1xuICAgIH0pO1xuICAgIHRhc2suam9pbmVycyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBydW5FZmZlY3QoZWZmZWN0LCBwYXJlbnRFZmZlY3RJZCkge1xuICAgIHZhciBsYWJlbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gICAgdmFyIGNiID0gYXJndW1lbnRzWzNdO1xuXG4gICAgdmFyIGVmZmVjdElkID0gbmV4dEVmZmVjdElkKCk7XG4gICAgc2FnYU1vbml0b3IgJiYgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkKHsgZWZmZWN0SWQ6IGVmZmVjdElkLCBwYXJlbnRFZmZlY3RJZDogcGFyZW50RWZmZWN0SWQsIGxhYmVsOiBsYWJlbCwgZWZmZWN0OiBlZmZlY3QgfSk7XG5cbiAgICAvKipcbiAgICAgIGNvbXBsZXRpb24gY2FsbGJhY2sgYW5kIGNhbmNlbCBjYWxsYmFjayBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAgICBXZSBjYW4ndCBjYW5jZWwgYW4gYWxyZWFkeSBjb21wbGV0ZWQgZWZmZWN0XG4gICAgICBBbmQgV2UgY2FuJ3QgY29tcGxldGUgYW4gYWxyZWFkeSBjYW5jZWxsZWQgZWZmZWN0SWRcbiAgICAqKi9cbiAgICB2YXIgZWZmZWN0U2V0dGxlZCA9IHZvaWQgMDtcblxuICAgIC8vIENvbXBsZXRpb24gY2FsbGJhY2sgcGFzc2VkIHRvIHRoZSBhcHByb3ByaWF0ZSBlZmZlY3QgcnVubmVyXG4gICAgZnVuY3Rpb24gY3VyckNiKHJlcywgaXNFcnIpIHtcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICBjYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuICAgICAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgICAgIGlzRXJyID8gc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQoZWZmZWN0SWQsIHJlcykgOiBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZChlZmZlY3RJZCwgcmVzKTtcbiAgICAgIH1cbiAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgIH1cbiAgICAvLyB0cmFja3MgZG93biB0aGUgY3VycmVudCBjYW5jZWxcbiAgICBjdXJyQ2IuY2FuY2VsID0gbm9vcDtcblxuICAgIC8vIHNldHVwIGNhbmNlbGxhdGlvbiBsb2dpYyBvbiB0aGUgcGFyZW50IGNiXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJldmVudHMgY2FuY2VsbGluZyBhbiBhbHJlYWR5IGNvbXBsZXRlZCBlZmZlY3RcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICAvKipcbiAgICAgICAgcHJvcGFnYXRlcyBjYW5jZWwgZG93bndhcmRcbiAgICAgICAgY2F0Y2ggdW5jYXVnaHQgY2FuY2VsbGF0aW9ucyBlcnJvcnM7IHNpbmNlIHdlIGNhbiBubyBsb25nZXIgY2FsbCB0aGUgY29tcGxldGlvblxuICAgICAgICBjYWxsYmFjaywgbG9nIGVycm9ycyByYWlzZWQgZHVyaW5nIGNhbmNlbGxhdGlvbnMgaW50byB0aGUgY29uc29sZVxuICAgICAgKiovXG4gICAgICB0cnkge1xuICAgICAgICBjdXJyQ2IuY2FuY2VsKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIGN1cnJDYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuXG4gICAgICBzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQoZWZmZWN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgIGVhY2ggZWZmZWN0IHJ1bm5lciBtdXN0IGF0dGFjaCBpdHMgb3duIGxvZ2ljIG9mIGNhbmNlbGxhdGlvbiB0byB0aGUgcHJvdmlkZWQgY2FsbGJhY2tcbiAgICAgIGl0IGFsbG93cyB0aGlzIGdlbmVyYXRvciB0byBwcm9wYWdhdGUgY2FuY2VsbGF0aW9uIGRvd253YXJkLlxuICAgICAgIEFUVEVOVElPTiEgZWZmZWN0IHJ1bm5lcnMgbXVzdCBzZXR1cCB0aGUgY2FuY2VsIGxvZ2ljIGJ5IHNldHRpbmcgY2IuY2FuY2VsID0gW2NhbmNlbE1ldGhvZF1cbiAgICAgIEFuZCB0aGUgc2V0dXAgbXVzdCBvY2N1ciBiZWZvcmUgY2FsbGluZyB0aGUgY2FsbGJhY2tcbiAgICAgICBUaGlzIGlzIGEgc29ydCBvZiBpbnZlcnNpb24gb2YgY29udHJvbDogY2FsbGVkIGFzeW5jIGZ1bmN0aW9ucyBhcmUgcmVzcG9uc2libGVcbiAgICAgIGZvciBjb21wbGV0aW5nIHRoZSBmbG93IGJ5IGNhbGxpbmcgdGhlIHByb3ZpZGVkIGNvbnRpbnVhdGlvbjsgd2hpbGUgY2FsbGVyIGZ1bmN0aW9uc1xuICAgICAgYXJlIHJlc3BvbnNpYmxlIGZvciBhYm9ydGluZyB0aGUgY3VycmVudCBmbG93IGJ5IGNhbGxpbmcgdGhlIGF0dGFjaGVkIGNhbmNlbCBmdW5jdGlvblxuICAgICAgIExpYnJhcnkgdXNlcnMgY2FuIGF0dGFjaCB0aGVpciBvd24gY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHByb21pc2VzIGJ5IGRlZmluaW5nIGFcbiAgICAgIHByb21pc2VbQ0FOQ0VMXSBtZXRob2QgaW4gdGhlaXIgcmV0dXJuZWQgcHJvbWlzZXNcbiAgICAgIEFUVEVOVElPTiEgY2FsbGluZyBjYW5jZWwgbXVzdCBoYXZlIG5vIGVmZmVjdCBvbiBhbiBhbHJlYWR5IGNvbXBsZXRlZCBvciBjYW5jZWxsZWQgZWZmZWN0XG4gICAgKiovXG4gICAgdmFyIGRhdGEgPSB2b2lkIDA7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIE5vbiBkZWNsYXJhdGl2ZSBlZmZlY3RcbiAgICAgIGlzLnByb21pc2UoZWZmZWN0KSA/IHJlc29sdmVQcm9taXNlKGVmZmVjdCwgY3VyckNiKSA6IGlzLmhlbHBlcihlZmZlY3QpID8gcnVuRm9ya0VmZmVjdCh3cmFwSGVscGVyKGVmZmVjdCksIGVmZmVjdElkLCBjdXJyQ2IpIDogaXMuaXRlcmF0b3IoZWZmZWN0KSA/IHJlc29sdmVJdGVyYXRvcihlZmZlY3QsIGVmZmVjdElkLCBuYW1lLCBjdXJyQ2IpXG5cbiAgICAgIC8vIGRlY2xhcmF0aXZlIGVmZmVjdHNcbiAgICAgIDogaXMuYXJyYXkoZWZmZWN0KSA/IHJ1blBhcmFsbGVsRWZmZWN0KGVmZmVjdCwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnRha2UoZWZmZWN0KSkgPyBydW5UYWtlRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnB1dChlZmZlY3QpKSA/IHJ1blB1dEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5hbGwoZWZmZWN0KSkgPyBydW5BbGxFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnJhY2UoZWZmZWN0KSkgPyBydW5SYWNlRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYWxsKGVmZmVjdCkpID8gcnVuQ2FsbEVmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY3BzKGVmZmVjdCkpID8gcnVuQ1BTRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmZvcmsoZWZmZWN0KSkgPyBydW5Gb3JrRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5qb2luKGVmZmVjdCkpID8gcnVuSm9pbkVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYW5jZWwoZWZmZWN0KSkgPyBydW5DYW5jZWxFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3Quc2VsZWN0KGVmZmVjdCkpID8gcnVuU2VsZWN0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmFjdGlvbkNoYW5uZWwoZWZmZWN0KSkgPyBydW5DaGFubmVsRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmZsdXNoKGVmZmVjdCkpID8gcnVuRmx1c2hFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY2FuY2VsbGVkKGVmZmVjdCkpID8gcnVuQ2FuY2VsbGVkRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmdldENvbnRleHQoZWZmZWN0KSkgPyBydW5HZXRDb250ZXh0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnNldENvbnRleHQoZWZmZWN0KSkgPyBydW5TZXRDb250ZXh0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAvKiBhbnl0aGluZyBlbHNlIHJldHVybmVkIGFzIGlzICovY3VyckNiKGVmZmVjdClcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgY2IpIHtcbiAgICB2YXIgY2FuY2VsUHJvbWlzZSA9IHByb21pc2VbQ0FOQ0VMXTtcbiAgICBpZiAoaXMuZnVuYyhjYW5jZWxQcm9taXNlKSkge1xuICAgICAgY2IuY2FuY2VsID0gY2FuY2VsUHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKGlzLmZ1bmMocHJvbWlzZS5hYm9ydCkpIHtcbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuYWJvcnQoKTtcbiAgICAgIH07XG4gICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgdGhlIGZldGNoIEFQSSwgd2hlbmV2ZXIgdGhleSBnZXQgYXJvdW5kIHRvXG4gICAgICAvLyBhZGRpbmcgY2FuY2VsIHN1cHBvcnRcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKGNiLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlSXRlcmF0b3IoaXRlcmF0b3IsIGVmZmVjdElkLCBuYW1lLCBjYikge1xuICAgIHByb2MoaXRlcmF0b3IsIHN1YnNjcmliZSwgZGlzcGF0Y2gsIGdldFN0YXRlLCB0YXNrQ29udGV4dCwgb3B0aW9ucywgZWZmZWN0SWQsIG5hbWUsIGNiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blRha2VFZmZlY3QoX3JlZjIsIGNiKSB7XG4gICAgdmFyIGNoYW5uZWwgPSBfcmVmMi5jaGFubmVsLFxuICAgICAgICBwYXR0ZXJuID0gX3JlZjIucGF0dGVybixcbiAgICAgICAgbWF5YmUgPSBfcmVmMi5tYXliZTtcblxuICAgIGNoYW5uZWwgPSBjaGFubmVsIHx8IHN0ZENoYW5uZWw7XG4gICAgdmFyIHRha2VDYiA9IGZ1bmN0aW9uIHRha2VDYihpbnApIHtcbiAgICAgIHJldHVybiBpbnAgaW5zdGFuY2VvZiBFcnJvciA/IGNiKGlucCwgdHJ1ZSkgOiBpc0VuZChpbnApICYmICFtYXliZSA/IGNiKENIQU5ORUxfRU5EKSA6IGNiKGlucCk7XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgY2hhbm5lbC50YWtlKHRha2VDYiwgbWF0Y2hlcihwYXR0ZXJuKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyLCB0cnVlKTtcbiAgICB9XG4gICAgY2IuY2FuY2VsID0gdGFrZUNiLmNhbmNlbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blB1dEVmZmVjdChfcmVmMywgY2IpIHtcbiAgICB2YXIgY2hhbm5lbCA9IF9yZWYzLmNoYW5uZWwsXG4gICAgICAgIGFjdGlvbiA9IF9yZWYzLmFjdGlvbixcbiAgICAgICAgcmVzb2x2ZSA9IF9yZWYzLnJlc29sdmU7XG5cbiAgICAvKipcbiAgICAgIFNjaGVkdWxlIHRoZSBwdXQgaW4gY2FzZSBhbm90aGVyIHNhZ2EgaXMgaG9sZGluZyBhIGxvY2suXG4gICAgICBUaGUgcHV0IHdpbGwgYmUgZXhlY3V0ZWQgYXRvbWljYWxseS4gaWUgbmVzdGVkIHB1dHMgd2lsbCBleGVjdXRlIGFmdGVyXG4gICAgICB0aGlzIHB1dCBoYXMgdGVybWluYXRlZC5cbiAgICAqKi9cbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSAoY2hhbm5lbCA/IGNoYW5uZWwucHV0IDogZGlzcGF0Y2gpKGFjdGlvbik7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgY2hhbm5lbCBvciBgcHV0LnJlc29sdmVgIHdhcyB1c2VkIHRoZW4gYnViYmxlIHVwIHRoZSBlcnJvci5cbiAgICAgICAgaWYgKGNoYW5uZWwgfHwgcmVzb2x2ZSkgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICAgICAgbG9nRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzb2x2ZSAmJiBpcy5wcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2IocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQdXQgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2FsbEVmZmVjdChfcmVmNCwgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfcmVmNC5jb250ZXh0LFxuICAgICAgICBmbiA9IF9yZWY0LmZuLFxuICAgICAgICBhcmdzID0gX3JlZjQuYXJncztcblxuICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXMucHJvbWlzZShyZXN1bHQpID8gcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYikgOiBpcy5pdGVyYXRvcihyZXN1bHQpID8gcmVzb2x2ZUl0ZXJhdG9yKHJlc3VsdCwgZWZmZWN0SWQsIGZuLm5hbWUsIGNiKSA6IGNiKHJlc3VsdCk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5DUFNFZmZlY3QoX3JlZjUsIGNiKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfcmVmNS5jb250ZXh0LFxuICAgICAgICBmbiA9IF9yZWY1LmZuLFxuICAgICAgICBhcmdzID0gX3JlZjUuYXJncztcblxuICAgIC8vIENQUyAoaWUgbm9kZSBzdHlsZSBmdW5jdGlvbnMpIGNhbiBkZWZpbmUgdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpY1xuICAgIC8vIGJ5IHNldHRpbmcgY2FuY2VsIGZpZWxkIG9uIHRoZSBjYlxuXG4gICAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gICAgdHJ5IHtcbiAgICAgIHZhciBjcHNDYiA9IGZ1bmN0aW9uIGNwc0NiKGVyciwgcmVzKSB7XG4gICAgICAgIHJldHVybiBpcy51bmRlZihlcnIpID8gY2IocmVzKSA6IGNiKGVyciwgdHJ1ZSk7XG4gICAgICB9O1xuICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoY3BzQ2IpKTtcbiAgICAgIGlmIChjcHNDYi5jYW5jZWwpIHtcbiAgICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjcHNDYi5jYW5jZWwoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5Gb3JrRWZmZWN0KF9yZWY2LCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY2LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjYuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNi5hcmdzLFxuICAgICAgICBkZXRhY2hlZCA9IF9yZWY2LmRldGFjaGVkO1xuXG4gICAgdmFyIHRhc2tJdGVyYXRvciA9IGNyZWF0ZVRhc2tJdGVyYXRvcih7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9KTtcblxuICAgIHRyeSB7XG4gICAgICBzdXNwZW5kKCk7XG4gICAgICB2YXIgX3Rhc2sgPSBwcm9jKHRhc2tJdGVyYXRvciwgc3Vic2NyaWJlLCBkaXNwYXRjaCwgZ2V0U3RhdGUsIHRhc2tDb250ZXh0LCBvcHRpb25zLCBlZmZlY3RJZCwgZm4ubmFtZSwgZGV0YWNoZWQgPyBudWxsIDogbm9vcCk7XG5cbiAgICAgIGlmIChkZXRhY2hlZCkge1xuICAgICAgICBjYihfdGFzayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFza0l0ZXJhdG9yLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICB0YXNrUXVldWUuYWRkVGFzayhfdGFzayk7XG4gICAgICAgICAgY2IoX3Rhc2spO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tJdGVyYXRvci5fZXJyb3IpIHtcbiAgICAgICAgICB0YXNrUXVldWUuYWJvcnQodGFza0l0ZXJhdG9yLl9lcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IoX3Rhc2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIC8vIEZvcmsgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuSm9pbkVmZmVjdCh0LCBjYikge1xuICAgIGlmICh0LmlzUnVubmluZygpKSB7XG4gICAgICB2YXIgam9pbmVyID0geyB0YXNrOiB0YXNrLCBjYjogY2IgfTtcbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSh0LmpvaW5lcnMsIGpvaW5lcik7XG4gICAgICB9O1xuICAgICAgdC5qb2luZXJzLnB1c2goam9pbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdC5pc0Fib3J0ZWQoKSA/IGNiKHQuZXJyb3IoKSwgdHJ1ZSkgOiBjYih0LnJlc3VsdCgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5DYW5jZWxFZmZlY3QodGFza1RvQ2FuY2VsLCBjYikge1xuICAgIGlmICh0YXNrVG9DYW5jZWwgPT09IFNFTEZfQ0FOQ0VMTEFUSU9OKSB7XG4gICAgICB0YXNrVG9DYW5jZWwgPSB0YXNrO1xuICAgIH1cbiAgICBpZiAodGFza1RvQ2FuY2VsLmlzUnVubmluZygpKSB7XG4gICAgICB0YXNrVG9DYW5jZWwuY2FuY2VsKCk7XG4gICAgfVxuICAgIGNiKCk7XG4gICAgLy8gY2FuY2VsIGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkFsbEVmZmVjdChlZmZlY3RzLCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVmZmVjdHMpO1xuXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNiKGlzLmFycmF5KGVmZmVjdHMpID8gW10gOiB7fSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBsZXRlZENvdW50ID0gMDtcbiAgICB2YXIgY29tcGxldGVkID0gdm9pZCAwO1xuICAgIHZhciByZXN1bHRzID0ge307XG4gICAgdmFyIGNoaWxkQ2JzID0ge307XG5cbiAgICBmdW5jdGlvbiBjaGVja0VmZmVjdEVuZCgpIHtcbiAgICAgIGlmIChjb21wbGV0ZWRDb3VudCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgY2IoaXMuYXJyYXkoZWZmZWN0cykgPyBhcnJheS5mcm9tKF9leHRlbmRzKHt9LCByZXN1bHRzLCB7IGxlbmd0aDoga2V5cy5sZW5ndGggfSkpIDogcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjaENiQXRLZXkgPSBmdW5jdGlvbiBjaENiQXRLZXkocmVzLCBpc0Vycikge1xuICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0VyciB8fCBpc0VuZChyZXMpIHx8IHJlcyA9PT0gQ0hBTk5FTF9FTkQgfHwgcmVzID09PSBUQVNLX0NBTkNFTCkge1xuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHJlcztcbiAgICAgICAgICBjb21wbGV0ZWRDb3VudCsrO1xuICAgICAgICAgIGNoZWNrRWZmZWN0RW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICAgIGNoaWxkQ2JzW2tleV0gPSBjaENiQXRLZXk7XG4gICAgfSk7XG5cbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZENic1trZXldLmNhbmNlbCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBydW5FZmZlY3QoZWZmZWN0c1trZXldLCBlZmZlY3RJZCwga2V5LCBjaGlsZENic1trZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blJhY2VFZmZlY3QoZWZmZWN0cywgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IHZvaWQgMDtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVmZmVjdHMpO1xuICAgIHZhciBjaGlsZENicyA9IHt9O1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjaENiQXRLZXkgPSBmdW5jdGlvbiBjaENiQXRLZXkocmVzLCBpc0Vycikge1xuICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgICAgLy8gUmFjZSBBdXRvIGNhbmNlbGxhdGlvblxuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNiKHJlcywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRW5kKHJlcykgJiYgcmVzICE9PSBDSEFOTkVMX0VORCAmJiByZXMgIT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgICAgdmFyIF9yZXNwb25zZTtcblxuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgdmFyIHJlc3BvbnNlID0gKF9yZXNwb25zZSA9IHt9LCBfcmVzcG9uc2Vba2V5XSA9IHJlcywgX3Jlc3BvbnNlKTtcbiAgICAgICAgICBjYihpcy5hcnJheShlZmZlY3RzKSA/IFtdLnNsaWNlLmNhbGwoX2V4dGVuZHMoe30sIHJlc3BvbnNlLCB7IGxlbmd0aDoga2V5cy5sZW5ndGggfSkpIDogcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hDYkF0S2V5LmNhbmNlbCA9IG5vb3A7XG4gICAgICBjaGlsZENic1trZXldID0gY2hDYkF0S2V5O1xuICAgIH0pO1xuXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJldmVudHMgdW5uZWNlc3NhcnkgY2FuY2VsbGF0aW9uXG4gICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZENic1trZXldLmNhbmNlbCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJ1bkVmZmVjdChlZmZlY3RzW2tleV0sIGVmZmVjdElkLCBrZXksIGNoaWxkQ2JzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuU2VsZWN0RWZmZWN0KF9yZWY3LCBjYikge1xuICAgIHZhciBzZWxlY3RvciA9IF9yZWY3LnNlbGVjdG9yLFxuICAgICAgICBhcmdzID0gX3JlZjcuYXJncztcblxuICAgIHRyeSB7XG4gICAgICB2YXIgc3RhdGUgPSBzZWxlY3Rvci5hcHBseSh1bmRlZmluZWQsIFtnZXRTdGF0ZSgpXS5jb25jYXQoYXJncykpO1xuICAgICAgY2Ioc3RhdGUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2hhbm5lbEVmZmVjdChfcmVmOCwgY2IpIHtcbiAgICB2YXIgcGF0dGVybiA9IF9yZWY4LnBhdHRlcm4sXG4gICAgICAgIGJ1ZmZlciA9IF9yZWY4LmJ1ZmZlcjtcblxuICAgIHZhciBtYXRjaCA9IG1hdGNoZXIocGF0dGVybik7XG4gICAgbWF0Y2gucGF0dGVybiA9IHBhdHRlcm47XG4gICAgY2IoZXZlbnRDaGFubmVsKHN1YnNjcmliZSwgYnVmZmVyIHx8IGJ1ZmZlcnMuZml4ZWQoKSwgbWF0Y2gpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNhbmNlbGxlZEVmZmVjdChkYXRhLCBjYikge1xuICAgIGNiKCEhbWFpblRhc2suaXNDYW5jZWxsZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuRmx1c2hFZmZlY3QoY2hhbm5lbCwgY2IpIHtcbiAgICBjaGFubmVsLmZsdXNoKGNiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkdldENvbnRleHRFZmZlY3QocHJvcCwgY2IpIHtcbiAgICBjYih0YXNrQ29udGV4dFtwcm9wXSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5TZXRDb250ZXh0RWZmZWN0KHByb3BzLCBjYikge1xuICAgIG9iamVjdC5hc3NpZ24odGFza0NvbnRleHQsIHByb3BzKTtcbiAgICBjYigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3VGFzayhpZCwgbmFtZSwgaXRlcmF0b3IsIGNvbnQpIHtcbiAgICB2YXIgX2RvbmUsIF9yZWY5LCBfbXV0YXRvck1hcDtcblxuICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCA9IG51bGw7XG4gICAgcmV0dXJuIF9yZWY5ID0ge30sIF9yZWY5W1RBU0tdID0gdHJ1ZSwgX3JlZjkuaWQgPSBpZCwgX3JlZjkubmFtZSA9IG5hbWUsIF9kb25lID0gJ2RvbmUnLCBfbXV0YXRvck1hcCA9IHt9LCBfbXV0YXRvck1hcFtfZG9uZV0gPSBfbXV0YXRvck1hcFtfZG9uZV0gfHwge30sIF9tdXRhdG9yTWFwW19kb25lXS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlcmF0b3IuX2RlZmVycmVkRW5kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvci5fZGVmZXJyZWRFbmQucHJvbWlzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZlcnJlZCgpO1xuICAgICAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgPSBkZWY7XG4gICAgICAgIGlmICghaXRlcmF0b3IuX2lzUnVubmluZykge1xuICAgICAgICAgIGl0ZXJhdG9yLl9lcnJvciA/IGRlZi5yZWplY3QoaXRlcmF0b3IuX2Vycm9yKSA6IGRlZi5yZXNvbHZlKGl0ZXJhdG9yLl9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWYucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LCBfcmVmOS5jb250ID0gY29udCwgX3JlZjkuam9pbmVycyA9IFtdLCBfcmVmOS5jYW5jZWwgPSBjYW5jZWwsIF9yZWY5LmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNSdW5uaW5nO1xuICAgIH0sIF9yZWY5LmlzQ2FuY2VsbGVkID0gZnVuY3Rpb24gaXNDYW5jZWxsZWQoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2lzQ2FuY2VsbGVkO1xuICAgIH0sIF9yZWY5LmlzQWJvcnRlZCA9IGZ1bmN0aW9uIGlzQWJvcnRlZCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNBYm9ydGVkO1xuICAgIH0sIF9yZWY5LnJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5fcmVzdWx0O1xuICAgIH0sIF9yZWY5LmVycm9yID0gZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2Vycm9yO1xuICAgIH0sIF9yZWY5LnNldENvbnRleHQgPSBmdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gICAgICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZygndGFzaycsIHByb3BzKSk7XG4gICAgICBvYmplY3QuYXNzaWduKHRhc2tDb250ZXh0LCBwcm9wcyk7XG4gICAgfSwgX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzKF9yZWY5LCBfbXV0YXRvck1hcCksIF9yZWY5O1xuICB9XG59IiwiaW1wb3J0IHsgaXMsIGNoZWNrLCB1aWQgYXMgbmV4dFNhZ2FJZCwgd3JhcFNhZ2FEaXNwYXRjaCwgbm9vcCwgbG9nIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgcHJvYyBmcm9tICcuL3Byb2MnO1xuXG52YXIgUlVOX1NBR0FfU0lHTkFUVVJFID0gJ3J1blNhZ2Eoc3RvcmVJbnRlcmZhY2UsIHNhZ2EsIC4uLmFyZ3MpJztcbnZhciBOT05fR0VORVJBVE9SX0VSUiA9IFJVTl9TQUdBX1NJR05BVFVSRSArICc6IHNhZ2EgYXJndW1lbnQgbXVzdCBiZSBhIEdlbmVyYXRvciBmdW5jdGlvbiEnO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2FnYShzdG9yZUludGVyZmFjZSwgc2FnYSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpdGVyYXRvciA9IHZvaWQgMDtcblxuICBpZiAoaXMuaXRlcmF0b3Ioc3RvcmVJbnRlcmZhY2UpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICBsb2coJ3dhcm4nLCAncnVuU2FnYShpdGVyYXRvciwgc3RvcmVJbnRlcmZhY2UpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgJyArIFJVTl9TQUdBX1NJR05BVFVSRSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gc3RvcmVJbnRlcmZhY2U7XG4gICAgc3RvcmVJbnRlcmZhY2UgPSBzYWdhO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKHNhZ2EsIGlzLmZ1bmMsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgICBpdGVyYXRvciA9IHNhZ2EuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICBjaGVjayhpdGVyYXRvciwgaXMuaXRlcmF0b3IsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgfVxuXG4gIHZhciBfc3RvcmVJbnRlcmZhY2UgPSBzdG9yZUludGVyZmFjZSxcbiAgICAgIHN1YnNjcmliZSA9IF9zdG9yZUludGVyZmFjZS5zdWJzY3JpYmUsXG4gICAgICBkaXNwYXRjaCA9IF9zdG9yZUludGVyZmFjZS5kaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlID0gX3N0b3JlSW50ZXJmYWNlLmdldFN0YXRlLFxuICAgICAgY29udGV4dCA9IF9zdG9yZUludGVyZmFjZS5jb250ZXh0LFxuICAgICAgc2FnYU1vbml0b3IgPSBfc3RvcmVJbnRlcmZhY2Uuc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXIgPSBfc3RvcmVJbnRlcmZhY2UubG9nZ2VyLFxuICAgICAgb25FcnJvciA9IF9zdG9yZUludGVyZmFjZS5vbkVycm9yO1xuXG5cbiAgdmFyIGVmZmVjdElkID0gbmV4dFNhZ2FJZCgpO1xuXG4gIGlmIChzYWdhTW9uaXRvcikge1xuICAgIC8vIG1vbml0b3JzIGFyZSBleHBlY3RlZCB0byBoYXZlIGEgY2VydGFpbiBpbnRlcmZhY2UsIGxldCdzIGZpbGwtaW4gYW55IG1pc3Npbmcgb25lc1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkID0gc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFJlamVjdGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkID0gc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCA9IHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQgfHwgbm9vcDtcblxuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCh7IGVmZmVjdElkOiBlZmZlY3RJZCwgcm9vdDogdHJ1ZSwgcGFyZW50RWZmZWN0SWQ6IDAsIGVmZmVjdDogeyByb290OiB0cnVlLCBzYWdhOiBzYWdhLCBhcmdzOiBhcmdzIH0gfSk7XG4gIH1cblxuICB2YXIgdGFzayA9IHByb2MoaXRlcmF0b3IsIHN1YnNjcmliZSwgd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCksIGdldFN0YXRlLCBjb250ZXh0LCB7IHNhZ2FNb25pdG9yOiBzYWdhTW9uaXRvciwgbG9nZ2VyOiBsb2dnZXIsIG9uRXJyb3I6IG9uRXJyb3IgfSwgZWZmZWN0SWQsIHNhZ2EubmFtZSk7XG5cbiAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQoZWZmZWN0SWQsIHRhc2spO1xuICB9XG5cbiAgcmV0dXJuIHRhc2s7XG59IiwiaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSAnLi9pbnRlcm5hbC9taWRkbGV3YXJlJztcbmV4cG9ydCBkZWZhdWx0IG1pZGRsZXdhcmU7XG5cbmV4cG9ydCB7IHJ1blNhZ2EgfSBmcm9tICcuL2ludGVybmFsL3J1blNhZ2EnO1xuZXhwb3J0IHsgRU5ELCBldmVudENoYW5uZWwsIGNoYW5uZWwgfSBmcm9tICcuL2ludGVybmFsL2NoYW5uZWwnO1xuZXhwb3J0IHsgYnVmZmVycyB9IGZyb20gJy4vaW50ZXJuYWwvYnVmZmVycyc7XG5leHBvcnQgeyB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlIH0gZnJvbSAnLi9pbnRlcm5hbC9zYWdhSGVscGVycyc7XG5leHBvcnQgeyBkZWxheSwgQ0FOQ0VMIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlscyc7XG5leHBvcnQgeyBkZXRhY2ggfSBmcm9tICcuL2ludGVybmFsL2lvJztcblxuaW1wb3J0ICogYXMgZWZmZWN0cyBmcm9tICcuL2VmZmVjdHMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCB7IGVmZmVjdHMsIHV0aWxzIH07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgeyBpcywgY2hlY2ssIG9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGVtaXR0ZXIgfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHsgaWRlbnQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHJ1blNhZ2EgfSBmcm9tICcuL3J1blNhZ2EnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYWdhTWlkZGxld2FyZUZhY3RvcnkoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX3JlZiRjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYkY29udGV4dCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGNvbnRleHQsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnY29udGV4dCddKTtcblxuICB2YXIgc2FnYU1vbml0b3IgPSBvcHRpb25zLnNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yO1xuXG5cbiAgaWYgKGlzLmZ1bmMob3B0aW9ucykpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWdhIG1pZGRsZXdhcmUgbm8gbG9uZ2VyIGFjY2VwdCBHZW5lcmF0b3IgZnVuY3Rpb25zLiBVc2Ugc2FnYU1pZGRsZXdhcmUucnVuIGluc3RlYWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgcGFzc2VkIGEgZnVuY3Rpb24gdG8gdGhlIFNhZ2EgbWlkZGxld2FyZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIHN0YXJ0IGEgICAgICAgIFNhZ2EgYnkgZGlyZWN0bHkgcGFzc2luZyBpdCB0byB0aGUgbWlkZGxld2FyZS4gVGhpcyBpcyBubyBsb25nZXIgcG9zc2libGUgc3RhcnRpbmcgZnJvbSAwLjEwLjAuICAgICAgICBUbyBydW4gYSBTYWdhLCB5b3UgbXVzdCBkbyBpdCBkeW5hbWljYWxseSBBRlRFUiBtb3VudGluZyB0aGUgbWlkZGxld2FyZSBpbnRvIHRoZSBzdG9yZS5cXG4gICAgICAgIEV4YW1wbGU6XFxuICAgICAgICAgIGltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCdcXG4gICAgICAgICAgLi4uIG90aGVyIGltcG9ydHNcXG5cXG4gICAgICAgICAgY29uc3Qgc2FnYU1pZGRsZXdhcmUgPSBjcmVhdGVTYWdhTWlkZGxld2FyZSgpXFxuICAgICAgICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgYXBwbHlNaWRkbGV3YXJlKHNhZ2FNaWRkbGV3YXJlKSlcXG4gICAgICAgICAgc2FnYU1pZGRsZXdhcmUucnVuKHNhZ2EsIC4uLmFyZ3MpXFxuICAgICAgJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvZ2dlciAmJiAhaXMuZnVuYyhsb2dnZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5sb2dnZXJgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIG9wdGlvbnMub25lcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMub25lcnJvcmAgd2FzIHJlbW92ZWQuIFVzZSBgb3B0aW9ucy5vbkVycm9yYCBpbnN0ZWFkLicpO1xuICB9XG5cbiAgaWYgKG9uRXJyb3IgJiYgIWlzLmZ1bmMob25FcnJvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLm9uRXJyb3JgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZW1pdHRlciAmJiAhaXMuZnVuYyhvcHRpb25zLmVtaXR0ZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5lbWl0dGVyYCBwYXNzZWQgdG8gdGhlIFNhZ2EgbWlkZGxld2FyZSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlKF9yZWYyKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZjIuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2g7XG5cbiAgICB2YXIgc2FnYUVtaXR0ZXIgPSBlbWl0dGVyKCk7XG4gICAgc2FnYUVtaXR0ZXIuZW1pdCA9IChvcHRpb25zLmVtaXR0ZXIgfHwgaWRlbnQpKHNhZ2FFbWl0dGVyLmVtaXQpO1xuXG4gICAgc2FnYU1pZGRsZXdhcmUucnVuID0gcnVuU2FnYS5iaW5kKG51bGwsIHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBzdWJzY3JpYmU6IHNhZ2FFbWl0dGVyLnN1YnNjcmliZSxcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgIHNhZ2FNb25pdG9yOiBzYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlcjogbG9nZ2VyLFxuICAgICAgb25FcnJvcjogb25FcnJvclxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoc2FnYU1vbml0b3IgJiYgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCkge1xuICAgICAgICAgIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQoYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pOyAvLyBoaXQgcmVkdWNlcnNcbiAgICAgICAgc2FnYUVtaXR0ZXIuZW1pdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgc2FnYU1pZGRsZXdhcmUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmVmb3JlIHJ1bm5pbmcgYSBTYWdhLCB5b3UgbXVzdCBtb3VudCB0aGUgU2FnYSBtaWRkbGV3YXJlIG9uIHRoZSBTdG9yZSB1c2luZyBhcHBseU1pZGRsZXdhcmUnKTtcbiAgfTtcblxuICBzYWdhTWlkZGxld2FyZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgY2hlY2socHJvcHMsIGlzLm9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoJ3NhZ2FNaWRkbGV3YXJlJywgcHJvcHMpKTtcbiAgICBvYmplY3QuYXNzaWduKGNvbnRleHQsIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gc2FnYU1pZGRsZXdhcmU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXgzID0gL14jKFswLTlhLWZdezN9KSQvLFxuICAgIHJlSGV4NiA9IC9eIyhbMC05YS1mXXs2fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuaGV4KCk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG07XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcbiAgICAgIDogKG0gPSByZUhleDYuZXhlYyhmb3JtYXQpKSA/IHJnYm4ocGFyc2VJbnQobVsxXSwgMTYpKSAvLyAjZmYwMDAwXG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKVxuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMuciAmJiB0aGlzLnIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmcgJiYgdGhpcy5nIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5iICYmIHRoaXMuYiA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbi8vIGh0dHBzOi8vYmV0YS5vYnNlcnZhYmxlaHEuY29tL0BtYm9zdG9jay9sYWItYW5kLXJnYlxudmFyIEsgPSAxOCxcbiAgICBYbiA9IDAuOTY0MjIsXG4gICAgWW4gPSAxLFxuICAgIFpuID0gMC44MjUyMSxcbiAgICB0MCA9IDQgLyAyOSxcbiAgICB0MSA9IDYgLyAyOSxcbiAgICB0MiA9IDMgKiB0MSAqIHQxLFxuICAgIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSB7XG4gICAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gIH1cbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IHJnYjJscmdiKG8uciksXG4gICAgICBnID0gcmdiMmxyZ2Ioby5nKSxcbiAgICAgIGIgPSByZ2IybHJnYihvLmIpLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjIyNTA0NSAqIHIgKyAwLjcxNjg3ODYgKiBnICsgMC4wNjA2MTY5ICogYikgLyBZbiksIHgsIHo7XG4gIGlmIChyID09PSBnICYmIGcgPT09IGIpIHggPSB6ID0geTsgZWxzZSB7XG4gICAgeCA9IHh5ejJsYWIoKDAuNDM2MDc0NyAqIHIgKyAwLjM4NTA2NDkgKiBnICsgMC4xNDMwODA0ICogYikgLyBYbik7XG4gICAgeiA9IHh5ejJsYWIoKDAuMDEzOTMyMiAqIHIgKyAwLjA5NzEwNDUgKiBnICsgMC43MTQxNzMzICogYikgLyBabik7XG4gIH1cbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeCA9IFhuICogbGFiMnh5eih4KTtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBscmdiMnJnYiggMy4xMzM4NTYxICogeCAtIDEuNjE2ODY2NyAqIHkgLSAwLjQ5MDYxNDYgKiB6KSxcbiAgICAgIGxyZ2IycmdiKC0wLjk3ODc2ODQgKiB4ICsgMS45MTYxNDE1ICogeSArIDAuMDMzNDU0MCAqIHopLFxuICAgICAgbHJnYjJyZ2IoIDAuMDcxOTQ1MyAqIHggLSAwLjIyODk5MTQgKiB5ICsgMS40MDUyNDI3ICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24gbHJnYjJyZ2IoeCkge1xuICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cblxuZnVuY3Rpb24gcmdiMmxyZ2IoeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIGlmIChvLmEgPT09IDAgJiYgby5iID09PSAwKSByZXR1cm4gbmV3IEhjbChOYU4sIDAsIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIY2wsIGhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICgoZnVuY3Rpb24obW9kdWxlcykge1xuXHQvLyBDaGVjayBhbGwgbW9kdWxlcyBmb3IgZGVkdXBsaWNhdGVkIG1vZHVsZXNcblx0Zm9yKHZhciBpIGluIG1vZHVsZXMpIHtcblx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kdWxlcywgaSkpIHtcblx0XHRcdHN3aXRjaCh0eXBlb2YgbW9kdWxlc1tpXSkge1xuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6IGJyZWFrO1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHQvLyBNb2R1bGUgY2FuIGJlIGNyZWF0ZWQgZnJvbSBhIHRlbXBsYXRlXG5cdFx0XHRcdG1vZHVsZXNbaV0gPSAoZnVuY3Rpb24oX20pIHtcblx0XHRcdFx0XHR2YXIgYXJncyA9IF9tLnNsaWNlKDEpLCBmbiA9IG1vZHVsZXNbX21bMF1dO1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoYSxiLGMpIHtcblx0XHRcdFx0XHRcdGZuLmFwcGx5KHRoaXMsIFthLGIsY10uY29uY2F0KGFyZ3MpKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KG1vZHVsZXNbaV0pKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHQvLyBNb2R1bGUgaXMgYSBjb3B5IG9mIGFub3RoZXIgbW9kdWxlXG5cdFx0XHRcdG1vZHVsZXNbaV0gPSBtb2R1bGVzW21vZHVsZXNbaV1dO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIG1vZHVsZXM7XG59KFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBtYXBWYWx1ZXM7XG5cdGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmosIGYpIHtcblx0ICBpZiAob2JqID09IG51bGwpIHtcblx0ICAgIHJldHVybiB7fTtcblx0ICB9XG5cblx0ICB2YXIgcmVzID0ge307XG5cdCAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgIHJlc1trZXldID0gZihvYmpba2V5XSk7XG5cdCAgfSk7XG5cdCAgcmV0dXJuIHJlcztcblx0fVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5cblx0ZXhwb3J0cy5jYXB0dXJlTWVzc2FnZSA9IGNhcHR1cmVNZXNzYWdlO1xuXHRleHBvcnRzLmNhcHR1cmVFeGNlcHRpb24gPSBjYXB0dXJlRXhjZXB0aW9uO1xuXG5cdHZhciBfVHJhY2VLaXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfVHJhY2VLaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhY2VLaXQpO1xuXG5cdHZhciBfc3RhY2tUcmFjZUZyb21FcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG5cdHZhciBfc3RhY2tUcmFjZUZyb21FcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGFja1RyYWNlRnJvbUVycm9yKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIGlzU2NhbGFyKHZhbHVlKSB7XG5cdCAgcmV0dXJuICgvYm9vbGVhbnxudW1iZXJ8c3RyaW5nLy50ZXN0KHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKVxuXHQgICk7XG5cdH1cblxuXHRmdW5jdGlvbiBzY3J1YihkYXRhLCBvcHRpb25zKSB7XG5cdCAgaWYgKG9wdGlvbnMpIHtcblx0ICAgIHZhciBvcHRpb25hbFNjYWxhcnMgPSBbXG5cdCAgICAvLyBWYWxpZCB2YWx1ZXMgZm9yICdsZXZlbCcgYXJlICdmYXRhbCcsICdlcnJvcicsICd3YXJuaW5nJywgJ2luZm8nLFxuXHQgICAgLy8gYW5kICdkZWJ1ZycuIERlZmF1bHRzIHRvICdlcnJvcicuXG5cdCAgICAnbGV2ZWwnLCAnbG9nZ2VyJ107XG5cdCAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuXHQgICAgdHJ5IHtcblx0ICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gb3B0aW9uYWxTY2FsYXJzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuXHQgICAgICAgIHZhciBmaWVsZCA9IF9zdGVwLnZhbHVlO1xuXG5cdCAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tmaWVsZF07XG5cblx0ICAgICAgICBpZiAoaXNTY2FsYXIodmFsdWUpKSB7XG5cdCAgICAgICAgICBkYXRhW2ZpZWxkXSA9IHZhbHVlLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgdmFyIG9wdGlvbmFsTWFwcyA9IFsndGFncycsICdleHRyYSddO1xuXHQgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcblx0ICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cblx0ICAgIHRyeSB7XG5cdCAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBvcHRpb25hbE1hcHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcblx0ICAgICAgICB2YXIgX2ZpZWxkID0gX3N0ZXAyLnZhbHVlO1xuXG5cdCAgICAgICAgdmFyIGRpcnR5ID0gb3B0aW9uc1tfZmllbGRdIHx8IHt9O1xuXHQgICAgICAgIHZhciBzY3J1YmJlZCA9IHt9O1xuXG5cdCAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gT2JqZWN0LmtleXMoZGlydHkpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG5cdCAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDMudmFsdWU7XG5cblx0ICAgICAgICAgICAgdmFyIF92YWx1ZSA9IGRpcnR5W2tleV07XG5cblx0ICAgICAgICAgICAgaWYgKGlzU2NhbGFyKF92YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICBzY3J1YmJlZFtrZXkudG9TdHJpbmcoKV0gPSBfdmFsdWUudG9TdHJpbmcoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcblx0ICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuXHQgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcblx0ICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBkYXRhW19maWVsZF0gPSBzY3J1YmJlZDtcblx0ICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG5cdCAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuXHQgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuXHQgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNhcHR1cmVNZXNzYWdlKGxvZ2dlciwgbWVzc2FnZSkge1xuXHQgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuXHQgIHZhciBkYXRhID0ge1xuXHQgICAgZXhjZXB0aW9uVHlwZTogJ01FU1NBR0UnLFxuXHQgICAgbWVzc2FnZTogbWVzc2FnZSxcblx0ICAgIGJyb3dzZXJIcmVmOiB3aW5kb3cubG9jYXRpb24uaHJlZlxuXHQgIH07XG5cblx0ICBzY3J1YihkYXRhLCBvcHRpb25zKTtcblxuXHQgIGxvZ2dlci5hZGRFdmVudCgnbHIuY29yZS5FeGNlcHRpb24nLCBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gZGF0YTtcblx0ICB9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24obG9nZ2VyLCBleGNlcHRpb24pIHtcblx0ICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cdCAgdmFyIHByZXBwZWRUcmFjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuXHQgIHZhciB0cmFjZSA9IHByZXBwZWRUcmFjZSB8fCBfVHJhY2VLaXQyLmRlZmF1bHQuY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKTtcblxuXHQgIHZhciBkYXRhID0ge1xuXHQgICAgZXhjZXB0aW9uVHlwZTogJ1dJTkRPVycsXG5cdCAgICBlcnJvclR5cGU6IHRyYWNlLm5hbWUsXG5cdCAgICBtZXNzYWdlOiB0cmFjZS5tZXNzYWdlLFxuXHQgICAgYnJvd3NlckhyZWY6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cdCAgfTtcblxuXHQgIHNjcnViKGRhdGEsIG9wdGlvbnMpO1xuXG5cdCAgdmFyIGFkZEV2ZW50T3B0aW9ucyA9IHtcblx0ICAgIF9zdGFja1RyYWNlOiAoMCwgX3N0YWNrVHJhY2VGcm9tRXJyb3IyLmRlZmF1bHQpKHRyYWNlKVxuXHQgIH07XG5cblx0ICBsb2dnZXIuYWRkRXZlbnQoJ2xyLmNvcmUuRXhjZXB0aW9uJywgZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIGRhdGE7XG5cdCAgfSwgYWRkRXZlbnRPcHRpb25zKTtcblx0fVxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuc2V0QWN0aXZlID0gc2V0QWN0aXZlO1xuXHRleHBvcnRzLmRlZmF1bHQgPSByZWdpc3RlclhIUjtcblxuXHR2YXIgX21hcFZhbHVlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9tYXBWYWx1ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwVmFsdWVzKTtcblxuXHR2YXIgX2VuaGFuY2VGdW5jID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX2VuaGFuY2VGdW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuaGFuY2VGdW5jKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cblx0ZnVuY3Rpb24gc2V0QWN0aXZlKHNob3VsZEJlQWN0aXZlKSB7XG5cdCAgaXNBY3RpdmUgPSBzaG91bGRCZUFjdGl2ZTtcblx0fVxuXG5cdHZhciBjdXJyZW50WEhSSWQgPSAwO1xuXHRmdW5jdGlvbiByZWdpc3RlclhIUihfcmVmKSB7XG5cdCAgdmFyIGFkZFJlcXVlc3QgPSBfcmVmLmFkZFJlcXVlc3QsXG5cdCAgICAgIGFkZFJlc3BvbnNlID0gX3JlZi5hZGRSZXNwb25zZTtcblxuXHQgIHZhciBfWEhSID0gWE1MSHR0cFJlcXVlc3Q7XG5cdCAgdmFyIHhock1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cdCAgdmFyIHVuc3Vic2NyaWJlZEZyb21YaHIgPSBmYWxzZTtcblx0ICAvLyBjb25zdCBMT0dST0NLRVRfWEhSX0xBQkVMID0gJ2xvZ3JvY2tldF94aHInO1xuXHQgIHZhciBMT0dST0NLRVRfWEhSX0xBQkVMID0gJ3hoci0nO1xuXG5cdCAgd2luZG93Ll9sclhNTEh0dHBSZXF1ZXN0ID0gWE1MSHR0cFJlcXVlc3Q7XG5cblx0ICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmF0aXZlLXJlYXNzaWduXG5cdCAgWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiBYTUxIdHRwUmVxdWVzdChtb3pBbm9uLCBtb3pTeXN0ZW0pIHtcblx0ICAgIHZhciB4aHJPYmplY3QgPSBuZXcgX1hIUihtb3pBbm9uLCBtb3pTeXN0ZW0pO1xuXHQgICAgaWYgKCFpc0FjdGl2ZSkge1xuXHQgICAgICByZXR1cm4geGhyT2JqZWN0O1xuXHQgICAgfVxuXG5cdCAgICB4aHJNYXAuc2V0KHhock9iamVjdCwge1xuXHQgICAgICB4aHJJZDogKytjdXJyZW50WEhSSWQsXG5cdCAgICAgIGhlYWRlcnM6IHt9XG5cdCAgICB9KTtcblxuXHQgICAgLy8gLi4uLCAnb3BlbicsIChtZXRob2QsIHVybCwgYXN5bmMsIHVzZXJuYW1lLCBwYXNzd29yZCkgPT4ge1xuXHQgICAgKDAsIF9lbmhhbmNlRnVuYzIuZGVmYXVsdCkoeGhyT2JqZWN0LCAnb3BlbicsIGZ1bmN0aW9uIChtZXRob2QsIHVybCkge1xuXHQgICAgICBpZiAodW5zdWJzY3JpYmVkRnJvbVhocikgcmV0dXJuO1xuXHQgICAgICB2YXIgY3VycmVudFhIUiA9IHhock1hcC5nZXQoeGhyT2JqZWN0KTtcblx0ICAgICAgY3VycmVudFhIUi5tZXRob2QgPSBtZXRob2Q7XG5cdCAgICAgIGN1cnJlbnRYSFIudXJsID0gdXJsO1xuXHQgICAgfSk7XG5cblx0ICAgICgwLCBfZW5oYW5jZUZ1bmMyLmRlZmF1bHQpKHhock9iamVjdCwgJ3NlbmQnLCBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICBpZiAodW5zdWJzY3JpYmVkRnJvbVhocikgcmV0dXJuO1xuXHQgICAgICB2YXIgY3VycmVudFhIUiA9IHhock1hcC5nZXQoeGhyT2JqZWN0KTtcblx0ICAgICAgdmFyIHJlcXVlc3QgPSB7XG5cdCAgICAgICAgdXJsOiBjdXJyZW50WEhSLnVybCxcblx0ICAgICAgICBtZXRob2Q6IGN1cnJlbnRYSFIubWV0aG9kLnRvVXBwZXJDYXNlKCksXG5cdCAgICAgICAgaGVhZGVyczogKDAsIF9tYXBWYWx1ZXMyLmRlZmF1bHQpKGN1cnJlbnRYSFIuaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlclZhbHVlcykge1xuXHQgICAgICAgICAgcmV0dXJuIGhlYWRlclZhbHVlcy5qb2luKCcsICcpO1xuXHQgICAgICAgIH0pLFxuXHQgICAgICAgIGJvZHk6IGRhdGFcblx0ICAgICAgfTtcblx0ICAgICAgYWRkUmVxdWVzdCgnJyArIExPR1JPQ0tFVF9YSFJfTEFCRUwgKyBjdXJyZW50WEhSLnhocklkLCByZXF1ZXN0KTtcblx0ICAgIH0pO1xuXG5cdCAgICAoMCwgX2VuaGFuY2VGdW5jMi5kZWZhdWx0KSh4aHJPYmplY3QsICdzZXRSZXF1ZXN0SGVhZGVyJywgZnVuY3Rpb24gKGhlYWRlciwgdmFsdWUpIHtcblx0ICAgICAgaWYgKHVuc3Vic2NyaWJlZEZyb21YaHIpIHJldHVybjtcblx0ICAgICAgdmFyIGN1cnJlbnRYSFIgPSB4aHJNYXAuZ2V0KHhock9iamVjdCk7XG5cdCAgICAgIGN1cnJlbnRYSFIuaGVhZGVyc1toZWFkZXJdID0gY3VycmVudFhIUi5oZWFkZXJzW2hlYWRlcl0gfHwgW107XG5cdCAgICAgIGN1cnJlbnRYSFIuaGVhZGVyc1toZWFkZXJdLnB1c2godmFsdWUpO1xuXHQgICAgfSk7XG5cblx0ICAgIHZhciB4aHJMaXN0ZW5lcnMgPSB7XG5cdCAgICAgIHJlYWR5c3RhdGVjaGFuZ2U6IGZ1bmN0aW9uIHJlYWR5c3RhdGVjaGFuZ2UoKSB7XG5cdCAgICAgICAgaWYgKHVuc3Vic2NyaWJlZEZyb21YaHIpIHJldHVybjtcblxuXHQgICAgICAgIGlmICh4aHJPYmplY3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuXHQgICAgICAgICAgdmFyIGN1cnJlbnRYSFIgPSB4aHJNYXAuZ2V0KHhock9iamVjdCk7XG5cdCAgICAgICAgICB2YXIgaGVhZGVyU3RyaW5nID0geGhyT2JqZWN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpO1xuXG5cdCAgICAgICAgICB2YXIgaGVhZGVycyA9IGhlYWRlclN0cmluZy5zcGxpdCgvW1xcclxcbl0rLykucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuXHQgICAgICAgICAgICB2YXIgbmV4dCA9IHByZXZpb3VzO1xuXHQgICAgICAgICAgICB2YXIgaGVhZGVyUGFydHMgPSBjdXJyZW50LnNwbGl0KCc6ICcpO1xuXHQgICAgICAgICAgICBpZiAoaGVhZGVyUGFydHMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgIHZhciBrZXkgPSBoZWFkZXJQYXJ0cy5zaGlmdCgpOyAvLyBmaXJzdCBpbmRleCBvZiB0aGUgYXJyYXlcblx0ICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBoZWFkZXJQYXJ0cy5qb2luKCc6ICcpOyAvLyByZXN0IG9mIHRoZSBhcnJheSByZXBhaXJlZFxuXHQgICAgICAgICAgICAgIGlmIChwcmV2aW91c1trZXldKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0W2tleV0gKz0gJywgJyArIHZhbHVlO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0W2tleV0gPSB2YWx1ZTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG5cdCAgICAgICAgICB9LCB7fSk7XG5cblx0ICAgICAgICAgIHZhciBib2R5ID0gdm9pZCAwO1xuXG5cdCAgICAgICAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gdHJ5aW5nIHRvIGFjY2VzcyBhIGxhcmdlIHJlc3BvbnNlczpcblx0ICAgICAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL0ZlZWRiYWNrL0RldGFpbHMvMTA1MzExMFxuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgc3dpdGNoICh4aHJPYmplY3QucmVzcG9uc2VUeXBlKSB7XG5cdCAgICAgICAgICAgICAgY2FzZSAnanNvbic6XG5cdCAgICAgICAgICAgICAgY2FzZSAnYXJyYXlidWZmZXInOlxuXHQgICAgICAgICAgICAgIGNhc2UgJ2Jsb2InOlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBib2R5ID0geGhyT2JqZWN0LnJlc3BvbnNlO1xuXHQgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIGJvZHkgPSB4aHJPYmplY3QucmVzcG9uc2VYTUw7XG5cdCAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuXHQgICAgICAgICAgICAgIGNhc2UgJyc6XG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIGJvZHkgPSB4aHJPYmplY3QucmVzcG9uc2VUZXh0O1xuXHQgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBib2R5ID0gJyc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICBib2R5ID0gJ0xvZ1JvY2tldDogRXJyb3IgYWNjZXNzaW5nIHJlc3BvbnNlLic7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHZhciByZXNwb25zZSA9IHtcblx0ICAgICAgICAgICAgdXJsOiBjdXJyZW50WEhSLnVybCxcblx0ICAgICAgICAgICAgc3RhdHVzOiB4aHJPYmplY3Quc3RhdHVzLFxuXHQgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuXHQgICAgICAgICAgICBib2R5OiBib2R5XG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICBhZGRSZXNwb25zZSgnJyArIExPR1JPQ0tFVF9YSFJfTEFCRUwgKyBjdXJyZW50WEhSLnhocklkLCByZXNwb25zZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIC8vIC8vIFVudXNlZCBFdmVudCBMaXN0ZW5lcnNcblx0ICAgICAgLy8gbG9hZHN0YXJ0OiAoKSA9PiB7fSxcblx0ICAgICAgLy8gcHJvZ3Jlc3M6ICgpID0+IHt9LFxuXHQgICAgICAvLyBhYm9ydDogKCkgPT4ge30sXG5cdCAgICAgIC8vIGVycm9yOiAoKSA9PiB7fSxcblx0ICAgICAgLy8gbG9hZDogKCkgPT4ge30sXG5cdCAgICAgIC8vIHRpbWVvdXQ6ICgpID0+IHt9LFxuXHQgICAgICAvLyBsb2FkZW5kOiAoKSA9PiB7fSxcblx0ICAgIH07XG5cblx0ICAgIE9iamVjdC5rZXlzKHhockxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHhock9iamVjdC5hZGRFdmVudExpc3RlbmVyKGtleSwgeGhyTGlzdGVuZXJzW2tleV0pO1xuXHQgICAgfSk7XG5cblx0ICAgIHJldHVybiB4aHJPYmplY3Q7XG5cdCAgfTtcblxuXHQgIC8vIHRoaXMgYWxsb3dzIFwiaW5zdGFuY2VvZiBYTUxIdHRwUmVxdWVzdFwiIHRvIHdvcmtcblx0ICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUgPSBfWEhSLnByb3RvdHlwZTtcblxuXHQgIC8vIFBlcnNpc3QgdGhlIHN0YXRpYyB2YXJpYWJsZXMuXG5cdCAgWydVTlNFTlQnLCAnT1BFTkVEJywgJ0hFQURFUlNfUkVDRUlWRUQnLCAnTE9BRElORycsICdET05FJ10uZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGUpIHtcblx0ICAgIFhNTEh0dHBSZXF1ZXN0W3ZhcmlhYmxlXSA9IF9YSFJbdmFyaWFibGVdO1xuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIHVuc3Vic2NyaWJlZEZyb21YaHIgPSB0cnVlO1xuXHQgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5hdGl2ZS1yZWFzc2lnblxuXHQgICAgWE1MSHR0cFJlcXVlc3QgPSBfWEhSO1xuXHQgIH07XG5cdH1cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIGVzbGludC1kaXNhYmxlICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qXG5cdCBUcmFjZUtpdCAtIENyb3NzIGJyb3dlciBzdGFjayB0cmFjZXMgLSBnaXRodWIuY29tL29jYy9UcmFjZUtpdFxuXG5cdCBUaGlzIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGdpdGh1Yi5jb20vb2NjL1RyYWNlS2l0LCBidXQgaGFzIHNpbmNlIGJlZW5cblx0IGxhcmdlbHkgcmUtd3JpdHRlbiBhbmQgaXMgbm93IG1haW50YWluZWQgYXMgcGFydCBvZiByYXZlbi1qcy4gIFRlc3RzIGZvclxuXHQgdGhpcyBhcmUgaW4gdGVzdC92ZW5kb3IuXG5cblx0IE1JVCBsaWNlbnNlXG5cdCovXG5cblx0dmFyIFRyYWNlS2l0ID0ge1xuXHQgICAgY29sbGVjdFdpbmRvd0Vycm9yczogdHJ1ZSxcblx0ICAgIGRlYnVnOiBmYWxzZVxuXHR9O1xuXG5cdC8vIFRoaXMgaXMgdG8gYmUgZGVmZW5zaXZlIGluIGVudmlyb25tZW50cyB3aGVyZSB3aW5kb3cgZG9lcyBub3QgZXhpc3QgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL3B1bGwvNzg1KVxuXHR2YXIgX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblx0Ly8gZ2xvYmFsIHJlZmVyZW5jZSB0byBzbGljZVxuXHR2YXIgX3NsaWNlID0gW10uc2xpY2U7XG5cdHZhciBVTktOT1dOX0ZVTkNUSU9OID0gJz8nO1xuXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG5cdHZhciBFUlJPUl9UWVBFU19SRSA9IC9eKD86VW5jYXVnaHQgKD86ZXhjZXB0aW9uOiApPyk/KCg/OkV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvcik6ID8oLiopJC87XG5cblx0ZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuXHQgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGRvY3VtZW50LmxvY2F0aW9uID09PSAndW5kZWZpbmVkJykgcmV0dXJuICcnO1xuXG5cdCAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFjZUtpdC5yZXBvcnQ6IGNyb3NzLWJyb3dzZXIgcHJvY2Vzc2luZyBvZiB1bmhhbmRsZWQgZXhjZXB0aW9uc1xuXHQgKlxuXHQgKiBTeW50YXg6XG5cdCAqICAgVHJhY2VLaXQucmVwb3J0LnN1YnNjcmliZShmdW5jdGlvbihzdGFja0luZm8pIHsgLi4uIH0pXG5cdCAqICAgVHJhY2VLaXQucmVwb3J0LnVuc3Vic2NyaWJlKGZ1bmN0aW9uKHN0YWNrSW5mbykgeyAuLi4gfSlcblx0ICogICBUcmFjZUtpdC5yZXBvcnQoZXhjZXB0aW9uKVxuXHQgKiAgIHRyeSB7IC4uLmNvZGUuLi4gfSBjYXRjaChleCkgeyBUcmFjZUtpdC5yZXBvcnQoZXgpOyB9XG5cdCAqXG5cdCAqIFN1cHBvcnRzOlxuXHQgKiAgIC0gRmlyZWZveDogZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgbnVtYmVycywgcGx1cyBjb2x1bW4gbnVtYmVyXG5cdCAqICAgICAgICAgICAgICBvbiB0b3AgZnJhbWU7IGNvbHVtbiBudW1iZXIgaXMgbm90IGd1YXJhbnRlZWRcblx0ICogICAtIE9wZXJhOiAgIGZ1bGwgc3RhY2sgdHJhY2Ugd2l0aCBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyc1xuXHQgKiAgIC0gQ2hyb21lOiAgZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzXG5cdCAqICAgLSBTYWZhcmk6ICBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyIGZvciB0aGUgdG9wIGZyYW1lIG9ubHk7IHNvbWUgZnJhbWVzXG5cdCAqICAgICAgICAgICAgICBtYXkgYmUgbWlzc2luZywgYW5kIGNvbHVtbiBudW1iZXIgaXMgbm90IGd1YXJhbnRlZWRcblx0ICogICAtIElFOiAgICAgIGxpbmUgYW5kIGNvbHVtbiBudW1iZXIgZm9yIHRoZSB0b3AgZnJhbWUgb25seTsgc29tZSBmcmFtZXNcblx0ICogICAgICAgICAgICAgIG1heSBiZSBtaXNzaW5nLCBhbmQgY29sdW1uIG51bWJlciBpcyBub3QgZ3VhcmFudGVlZFxuXHQgKlxuXHQgKiBJbiB0aGVvcnksIFRyYWNlS2l0IHNob3VsZCB3b3JrIG9uIGFsbCBvZiB0aGUgZm9sbG93aW5nIHZlcnNpb25zOlxuXHQgKiAgIC0gSUU1LjUrIChvbmx5IDguMCB0ZXN0ZWQpXG5cdCAqICAgLSBGaXJlZm94IDAuOSsgKG9ubHkgMy41KyB0ZXN0ZWQpXG5cdCAqICAgLSBPcGVyYSA3KyAob25seSAxMC41MCB0ZXN0ZWQ7IHZlcnNpb25zIDkgYW5kIGVhcmxpZXIgbWF5IHJlcXVpcmVcblx0ICogICAgIEV4Y2VwdGlvbnMgSGF2ZSBTdGFja3RyYWNlIHRvIGJlIGVuYWJsZWQgaW4gb3BlcmE6Y29uZmlnKVxuXHQgKiAgIC0gU2FmYXJpIDMrIChvbmx5IDQrIHRlc3RlZClcblx0ICogICAtIENocm9tZSAxKyAob25seSA1KyB0ZXN0ZWQpXG5cdCAqICAgLSBLb25xdWVyb3IgMy41KyAodW50ZXN0ZWQpXG5cdCAqXG5cdCAqIFJlcXVpcmVzIFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlLlxuXHQgKlxuXHQgKiBUcmllcyB0byBjYXRjaCBhbGwgdW5oYW5kbGVkIGV4Y2VwdGlvbnMgYW5kIHJlcG9ydCB0aGVtIHRvIHRoZVxuXHQgKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBQbGVhc2Ugbm90ZSB0aGF0IFRyYWNlS2l0LnJlcG9ydCB3aWxsIHJldGhyb3cgdGhlXG5cdCAqIGV4Y2VwdGlvbi4gVGhpcyBpcyBSRVFVSVJFRCBpbiBvcmRlciB0byBnZXQgYSB1c2VmdWwgc3RhY2sgdHJhY2UgaW4gSUUuXG5cdCAqIElmIHRoZSBleGNlcHRpb24gZG9lcyBub3QgcmVhY2ggdGhlIHRvcCBvZiB0aGUgYnJvd3NlciwgeW91IHdpbGwgb25seVxuXHQgKiBnZXQgYSBzdGFjayB0cmFjZSBmcm9tIHRoZSBwb2ludCB3aGVyZSBUcmFjZUtpdC5yZXBvcnQgd2FzIGNhbGxlZC5cblx0ICpcblx0ICogSGFuZGxlcnMgcmVjZWl2ZSBhIHN0YWNrSW5mbyBvYmplY3QgYXMgZGVzY3JpYmVkIGluIHRoZVxuXHQgKiBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZSBkb2NzLlxuXHQgKi9cblx0VHJhY2VLaXQucmVwb3J0ID0gZnVuY3Rpb24gcmVwb3J0TW9kdWxlV3JhcHBlcigpIHtcblx0ICAgIHZhciBoYW5kbGVycyA9IFtdLFxuXHQgICAgICAgIGxhc3RBcmdzID0gbnVsbCxcblx0ICAgICAgICBsYXN0RXhjZXB0aW9uID0gbnVsbCxcblx0ICAgICAgICBsYXN0RXhjZXB0aW9uU3RhY2sgPSBudWxsO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFkZCBhIGNyYXNoIGhhbmRsZXIuXG5cdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHN1YnNjcmliZShoYW5kbGVyKSB7XG5cdCAgICAgICAgaW5zdGFsbEdsb2JhbEhhbmRsZXIoKTtcblx0ICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJlbW92ZSBhIGNyYXNoIGhhbmRsZXIuXG5cdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGhhbmRsZXIpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0ICAgICAgICAgICAgaWYgKGhhbmRsZXJzW2ldID09PSBoYW5kbGVyKSB7XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmVtb3ZlIGFsbCBjcmFzaCBoYW5kbGVycy5cblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gdW5zdWJzY3JpYmVBbGwoKSB7XG5cdCAgICAgICAgdW5pbnN0YWxsR2xvYmFsSGFuZGxlcigpO1xuXHQgICAgICAgIGhhbmRsZXJzID0gW107XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogRGlzcGF0Y2ggc3RhY2sgaW5mb3JtYXRpb24gdG8gYWxsIGhhbmRsZXJzLlxuXHQgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IHN0YWNrXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIG5vdGlmeUhhbmRsZXJzKHN0YWNrLCBpc1dpbmRvd0Vycm9yKSB7XG5cdCAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IG51bGw7XG5cdCAgICAgICAgaWYgKGlzV2luZG93RXJyb3IgJiYgIVRyYWNlS2l0LmNvbGxlY3RXaW5kb3dFcnJvcnMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKHZhciBpIGluIGhhbmRsZXJzKSB7XG5cdCAgICAgICAgICAgIGlmIChoYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVyc1tpXS5hcHBseShudWxsLCBbc3RhY2tdLmNvbmNhdChfc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpKSk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChpbm5lcikge1xuXHQgICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiA9IGlubmVyO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGV4Y2VwdGlvbikge1xuXHQgICAgICAgICAgICB0aHJvdyBleGNlcHRpb247XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICB2YXIgX29sZE9uZXJyb3JIYW5kbGVyLCBfb25FcnJvckhhbmRsZXJJbnN0YWxsZWQ7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5zdXJlcyBhbGwgZ2xvYmFsIHVuaGFuZGxlZCBleGNlcHRpb25zIGFyZSByZWNvcmRlZC5cblx0ICAgICAqIFN1cHBvcnRlZCBieSBHZWNrbyBhbmQgSUUuXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgb2Ygc2NyaXB0IHRoYXQgZ2VuZXJhdGVkIHRoZSBleGNlcHRpb24uXG5cdCAgICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gbGluZU5vIFRoZSBsaW5lIG51bWJlciBhdCB3aGljaCB0aGUgZXJyb3Jcblx0ICAgICAqIG9jY3VycmVkLlxuXHQgICAgICogQHBhcmFtIHs/KG51bWJlcnxzdHJpbmcpfSBjb2xObyBUaGUgY29sdW1uIG51bWJlciBhdCB3aGljaCB0aGUgZXJyb3Jcblx0ICAgICAqIG9jY3VycmVkLlxuXHQgICAgICogQHBhcmFtIHs/RXJyb3J9IGV4IFRoZSBhY3R1YWwgRXJyb3Igb2JqZWN0LlxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiB0cmFjZUtpdFdpbmRvd09uRXJyb3IobWVzc2FnZSwgdXJsLCBsaW5lTm8sIGNvbE5vLCBleCkge1xuXHQgICAgICAgIHZhciBzdGFjayA9IG51bGw7XG5cblx0ICAgICAgICBpZiAobGFzdEV4Y2VwdGlvblN0YWNrKSB7XG5cdCAgICAgICAgICAgIFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlLmF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50KGxhc3RFeGNlcHRpb25TdGFjaywgdXJsLCBsaW5lTm8sIG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICBwcm9jZXNzTGFzdEV4Y2VwdGlvbigpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZXgpIHtcblx0ICAgICAgICAgICAgLy8gTmV3IGNocm9tZSBhbmQgYmxpbmsgc2VuZCBhbG9uZyBhIHJlYWwgZXJyb3Igb2JqZWN0XG5cdCAgICAgICAgICAgIC8vIExldCdzIGp1c3QgcmVwb3J0IHRoYXQgbGlrZSBhIG5vcm1hbCBlcnJvci5cblx0ICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL21pa2V3ZXN0Lm9yZy8yMDEzLzA4L2RlYnVnZ2luZy1ydW50aW1lLWVycm9ycy13aXRoLXdpbmRvdy1vbmVycm9yXG5cdCAgICAgICAgICAgIHN0YWNrID0gVHJhY2VLaXQuY29tcHV0ZVN0YWNrVHJhY2UoZXgpO1xuXHQgICAgICAgICAgICBub3RpZnlIYW5kbGVycyhzdGFjaywgdHJ1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0ge1xuXHQgICAgICAgICAgICAgICAgJ3VybCc6IHVybCxcblx0ICAgICAgICAgICAgICAgICdsaW5lJzogbGluZU5vLFxuXHQgICAgICAgICAgICAgICAgJ2NvbHVtbic6IGNvbE5vXG5cdCAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgdmFyIG5hbWUgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIHZhciBtc2cgPSBtZXNzYWdlOyAvLyBtdXN0IGJlIG5ldyB2YXIgb3Igd2lsbCBtb2RpZnkgb3JpZ2luYWwgYGFyZ3VtZW50c2Bcblx0ICAgICAgICAgICAgdmFyIGdyb3Vwcztcblx0ICAgICAgICAgICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwobWVzc2FnZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZ3JvdXBzID0gbWVzc2FnZS5tYXRjaChFUlJPUl9UWVBFU19SRSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGdyb3Vwc1sxXTtcblx0ICAgICAgICAgICAgICAgICAgICBtc2cgPSBncm91cHNbMl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBsb2NhdGlvbi5mdW5jID0gVU5LTk9XTl9GVU5DVElPTjtcblxuXHQgICAgICAgICAgICBzdGFjayA9IHtcblx0ICAgICAgICAgICAgICAgICduYW1lJzogbmFtZSxcblx0ICAgICAgICAgICAgICAgICdtZXNzYWdlJzogbXNnLFxuXHQgICAgICAgICAgICAgICAgJ3VybCc6IGdldExvY2F0aW9uSHJlZigpLFxuXHQgICAgICAgICAgICAgICAgJ3N0YWNrJzogW2xvY2F0aW9uXVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBub3RpZnlIYW5kbGVycyhzdGFjaywgdHJ1ZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKF9vbGRPbmVycm9ySGFuZGxlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gX29sZE9uZXJyb3JIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBpbnN0YWxsR2xvYmFsSGFuZGxlcigpIHtcblx0ICAgICAgICBpZiAoX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgX29sZE9uZXJyb3JIYW5kbGVyID0gX3dpbmRvdy5vbmVycm9yO1xuXHQgICAgICAgIF93aW5kb3cub25lcnJvciA9IHRyYWNlS2l0V2luZG93T25FcnJvcjtcblx0ICAgICAgICBfb25FcnJvckhhbmRsZXJJbnN0YWxsZWQgPSB0cnVlO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiB1bmluc3RhbGxHbG9iYWxIYW5kbGVyKCkge1xuXHQgICAgICAgIGlmICghX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgX3dpbmRvdy5vbmVycm9yID0gX29sZE9uZXJyb3JIYW5kbGVyO1xuXHQgICAgICAgIF9vbkVycm9ySGFuZGxlckluc3RhbGxlZCA9IGZhbHNlO1xuXHQgICAgICAgIF9vbGRPbmVycm9ySGFuZGxlciA9IHVuZGVmaW5lZDtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gcHJvY2Vzc0xhc3RFeGNlcHRpb24oKSB7XG5cdCAgICAgICAgdmFyIF9sYXN0RXhjZXB0aW9uU3RhY2sgPSBsYXN0RXhjZXB0aW9uU3RhY2ssXG5cdCAgICAgICAgICAgIF9sYXN0QXJncyA9IGxhc3RBcmdzO1xuXHQgICAgICAgIGxhc3RBcmdzID0gbnVsbDtcblx0ICAgICAgICBsYXN0RXhjZXB0aW9uU3RhY2sgPSBudWxsO1xuXHQgICAgICAgIGxhc3RFeGNlcHRpb24gPSBudWxsO1xuXHQgICAgICAgIG5vdGlmeUhhbmRsZXJzLmFwcGx5KG51bGwsIFtfbGFzdEV4Y2VwdGlvblN0YWNrLCBmYWxzZV0uY29uY2F0KF9sYXN0QXJncykpO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJlcG9ydHMgYW4gdW5oYW5kbGVkIEVycm9yIHRvIFRyYWNlS2l0LlxuXHQgICAgICogQHBhcmFtIHtFcnJvcn0gZXhcblx0ICAgICAqIEBwYXJhbSB7P2Jvb2xlYW59IHJldGhyb3cgSWYgZmFsc2UsIGRvIG5vdCByZS10aHJvdyB0aGUgZXhjZXB0aW9uLlxuXHQgICAgICogT25seSB1c2VkIGZvciB3aW5kb3cub25lcnJvciB0byBub3QgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBvZlxuXHQgICAgICogcmV0aHJvd2luZy5cblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gcmVwb3J0KGV4LCByZXRocm93KSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICAgIGlmIChsYXN0RXhjZXB0aW9uU3RhY2spIHtcblx0ICAgICAgICAgICAgaWYgKGxhc3RFeGNlcHRpb24gPT09IGV4KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47IC8vIGFscmVhZHkgY2F1Z2h0IGJ5IGFuIGlubmVyIGNhdGNoIGJsb2NrLCBpZ25vcmVcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHByb2Nlc3NMYXN0RXhjZXB0aW9uKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgc3RhY2sgPSBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZShleCk7XG5cdCAgICAgICAgbGFzdEV4Y2VwdGlvblN0YWNrID0gc3RhY2s7XG5cdCAgICAgICAgbGFzdEV4Y2VwdGlvbiA9IGV4O1xuXHQgICAgICAgIGxhc3RBcmdzID0gYXJncztcblxuXHQgICAgICAgIC8vIElmIHRoZSBzdGFjayB0cmFjZSBpcyBpbmNvbXBsZXRlLCB3YWl0IGZvciAyIHNlY29uZHMgZm9yXG5cdCAgICAgICAgLy8gc2xvdyBzbG93IElFIHRvIHNlZSBpZiBvbmVycm9yIG9jY3VycyBvciBub3QgYmVmb3JlIHJlcG9ydGluZ1xuXHQgICAgICAgIC8vIHRoaXMgZXhjZXB0aW9uOyBvdGhlcndpc2UsIHdlIHdpbGwgZW5kIHVwIHdpdGggYW4gaW5jb21wbGV0ZVxuXHQgICAgICAgIC8vIHN0YWNrIHRyYWNlXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmIChsYXN0RXhjZXB0aW9uID09PSBleCkge1xuXHQgICAgICAgICAgICAgICAgcHJvY2Vzc0xhc3RFeGNlcHRpb24oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sIHN0YWNrLmluY29tcGxldGUgPyAyMDAwIDogMCk7XG5cblx0ICAgICAgICBpZiAocmV0aHJvdyAhPT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgdGhyb3cgZXg7IC8vIHJlLXRocm93IHRvIHByb3BhZ2F0ZSB0byB0aGUgdG9wIGxldmVsIChhbmQgY2F1c2Ugd2luZG93Lm9uZXJyb3IpXG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXBvcnQuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuXHQgICAgcmVwb3J0LnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG5cdCAgICByZXBvcnQudW5pbnN0YWxsID0gdW5zdWJzY3JpYmVBbGw7XG5cdCAgICByZXR1cm4gcmVwb3J0O1xuXHR9KCk7XG5cblx0LyoqXG5cdCAqIFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlOiBjcm9zcy1icm93c2VyIHN0YWNrIHRyYWNlcyBpbiBKYXZhU2NyaXB0XG5cdCAqXG5cdCAqIFN5bnRheDpcblx0ICogICBzID0gVHJhY2VLaXQuY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKSAvLyBjb25zaWRlciB1c2luZyBUcmFjZUtpdC5yZXBvcnQgaW5zdGVhZCAoc2VlIGJlbG93KVxuXHQgKiBSZXR1cm5zOlxuXHQgKiAgIHMubmFtZSAgICAgICAgICAgICAgLSBleGNlcHRpb24gbmFtZVxuXHQgKiAgIHMubWVzc2FnZSAgICAgICAgICAgLSBleGNlcHRpb24gbWVzc2FnZVxuXHQgKiAgIHMuc3RhY2tbaV0udXJsICAgICAgLSBKYXZhU2NyaXB0IG9yIEhUTUwgZmlsZSBVUkxcblx0ICogICBzLnN0YWNrW2ldLmZ1bmMgICAgIC0gZnVuY3Rpb24gbmFtZSwgb3IgZW1wdHkgZm9yIGFub255bW91cyBmdW5jdGlvbnMgKGlmIGd1ZXNzaW5nIGRpZCBub3Qgd29yaylcblx0ICogICBzLnN0YWNrW2ldLmFyZ3MgICAgIC0gYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24sIGlmIGtub3duXG5cdCAqICAgcy5zdGFja1tpXS5saW5lICAgICAtIGxpbmUgbnVtYmVyLCBpZiBrbm93blxuXHQgKiAgIHMuc3RhY2tbaV0uY29sdW1uICAgLSBjb2x1bW4gbnVtYmVyLCBpZiBrbm93blxuXHQgKlxuXHQgKiBTdXBwb3J0czpcblx0ICogICAtIEZpcmVmb3g6ICBmdWxsIHN0YWNrIHRyYWNlIHdpdGggbGluZSBudW1iZXJzIGFuZCB1bnJlbGlhYmxlIGNvbHVtblxuXHQgKiAgICAgICAgICAgICAgIG51bWJlciBvbiB0b3AgZnJhbWVcblx0ICogICAtIE9wZXJhIDEwOiBmdWxsIHN0YWNrIHRyYWNlIHdpdGggbGluZSBhbmQgY29sdW1uIG51bWJlcnNcblx0ICogICAtIE9wZXJhIDktOiBmdWxsIHN0YWNrIHRyYWNlIHdpdGggbGluZSBudW1iZXJzXG5cdCAqICAgLSBDaHJvbWU6ICAgZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzXG5cdCAqICAgLSBTYWZhcmk6ICAgbGluZSBhbmQgY29sdW1uIG51bWJlciBmb3IgdGhlIHRvcG1vc3Qgc3RhY2t0cmFjZSBlbGVtZW50XG5cdCAqICAgICAgICAgICAgICAgb25seVxuXHQgKiAgIC0gSUU6ICAgICAgIG5vIGxpbmUgbnVtYmVycyB3aGF0c29ldmVyXG5cdCAqXG5cdCAqIFRyaWVzIHRvIGd1ZXNzIG5hbWVzIG9mIGFub255bW91cyBmdW5jdGlvbnMgYnkgbG9va2luZyBmb3IgYXNzaWdubWVudHNcblx0ICogaW4gdGhlIHNvdXJjZSBjb2RlLiBJbiBJRSBhbmQgU2FmYXJpLCB3ZSBoYXZlIHRvIGd1ZXNzIHNvdXJjZSBmaWxlIG5hbWVzXG5cdCAqIGJ5IHNlYXJjaGluZyBmb3IgZnVuY3Rpb24gYm9kaWVzIGluc2lkZSBhbGwgcGFnZSBzY3JpcHRzLiBUaGlzIHdpbGwgbm90XG5cdCAqIHdvcmsgZm9yIHNjcmlwdHMgdGhhdCBhcmUgbG9hZGVkIGNyb3NzLWRvbWFpbi5cblx0ICogSGVyZSBiZSBkcmFnb25zOiBzb21lIGZ1bmN0aW9uIG5hbWVzIG1heSBiZSBndWVzc2VkIGluY29ycmVjdGx5LCBhbmRcblx0ICogZHVwbGljYXRlIGZ1bmN0aW9ucyBtYXkgYmUgbWlzbWF0Y2hlZC5cblx0ICpcblx0ICogVHJhY2VLaXQuY29tcHV0ZVN0YWNrVHJhY2Ugc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdHJhY2luZyBwdXJwb3Nlcy5cblx0ICogTG9nZ2luZyBvZiB1bmhhbmRsZWQgZXhjZXB0aW9ucyBzaG91bGQgYmUgZG9uZSB3aXRoIFRyYWNlS2l0LnJlcG9ydCxcblx0ICogd2hpY2ggYnVpbGRzIG9uIHRvcCBvZiBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZSBhbmQgcHJvdmlkZXMgYmV0dGVyXG5cdCAqIElFIHN1cHBvcnQgYnkgdXRpbGl6aW5nIHRoZSB3aW5kb3cub25lcnJvciBldmVudCB0byByZXRyaWV2ZSBpbmZvcm1hdGlvblxuXHQgKiBhYm91dCB0aGUgdG9wIG9mIHRoZSBzdGFjay5cblx0ICpcblx0ICogTm90ZTogSW4gSUUgYW5kIFNhZmFyaSwgbm8gc3RhY2sgdHJhY2UgaXMgcmVjb3JkZWQgb24gdGhlIEVycm9yIG9iamVjdCxcblx0ICogc28gY29tcHV0ZVN0YWNrVHJhY2UgaW5zdGVhZCB3YWxrcyBpdHMgKm93biogY2hhaW4gb2YgY2FsbGVycy5cblx0ICogVGhpcyBtZWFucyB0aGF0OlxuXHQgKiAgKiBpbiBTYWZhcmksIHNvbWUgbWV0aG9kcyBtYXkgYmUgbWlzc2luZyBmcm9tIHRoZSBzdGFjayB0cmFjZTtcblx0ICogICogaW4gSUUsIHRoZSB0b3Btb3N0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0cmFjZSB3aWxsIGFsd2F5cyBiZSB0aGVcblx0ICogICAgY2FsbGVyIG9mIGNvbXB1dGVTdGFja1RyYWNlLlxuXHQgKlxuXHQgKiBUaGlzIGlzIG9rYXkgZm9yIHRyYWNpbmcgKGJlY2F1c2UgeW91IGFyZSBsaWtlbHkgdG8gYmUgY2FsbGluZ1xuXHQgKiBjb21wdXRlU3RhY2tUcmFjZSBmcm9tIHRoZSBmdW5jdGlvbiB5b3Ugd2FudCB0byBiZSB0aGUgdG9wbW9zdCBlbGVtZW50XG5cdCAqIG9mIHRoZSBzdGFjayB0cmFjZSBhbnl3YXkpLCBidXQgbm90IG9rYXkgZm9yIGxvZ2dpbmcgdW5oYW5kbGVkXG5cdCAqIGV4Y2VwdGlvbnMgKGJlY2F1c2UgeW91ciBjYXRjaCBibG9jayB3aWxsIGxpa2VseSBiZSBmYXIgYXdheSBmcm9tIHRoZVxuXHQgKiBpbm5lciBmdW5jdGlvbiB0aGF0IGFjdHVhbGx5IGNhdXNlZCB0aGUgZXhjZXB0aW9uKS5cblx0ICpcblx0ICovXG5cdFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlID0gZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2VXcmFwcGVyKCkge1xuXHQgICAgLyoqXG5cdCAgICAgKiBFc2NhcGVzIHNwZWNpYWwgY2hhcmFjdGVycywgZXhjZXB0IGZvciB3aGl0ZXNwYWNlLCBpbiBhIHN0cmluZyB0byBiZVxuXHQgICAgICogdXNlZCBpbnNpZGUgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgYSBzdHJpbmcgbGl0ZXJhbC5cblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcuXG5cdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBlc2NhcGVkIHN0cmluZyBsaXRlcmFsLlxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAodGV4dCkge1xuXHQgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1tcXC1cXFtcXF17fSgpKis/LixcXFxcXFxeJHwjXS9nLCAnXFxcXCQmJyk7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogRXNjYXBlcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gYSBzdHJpbmcgdG8gYmUgdXNlZCBpbnNpZGUgYSByZWd1bGFyXG5cdCAgICAgKiBleHByZXNzaW9uIGFzIGEgc3RyaW5nIGxpdGVyYWwuIEFsc28gZW5zdXJlcyB0aGF0IEhUTUwgZW50aXRpZXMgd2lsbFxuXHQgICAgICogYmUgbWF0Y2hlZCB0aGUgc2FtZSBhcyB0aGVpciBsaXRlcmFsIGZyaWVuZHMuXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gYm9keSBUaGUgc3RyaW5nLlxuXHQgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgZXNjYXBlZCBzdHJpbmcuXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGVzY2FwZUNvZGVBc1JlZ0V4cEZvck1hdGNoaW5nSW5zaWRlSFRNTChib2R5KSB7XG5cdCAgICAgICAgcmV0dXJuIGVzY2FwZVJlZ0V4cChib2R5KS5yZXBsYWNlKCc8JywgJyg/Ojx8Jmx0OyknKS5yZXBsYWNlKCc+JywgJyg/Oj58Jmd0OyknKS5yZXBsYWNlKCcmJywgJyg/OiZ8JmFtcDspJykucmVwbGFjZSgnXCInLCAnKD86XCJ8JnF1b3Q7KScpLnJlcGxhY2UoL1xccysvZywgJ1xcXFxzKycpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBDb250ZW50cyBvZiBFeGNlcHRpb24gaW4gdmFyaW91cyBicm93c2Vycy5cblx0ICAgIC8vXG5cdCAgICAvLyBTQUZBUkk6XG5cdCAgICAvLyBleC5tZXNzYWdlID0gQ2FuJ3QgZmluZCB2YXJpYWJsZTogcXFcblx0ICAgIC8vIGV4LmxpbmUgPSA1OVxuXHQgICAgLy8gZXguc291cmNlSWQgPSA1ODAyMzgxOTJcblx0ICAgIC8vIGV4LnNvdXJjZVVSTCA9IGh0dHA6Ly8uLi5cblx0ICAgIC8vIGV4LmV4cHJlc3Npb25CZWdpbk9mZnNldCA9IDk2XG5cdCAgICAvLyBleC5leHByZXNzaW9uQ2FyZXRPZmZzZXQgPSA5OFxuXHQgICAgLy8gZXguZXhwcmVzc2lvbkVuZE9mZnNldCA9IDk4XG5cdCAgICAvLyBleC5uYW1lID0gUmVmZXJlbmNlRXJyb3Jcblx0ICAgIC8vXG5cdCAgICAvLyBGSVJFRk9YOlxuXHQgICAgLy8gZXgubWVzc2FnZSA9IHFxIGlzIG5vdCBkZWZpbmVkXG5cdCAgICAvLyBleC5maWxlTmFtZSA9IGh0dHA6Ly8uLi5cblx0ICAgIC8vIGV4LmxpbmVOdW1iZXIgPSA1OVxuXHQgICAgLy8gZXguY29sdW1uTnVtYmVyID0gNjlcblx0ICAgIC8vIGV4LnN0YWNrID0gLi4uc3RhY2sgdHJhY2UuLi4gKHNlZSB0aGUgZXhhbXBsZSBiZWxvdylcblx0ICAgIC8vIGV4Lm5hbWUgPSBSZWZlcmVuY2VFcnJvclxuXHQgICAgLy9cblx0ICAgIC8vIENIUk9NRTpcblx0ICAgIC8vIGV4Lm1lc3NhZ2UgPSBxcSBpcyBub3QgZGVmaW5lZFxuXHQgICAgLy8gZXgubmFtZSA9IFJlZmVyZW5jZUVycm9yXG5cdCAgICAvLyBleC50eXBlID0gbm90X2RlZmluZWRcblx0ICAgIC8vIGV4LmFyZ3VtZW50cyA9IFsnYWEnXVxuXHQgICAgLy8gZXguc3RhY2sgPSAuLi5zdGFjayB0cmFjZS4uLlxuXHQgICAgLy9cblx0ICAgIC8vIElOVEVSTkVUIEVYUExPUkVSOlxuXHQgICAgLy8gZXgubWVzc2FnZSA9IC4uLlxuXHQgICAgLy8gZXgubmFtZSA9IFJlZmVyZW5jZUVycm9yXG5cdCAgICAvL1xuXHQgICAgLy8gT1BFUkE6XG5cdCAgICAvLyBleC5tZXNzYWdlID0gLi4ubWVzc2FnZS4uLiAoc2VlIHRoZSBleGFtcGxlIGJlbG93KVxuXHQgICAgLy8gZXgubmFtZSA9IFJlZmVyZW5jZUVycm9yXG5cdCAgICAvLyBleC5vcGVyYSNzb3VyY2Vsb2MgPSAxMSAgKHByZXR0eSBtdWNoIHVzZWxlc3MsIGR1cGxpY2F0ZXMgdGhlIGluZm8gaW4gZXgubWVzc2FnZSlcblx0ICAgIC8vIGV4LnN0YWNrdHJhY2UgPSBuL2E7IHNlZSAnb3BlcmE6Y29uZmlnI1VzZXJQcmVmc3xFeGNlcHRpb25zIEhhdmUgU3RhY2t0cmFjZSdcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDb21wdXRlcyBzdGFjayB0cmFjZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzdGFjayBwcm9wZXJ0eS5cblx0ICAgICAqIENocm9tZSBhbmQgR2Vja28gdXNlIHRoaXMgcHJvcGVydHkuXG5cdCAgICAgKiBAcGFyYW0ge0Vycm9yfSBleFxuXHQgICAgICogQHJldHVybiB7P09iamVjdC48c3RyaW5nLCAqPn0gU3RhY2sgdHJhY2UgaW5mb3JtYXRpb24uXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcChleCkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgZXguc3RhY2sgPT09ICd1bmRlZmluZWQnIHx8ICFleC5zdGFjaykgcmV0dXJuO1xuXG5cdCAgICAgICAgdmFyIGNocm9tZSA9IC9eXFxzKmF0ICguKj8pID9cXCgoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWUtZXh0ZW5zaW9ufG5hdGl2ZXxldmFsfDxhbm9ueW1vdXM+KS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaSxcblx0ICAgICAgICAgICAgZ2Vja28gPSAvXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHJlc291cmNlfFxcW25hdGl2ZSkuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaSxcblx0ICAgICAgICAgICAgd2luanMgPSAvXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/LispICk/XFwoPygoPzpmaWxlfG1zLWFwcHh8aHR0cHM/fGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2ksXG5cdCAgICAgICAgICAgIGxpbmVzID0gZXguc3RhY2suc3BsaXQoJ1xcbicpLFxuXHQgICAgICAgICAgICBzdGFjayA9IFtdLFxuXHQgICAgICAgICAgICBwYXJ0cyxcblx0ICAgICAgICAgICAgZWxlbWVudCxcblx0ICAgICAgICAgICAgcmVmZXJlbmNlID0gL14oLiopIGlzIHVuZGVmaW5lZCQvLmV4ZWMoZXgubWVzc2FnZSk7XG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGxpbmVzLmxlbmd0aDsgaSA8IGo7ICsraSkge1xuXHQgICAgICAgICAgICBpZiAocGFydHMgPSBjaHJvbWUuZXhlYyhsaW5lc1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpc05hdGl2ZSA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ25hdGl2ZScpICE9PSAtMTtcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgJ3VybCc6ICFpc05hdGl2ZSA/IHBhcnRzWzJdIDogbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAnZnVuYyc6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG5cdCAgICAgICAgICAgICAgICAgICAgJ2FyZ3MnOiBpc05hdGl2ZSA/IFtwYXJ0c1syXV0gOiBbXSxcblx0ICAgICAgICAgICAgICAgICAgICAnbGluZSc6IHBhcnRzWzNdID8gK3BhcnRzWzNdIDogbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAnY29sdW1uJzogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzID0gd2luanMuZXhlYyhsaW5lc1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgJ3VybCc6IHBhcnRzWzJdLFxuXHQgICAgICAgICAgICAgICAgICAgICdmdW5jJzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcblx0ICAgICAgICAgICAgICAgICAgICAnYXJncyc6IFtdLFxuXHQgICAgICAgICAgICAgICAgICAgICdsaW5lJzogK3BhcnRzWzNdLFxuXHQgICAgICAgICAgICAgICAgICAgICdjb2x1bW4nOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGxcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHMgPSBnZWNrby5leGVjKGxpbmVzW2ldKSkge1xuXHQgICAgICAgICAgICAgICAgZWxlbWVudCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAndXJsJzogcGFydHNbM10sXG5cdCAgICAgICAgICAgICAgICAgICAgJ2Z1bmMnOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuXHQgICAgICAgICAgICAgICAgICAgICdhcmdzJzogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnLCcpIDogW10sXG5cdCAgICAgICAgICAgICAgICAgICAgJ2xpbmUnOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgJ2NvbHVtbic6IHBhcnRzWzVdID8gK3BhcnRzWzVdIDogbnVsbFxuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKCFlbGVtZW50LmZ1bmMgJiYgZWxlbWVudC5saW5lKSB7XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50LmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoIXN0YWNrWzBdLmNvbHVtbiAmJiB0eXBlb2YgZXguY29sdW1uTnVtYmVyICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgICAvLyBGaXJlRm94IHVzZXMgdGhpcyBhd2Vzb21lIGNvbHVtbk51bWJlciBwcm9wZXJ0eSBmb3IgaXRzIHRvcCBmcmFtZVxuXHQgICAgICAgICAgICAvLyBBbHNvIG5vdGUsIEZpcmVmb3gncyBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQgYW5kIGV2ZXJ5dGhpbmcgZWxzZSBleHBlY3RzIDEtYmFzZWQsXG5cdCAgICAgICAgICAgIC8vIHNvIGFkZGluZyAxXG5cdCAgICAgICAgICAgIHN0YWNrWzBdLmNvbHVtbiA9IGV4LmNvbHVtbk51bWJlciArIDE7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgJ25hbWUnOiBleC5uYW1lLFxuXHQgICAgICAgICAgICAnbWVzc2FnZSc6IGV4Lm1lc3NhZ2UsXG5cdCAgICAgICAgICAgICd1cmwnOiBnZXRMb2NhdGlvbkhyZWYoKSxcblx0ICAgICAgICAgICAgJ3N0YWNrJzogc3RhY2tcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEFkZHMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZpcnN0IGZyYW1lIHRvIGluY29tcGxldGUgc3RhY2sgdHJhY2VzLlxuXHQgICAgICogU2FmYXJpIGFuZCBJRSByZXF1aXJlIHRoaXMgdG8gZ2V0IGNvbXBsZXRlIGRhdGEgb24gdGhlIGZpcnN0IGZyYW1lLlxuXHQgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IHN0YWNrSW5mbyBTdGFjayB0cmFjZSBpbmZvcm1hdGlvbiBmcm9tXG5cdCAgICAgKiBvbmUgb2YgdGhlIGNvbXB1dGUqIG1ldGhvZHMuXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgb2YgdGhlIHNjcmlwdCB0aGF0IGNhdXNlZCBhbiBlcnJvci5cblx0ICAgICAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBsaW5lTm8gVGhlIGxpbmUgbnVtYmVyIG9mIHRoZSBzY3JpcHQgdGhhdFxuXHQgICAgICogY2F1c2VkIGFuIGVycm9yLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBlcnJvciBnZW5lcmF0ZWQgYnkgdGhlIGJyb3dzZXIsIHdoaWNoXG5cdCAgICAgKiBob3BlZnVsbHkgY29udGFpbnMgdGhlIG5hbWUgb2YgdGhlIG9iamVjdCB0aGF0IGNhdXNlZCB0aGUgZXJyb3IuXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgc3RhY2sgaW5mb3JtYXRpb24gd2FzXG5cdCAgICAgKiBhdWdtZW50ZWQuXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50KHN0YWNrSW5mbywgdXJsLCBsaW5lTm8sIG1lc3NhZ2UpIHtcblx0ICAgICAgICB2YXIgaW5pdGlhbCA9IHtcblx0ICAgICAgICAgICAgJ3VybCc6IHVybCxcblx0ICAgICAgICAgICAgJ2xpbmUnOiBsaW5lTm9cblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgaWYgKGluaXRpYWwudXJsICYmIGluaXRpYWwubGluZSkge1xuXHQgICAgICAgICAgICBzdGFja0luZm8uaW5jb21wbGV0ZSA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgIGlmICghaW5pdGlhbC5mdW5jKSB7XG5cdCAgICAgICAgICAgICAgICBpbml0aWFsLmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHN0YWNrSW5mby5zdGFjay5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhY2tJbmZvLnN0YWNrWzBdLnVybCA9PT0gaW5pdGlhbC51cmwpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2tJbmZvLnN0YWNrWzBdLmxpbmUgPT09IGluaXRpYWwubGluZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGFscmVhZHkgaW4gc3RhY2sgdHJhY2Vcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzdGFja0luZm8uc3RhY2tbMF0ubGluZSAmJiBzdGFja0luZm8uc3RhY2tbMF0uZnVuYyA9PT0gaW5pdGlhbC5mdW5jKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrSW5mby5zdGFja1swXS5saW5lID0gaW5pdGlhbC5saW5lO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgc3RhY2tJbmZvLnN0YWNrLnVuc2hpZnQoaW5pdGlhbCk7XG5cdCAgICAgICAgICAgIHN0YWNrSW5mby5wYXJ0aWFsID0gdHJ1ZTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgc3RhY2tJbmZvLmluY29tcGxldGUgPSB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBDb21wdXRlcyBzdGFjayB0cmFjZSBpbmZvcm1hdGlvbiBieSB3YWxraW5nIHRoZSBhcmd1bWVudHMuY2FsbGVyXG5cdCAgICAgKiBjaGFpbiBhdCB0aGUgdGltZSB0aGUgZXhjZXB0aW9uIG9jY3VycmVkLiBUaGlzIHdpbGwgY2F1c2UgZWFybGllclxuXHQgICAgICogZnJhbWVzIHRvIGJlIG1pc3NlZCBidXQgaXMgdGhlIG9ubHkgd2F5IHRvIGdldCBhbnkgc3RhY2sgdHJhY2UgaW5cblx0ICAgICAqIFNhZmFyaSBhbmQgSUUuIFRoZSB0b3AgZnJhbWUgaXMgcmVzdG9yZWQgYnlcblx0ICAgICAqIHtAbGluayBhdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudH0uXG5cdCAgICAgKiBAcGFyYW0ge0Vycm9yfSBleFxuXHQgICAgICogQHJldHVybiB7P09iamVjdC48c3RyaW5nLCAqPn0gU3RhY2sgdHJhY2UgaW5mb3JtYXRpb24uXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlQnlXYWxraW5nQ2FsbGVyQ2hhaW4oZXgsIGRlcHRoKSB7XG5cdCAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IC9mdW5jdGlvblxccysoW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSopP1xccypcXCgvaSxcblx0ICAgICAgICAgICAgc3RhY2sgPSBbXSxcblx0ICAgICAgICAgICAgZnVuY3MgPSB7fSxcblx0ICAgICAgICAgICAgcmVjdXJzaW9uID0gZmFsc2UsXG5cdCAgICAgICAgICAgIHBhcnRzLFxuXHQgICAgICAgICAgICBpdGVtLFxuXHQgICAgICAgICAgICBzb3VyY2U7XG5cblx0ICAgICAgICBmb3IgKHZhciBjdXJyID0gY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbi5jYWxsZXI7IGN1cnIgJiYgIXJlY3Vyc2lvbjsgY3VyciA9IGN1cnIuY2FsbGVyKSB7XG5cdCAgICAgICAgICAgIGlmIChjdXJyID09PSBjb21wdXRlU3RhY2tUcmFjZSB8fCBjdXJyID09PSBUcmFjZUtpdC5yZXBvcnQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdza2lwcGluZyBpbnRlcm5hbCBmdW5jdGlvbicpO1xuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpdGVtID0ge1xuXHQgICAgICAgICAgICAgICAgJ3VybCc6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAnZnVuYyc6IFVOS05PV05fRlVOQ1RJT04sXG5cdCAgICAgICAgICAgICAgICAnbGluZSc6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAnY29sdW1uJzogbnVsbFxuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIGlmIChjdXJyLm5hbWUpIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0uZnVuYyA9IGN1cnIubmFtZTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0cyA9IGZ1bmN0aW9uTmFtZS5leGVjKGN1cnIudG9TdHJpbmcoKSkpIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0uZnVuYyA9IHBhcnRzWzFdO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtLmZ1bmMgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uZnVuYyA9IHBhcnRzLmlucHV0LnN1YnN0cmluZygwLCBwYXJ0cy5pbnB1dC5pbmRleE9mKCd7JykpO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChmdW5jc1snJyArIGN1cnJdKSB7XG5cdCAgICAgICAgICAgICAgICByZWN1cnNpb24gPSB0cnVlO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZnVuY3NbJycgKyBjdXJyXSA9IHRydWU7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBzdGFjay5wdXNoKGl0ZW0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChkZXB0aCkge1xuXHQgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZGVwdGggaXMgJyArIGRlcHRoKTtcblx0ICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3N0YWNrIGlzICcgKyBzdGFjay5sZW5ndGgpO1xuXHQgICAgICAgICAgICBzdGFjay5zcGxpY2UoMCwgZGVwdGgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciByZXN1bHQgPSB7XG5cdCAgICAgICAgICAgICduYW1lJzogZXgubmFtZSxcblx0ICAgICAgICAgICAgJ21lc3NhZ2UnOiBleC5tZXNzYWdlLFxuXHQgICAgICAgICAgICAndXJsJzogZ2V0TG9jYXRpb25IcmVmKCksXG5cdCAgICAgICAgICAgICdzdGFjayc6IHN0YWNrXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBhdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudChyZXN1bHQsIGV4LnNvdXJjZVVSTCB8fCBleC5maWxlTmFtZSwgZXgubGluZSB8fCBleC5saW5lTnVtYmVyLCBleC5tZXNzYWdlIHx8IGV4LmRlc2NyaXB0aW9uKTtcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIENvbXB1dGVzIGEgc3RhY2sgdHJhY2UgZm9yIGFuIGV4Y2VwdGlvbi5cblx0ICAgICAqIEBwYXJhbSB7RXJyb3J9IGV4XG5cdCAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGRlcHRoXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlKGV4LCBkZXB0aCkge1xuXHQgICAgICAgIHZhciBzdGFjayA9IG51bGw7XG5cdCAgICAgICAgZGVwdGggPSBkZXB0aCA9PSBudWxsID8gMCA6ICtkZXB0aDtcblxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wKGV4KTtcblx0ICAgICAgICAgICAgaWYgKHN0YWNrKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChUcmFjZUtpdC5kZWJ1Zykge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbihleCwgZGVwdGggKyAxKTtcblx0ICAgICAgICAgICAgaWYgKHN0YWNrKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChUcmFjZUtpdC5kZWJ1Zykge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICduYW1lJzogZXgubmFtZSxcblx0ICAgICAgICAgICAgJ21lc3NhZ2UnOiBleC5tZXNzYWdlLFxuXHQgICAgICAgICAgICAndXJsJzogZ2V0TG9jYXRpb25IcmVmKClcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXG5cdCAgICBjb21wdXRlU3RhY2tUcmFjZS5hdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudCA9IGF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50O1xuXHQgICAgY29tcHV0ZVN0YWNrVHJhY2UuY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wO1xuXG5cdCAgICByZXR1cm4gY29tcHV0ZVN0YWNrVHJhY2U7XG5cdH0oKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IFRyYWNlS2l0O1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBlbmhhbmNlRnVuYztcblx0LyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogZmFsc2UgfV0gKi9cblxuXHRmdW5jdGlvbiBlbmhhbmNlRnVuYyhvYmosIG1ldGhvZCwgaGFuZGxlcikge1xuXHQgIHZhciBvcmlnaW5hbCA9IG9ialttZXRob2RdO1xuXG5cdCAgZnVuY3Rpb24gc2hpbSgpIHtcblx0ICAgIHZhciByZXMgPSB2b2lkIDA7XG5cblx0ICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICB9XG5cblx0ICAgIGlmIChvcmlnaW5hbCkge1xuXHQgICAgICByZXMgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgIH1cblxuXHQgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgIHJldHVybiByZXM7XG5cdCAgfVxuXG5cdCAgb2JqW21ldGhvZF0gPSBzaGltO1xuXG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIG9ialttZXRob2RdID0gb3JpZ2luYWw7XG5cdCAgfTtcblx0fVxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG5bMjcsIDhdLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX3JlZ2lzdGVyQ29uc29sZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cblx0dmFyIF9yZWdpc3RlckNvbnNvbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnaXN0ZXJDb25zb2xlKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IF9yZWdpc3RlckNvbnNvbGUyLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gcmVnaXN0ZXJDb25zb2xlO1xuXG5cdHZhciBfZW5oYW5jZUZ1bmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBfZW5oYW5jZUZ1bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW5oYW5jZUZ1bmMpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gcmVnaXN0ZXJDb25zb2xlKGxvZ2dlcikge1xuXHQgIHZhciB1bnN1YkZ1bmN0aW9ucyA9IFtdO1xuXHQgIHZhciBtZXRob2RzID0gWydsb2cnLCAnd2FybicsICdpbmZvJywgJ2Vycm9yJywgJ2RlYnVnJ107XG5cdCAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAgIHVuc3ViRnVuY3Rpb25zLnB1c2goKDAsIF9lbmhhbmNlRnVuYzIuZGVmYXVsdCkoY29uc29sZSwgbWV0aG9kLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGxvZ2dlci5hZGRFdmVudCgnbHIuY29yZS5Mb2dFdmVudCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG5cdCAgICAgICAgICAgIF9yZWYkaXNFbmFibGVkID0gX3JlZi5pc0VuYWJsZWQsXG5cdCAgICAgICAgICAgIGlzRW5hYmxlZCA9IF9yZWYkaXNFbmFibGVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRpc0VuYWJsZWQ7XG5cblx0ICAgICAgICBpZiAoKHR5cGVvZiBpc0VuYWJsZWQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlzRW5hYmxlZCkpID09PSAnb2JqZWN0JyAmJiBpc0VuYWJsZWRbbWV0aG9kXSA9PT0gZmFsc2UgfHwgaXNFbmFibGVkID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIGxvZ0xldmVsOiBtZXRob2QudG9VcHBlckNhc2UoKSxcblx0ICAgICAgICAgIGFyZ3M6IGFyZ3Ncblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgIH0pKTtcblx0ICB9KTtcblxuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICB1bnN1YkZ1bmN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh1bnN1YkZ1bmN0aW9uKSB7XG5cdCAgICAgIHJldHVybiB1bnN1YkZ1bmN0aW9uKCk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHR9XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cblsyNywgMTFdLFxuLyogMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuQ2FwdHVyZSA9IGV4cG9ydHMucmVnaXN0ZXJFeGNlcHRpb25zID0gdW5kZWZpbmVkO1xuXG5cdHZhciBfcmVnaXN0ZXJFeGNlcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cblx0dmFyIF9yZWdpc3RlckV4Y2VwdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnaXN0ZXJFeGNlcHRpb25zKTtcblxuXHR2YXIgX0NhcHR1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBDYXB0dXJlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0NhcHR1cmUpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLnJlZ2lzdGVyRXhjZXB0aW9ucyA9IF9yZWdpc3RlckV4Y2VwdGlvbnMyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuQ2FwdHVyZSA9IENhcHR1cmU7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7IC8qIGVzbGludC1kaXNhYmxlICovXG5cblx0dmFyIF9UcmFjZUtpdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0dmFyIF9UcmFjZUtpdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmFjZUtpdCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdHZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5cdGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHdoYXQpIHtcblx0ICByZXR1cm4gd2hhdCA9PT0gdm9pZCAwO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNGdW5jdGlvbih3aGF0KSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB3aGF0ID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cblx0ZnVuY3Rpb24gZWFjaChvYmosIGNhbGxiYWNrKSB7XG5cdCAgdmFyIGksIGo7XG5cblx0ICBpZiAoaXNVbmRlZmluZWQob2JqLmxlbmd0aCkpIHtcblx0ICAgIGZvciAoaSBpbiBvYmopIHtcblx0ICAgICAgaWYgKGhhc0tleShvYmosIGkpKSB7XG5cdCAgICAgICAgY2FsbGJhY2suY2FsbChudWxsLCBpLCBvYmpbaV0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIGogPSBvYmoubGVuZ3RoO1xuXHQgICAgaWYgKGopIHtcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IGo7IGkrKykge1xuXHQgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCwgaSwgb2JqW2ldKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXG5cdC8qKlxuXHQgKiBoYXNLZXksIGEgYmV0dGVyIGZvcm0gb2YgaGFzT3duUHJvcGVydHlcblx0ICogRXhhbXBsZTogaGFzS2V5KE1haW5Ib3N0T2JqZWN0LCBwcm9wZXJ0eSkgPT09IHRydWUvZmFsc2Vcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGhvc3Qgb2JqZWN0IHRvIGNoZWNrIHByb3BlcnR5XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gY2hlY2tcblx0ICovXG5cdGZ1bmN0aW9uIGhhc0tleShvYmplY3QsIGtleSkge1xuXHQgIHJldHVybiBvYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG5cdH1cblxuXHQvKipcblx0ICogUG9seWZpbGwgYSBtZXRob2Rcblx0ICogQHBhcmFtIG9iaiBvYmplY3QgZS5nLiBgZG9jdW1lbnRgXG5cdCAqIEBwYXJhbSBuYW1lIG1ldGhvZCBuYW1lIHByZXNlbnQgb24gb2JqZWN0IGUuZy4gYGFkZEV2ZW50TGlzdGVuZXJgXG5cdCAqIEBwYXJhbSByZXBsYWNlbWVudCByZXBsYWNlbWVudCBmdW5jdGlvblxuXHQgKiBAcGFyYW0gdHJhY2sge29wdGlvbmFsfSByZWNvcmQgaW5zdHJ1bWVudGF0aW9uIHRvIGFuIGFycmF5XG5cdCAqL1xuXHRmdW5jdGlvbiBmaWxsKG9iaiwgbmFtZSwgcmVwbGFjZW1lbnQsIHRyYWNrKSB7XG5cdCAgdmFyIG9yaWcgPSBvYmpbbmFtZV07XG5cdCAgb2JqW25hbWVdID0gcmVwbGFjZW1lbnQob3JpZyk7XG5cdCAgaWYgKHRyYWNrKSB7XG5cdCAgICB0cmFjay5wdXNoKFtvYmosIG5hbWUsIG9yaWddKTtcblx0ICB9XG5cdH1cblxuXHR2YXIgX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cdHZhciBfZG9jdW1lbnQgPSBfd2luZG93LmRvY3VtZW50O1xuXG5cdHZhciBIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIEhhbmRsZXIoX3JlZikge1xuXHQgICAgdmFyIGNhcHR1cmVFeGNlcHRpb24gPSBfcmVmLmNhcHR1cmVFeGNlcHRpb247XG5cblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYW5kbGVyKTtcblxuXHQgICAgdGhpcy5fZXJyb3JIYW5kbGVyID0gdGhpcy5fZXJyb3JIYW5kbGVyLmJpbmQodGhpcyk7XG5cblx0ICAgIHRoaXMuX2lnbm9yZU9uRXJyb3IgPSAwO1xuXHQgICAgdGhpcy5fd3JhcHBlZEJ1aWx0SW5zID0gW107XG5cdCAgICB0aGlzLmNhcHR1cmVFeGNlcHRpb24gPSBjYXB0dXJlRXhjZXB0aW9uO1xuXHQgICAgX1RyYWNlS2l0Mi5kZWZhdWx0LnJlcG9ydC5zdWJzY3JpYmUodGhpcy5fZXJyb3JIYW5kbGVyKTtcblx0ICAgIHRoaXMuX2luc3RydW1lbnRUcnlDYXRjaCgpO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhIYW5kbGVyLCBbe1xuXHQgICAga2V5OiAndW5pbnN0YWxsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1bmluc3RhbGwoKSB7XG5cdCAgICAgIF9UcmFjZUtpdDIuZGVmYXVsdC5yZXBvcnQudW5zdWJzY3JpYmUodGhpcy5fZXJyb3JIYW5kbGVyKTtcblxuXHQgICAgICAvLyByZXN0b3JlIGFueSB3cmFwcGVkIGJ1aWx0aW5zXG5cdCAgICAgIHZhciBidWlsdGluO1xuXHQgICAgICB3aGlsZSAodGhpcy5fd3JhcHBlZEJ1aWx0SW5zLmxlbmd0aCkge1xuXHQgICAgICAgIGJ1aWx0aW4gPSB0aGlzLl93cmFwcGVkQnVpbHRJbnMuc2hpZnQoKTtcblxuXHQgICAgICAgIHZhciBvYmogPSBidWlsdGluWzBdLFxuXHQgICAgICAgICAgICBuYW1lID0gYnVpbHRpblsxXSxcblx0ICAgICAgICAgICAgb3JpZyA9IGJ1aWx0aW5bMl07XG5cblx0ICAgICAgICBvYmpbbmFtZV0gPSBvcmlnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnX2Vycm9ySGFuZGxlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2Vycm9ySGFuZGxlcihyZXBvcnQpIHtcblx0ICAgICAgaWYgKCF0aGlzLl9pZ25vcmVPbkVycm9yKSB7XG5cdCAgICAgICAgdGhpcy5jYXB0dXJlRXhjZXB0aW9uKHJlcG9ydCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfaWdub3JlTmV4dE9uRXJyb3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9pZ25vcmVOZXh0T25FcnJvcigpIHtcblx0ICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgICB0aGlzLl9pZ25vcmVPbkVycm9yICs9IDE7XG5cdCAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIHRyaWdnZXIgYmVmb3JlIHNldFRpbWVvdXRcblx0ICAgICAgICBfdGhpcy5faWdub3JlT25FcnJvciAtPSAxO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgLypcblx0ICAgICAqIFdyYXAgY29kZSB3aXRoaW4gYSBjb250ZXh0IHNvIEhhbmRsZXIgY2FuIGNhcHR1cmUgZXJyb3JzXG5cdCAgICAgKiByZWxpYWJseSBhY3Jvc3MgZG9tYWlucyB0aGF0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEEgc3BlY2lmaWMgc2V0IG9mIG9wdGlvbnMgZm9yIHRoaXMgY29udGV4dCBbb3B0aW9uYWxdXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIFRoZSBjYWxsYmFjayB0byBiZSBpbW1lZGlhdGVseSBleGVjdXRlZCB3aXRoaW4gdGhlIGNvbnRleHRcblx0ICAgICAqIEBwYXJhbSB7YXJyYXl9IGFyZ3MgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBjYWxsYmFjayBbb3B0aW9uYWxdXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbnRleHQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRleHQob3B0aW9ucywgZnVuYywgYXJncykge1xuXHQgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuXHQgICAgICAgIGFyZ3MgPSBmdW5jIHx8IFtdO1xuXHQgICAgICAgIGZ1bmMgPSBvcHRpb25zO1xuXHQgICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy53cmFwKG9wdGlvbnMsIGZ1bmMpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3dyYXAnLFxuXG5cblx0ICAgIC8qXG5cdCAgICAgKiBXcmFwIGNvZGUgd2l0aGluIGEgY29udGV4dCBhbmQgcmV0dXJucyBiYWNrIGEgbmV3IGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQSBzcGVjaWZpYyBzZXQgb2Ygb3B0aW9ucyBmb3IgdGhpcyBjb250ZXh0IFtvcHRpb25hbF1cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJlIHdyYXBwZWQgaW4gYSBuZXcgY29udGV4dFxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBBIGZ1bmN0aW9uIHRvIGNhbGwgYmVmb3JlIHRoZSB0cnkvY2F0Y2ggd3JhcHBlciBbb3B0aW9uYWwsIHByaXZhdGVdXG5cdCAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIG5ld2x5IHdyYXBwZWQgZnVuY3Rpb25zIHdpdGggYSBjb250ZXh0XG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB3cmFwKG9wdGlvbnMsIGZ1bmMsIF9iZWZvcmUpIHtcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICAvLyAxIGFyZ3VtZW50IGhhcyBiZWVuIHBhc3NlZCwgYW5kIGl0J3Mgbm90IGEgZnVuY3Rpb25cblx0ICAgICAgLy8gc28ganVzdCByZXR1cm4gaXRcblx0ICAgICAgaWYgKGlzVW5kZWZpbmVkKGZ1bmMpICYmICFpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG5cdCAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBvcHRpb25zIGlzIG9wdGlvbmFsXG5cdCAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG5cdCAgICAgICAgZnVuYyA9IG9wdGlvbnM7XG5cdCAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlJ3ZlIHBhc3NlZCBhbG9uZyAyIGFyZ3VtZW50cywgYW5kIHRoZSBzZWNvbmQgb25lXG5cdCAgICAgIC8vIGlzIG5vdCBhIGZ1bmN0aW9uIGVpdGhlciwgc28gd2UnbGwganVzdCByZXR1cm4gdGhlIHNlY29uZCBhcmd1bWVudC5cblx0ICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmM7XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBXZSBkb24ndCB3YW5uYSB3cmFwIGl0IHR3aWNlIVxuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGlmIChmdW5jLl9fbHJfXykge1xuXHQgICAgICAgICAgcmV0dXJuIGZ1bmM7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSWYgdGhpcyBoYXMgYWxyZWFkeSBiZWVuIHdyYXBwZWQgaW4gdGhlIHBhc3QsIHJldHVybiB0aGF0XG5cdCAgICAgICAgaWYgKGZ1bmMuX19scl93cmFwcGVyX18pIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jLl9fbHJfd3JhcHBlcl9fO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuXHQgICAgICAgIC8vIGNhbiBjYXVzZSBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBleGNlcHRpb24gKHNlZSBsci1qcyM0OTUpLlxuXHQgICAgICAgIC8vIEJhaWwgb24gd3JhcHBpbmcgYW5kIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgKGRlZmVycyB0byB3aW5kb3cub25lcnJvcikuXG5cdCAgICAgICAgcmV0dXJuIGZ1bmM7XG5cdCAgICAgIH1cblxuXHQgICAgICBmdW5jdGlvbiB3cmFwcGVkKCkge1xuXHQgICAgICAgIHZhciBhcmdzID0gW10sXG5cdCAgICAgICAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoLFxuXHQgICAgICAgICAgICBkZWVwID0gIW9wdGlvbnMgfHwgb3B0aW9ucyAmJiBvcHRpb25zLmRlZXAgIT09IGZhbHNlO1xuXG5cdCAgICAgICAgaWYgKF9iZWZvcmUgJiYgaXNGdW5jdGlvbihfYmVmb3JlKSkge1xuXHQgICAgICAgICAgX2JlZm9yZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHdyYXAgYWxsIG9mIGEgZnVuY3Rpb24ncyBhcmd1bWVudHMgdGhhdCBhcmVcblx0ICAgICAgICAvLyBmdW5jdGlvbnMgdGhlbXNlbHZlcy5cblx0ICAgICAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgICAgICBhcmdzW2ldID0gZGVlcCA/IHNlbGYud3JhcChvcHRpb25zLCBhcmd1bWVudHNbaV0pIDogYXJndW1lbnRzW2ldO1xuXHQgICAgICAgIH10cnkge1xuXHQgICAgICAgICAgLy8gQXR0ZW1wdCB0byBpbnZva2UgdXNlci1sYW5kIGZ1bmN0aW9uLiBUaGlzIGlzIHBhcnQgb2YgdGhlIExvZ1JvY2tldCBTREsuXG5cdCAgICAgICAgICAvLyBJZiB5b3UncmUgc2VlaW5nIHRoaXMgZnJhbWUgaW4gYSBzdGFjayB0cmFjZSwgaXQgbWVhbnMgdGhhdCBMb2dSb2NrZXQgY2F1Z2h0XG5cdCAgICAgICAgICAvLyBhbiB1bmhhbmRsZWQgZXJyb3IgdGhyb3duIGJ5IHlvdXIgYXBwbGljYXRpb24gY29kZSwgcmVwb3J0ZWQgaXQsIHRoZW4gYnViYmxlZFxuXHQgICAgICAgICAgLy8gaXQgdXAuIFRoaXMgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIGlzIG5vdCBhIGJ1ZyB3aXRoIExvZ1JvY2tldC5cblx0ICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIHNlbGYuX2lnbm9yZU5leHRPbkVycm9yKCk7XG5cdCAgICAgICAgICBzZWxmLmNhcHR1cmVFeGNlcHRpb24oX1RyYWNlS2l0Mi5kZWZhdWx0LmNvbXB1dGVTdGFja1RyYWNlKGUpLCBvcHRpb25zKTtcblx0ICAgICAgICAgIHRocm93IGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgLy8gY29weSBvdmVyIHByb3BlcnRpZXMgb2YgdGhlIG9sZCBmdW5jdGlvblxuXHQgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBmdW5jKSB7XG5cdCAgICAgICAgaWYgKGhhc0tleShmdW5jLCBwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgIHdyYXBwZWRbcHJvcGVydHldID0gZnVuY1twcm9wZXJ0eV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHdyYXBwZWQucHJvdG90eXBlID0gZnVuYy5wcm90b3R5cGU7XG5cblx0ICAgICAgZnVuYy5fX2xyX3dyYXBwZXJfXyA9IHdyYXBwZWQ7XG5cdCAgICAgIC8vIFNpZ25hbCB0aGF0IHRoaXMgZnVuY3Rpb24gaGFzIGJlZW4gd3JhcHBlZCBhbHJlYWR5XG5cdCAgICAgIC8vIGZvciBib3RoIGRlYnVnZ2luZyBhbmQgdG8gcHJldmVudCBpdCB0byBiZWluZyB3cmFwcGVkIHR3aWNlXG5cdCAgICAgIHdyYXBwZWQuX19scl9fID0gdHJ1ZTtcblx0ICAgICAgd3JhcHBlZC5fX2lubmVyX18gPSBmdW5jO1xuXG5cdCAgICAgIHJldHVybiB3cmFwcGVkO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19pbnN0cnVtZW50VHJ5Q2F0Y2gnLFxuXG5cblx0ICAgIC8qKlxuXHQgICAgICogSW5zdGFsbCBhbnkgcXVldWVkIHBsdWdpbnNcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnN0cnVtZW50VHJ5Q2F0Y2goKSB7XG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcblxuXHQgICAgICB2YXIgd3JhcHBlZEJ1aWx0SW5zID0gc2VsZi5fd3JhcHBlZEJ1aWx0SW5zO1xuXG5cdCAgICAgIGZ1bmN0aW9uIHdyYXBUaW1lRm4ob3JpZykge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZm4sIHQpIHtcblx0ICAgICAgICAgIC8vIHByZXNlcnZlIGFyaXR5XG5cdCAgICAgICAgICAvLyBNYWtlIGEgY29weSBvZiB0aGUgYXJndW1lbnRzIHRvIHByZXZlbnQgZGVvcHRpbWl6YXRpb25cblx0ICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50c1xuXHQgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhciBvcmlnaW5hbENhbGxiYWNrID0gYXJnc1swXTtcblx0ICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9yaWdpbmFsQ2FsbGJhY2spKSB7XG5cdCAgICAgICAgICAgIGFyZ3NbMF0gPSBzZWxmLndyYXAob3JpZ2luYWxDYWxsYmFjayk7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIC8vIElFIDwgOSBkb2Vzbid0IHN1cHBvcnQgLmNhbGwvLmFwcGx5IG9uIHNldEludGVydmFsL3NldFRpbWVvdXQsIGJ1dCBpdFxuXHQgICAgICAgICAgLy8gYWxzbyBzdXBwb3J0cyBvbmx5IHR3byBhcmd1bWVudHMgYW5kIGRvZXNuJ3QgY2FyZSB3aGF0IHRoaXMgaXMsIHNvIHdlXG5cdCAgICAgICAgICAvLyBjYW4ganVzdCBjYWxsIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBkaXJlY3RseS5cblx0ICAgICAgICAgIGlmIChvcmlnLmFwcGx5KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvcmlnLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG9yaWcoYXJnc1swXSwgYXJnc1sxXSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGZ1bmN0aW9uIHdyYXBFdmVudFRhcmdldChnbG9iYWwpIHtcblx0ICAgICAgICB2YXIgcHJvdG8gPSBfd2luZG93W2dsb2JhbF0gJiYgX3dpbmRvd1tnbG9iYWxdLnByb3RvdHlwZTtcblx0ICAgICAgICBpZiAocHJvdG8gJiYgcHJvdG8uaGFzT3duUHJvcGVydHkgJiYgcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuXHQgICAgICAgICAgZmlsbChwcm90bywgJ2FkZEV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZykge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2dE5hbWUsIGZuLCBjYXB0dXJlLCBzZWN1cmUpIHtcblx0ICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBhcml0eVxuXHQgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZm4gJiYgZm4uaGFuZGxlRXZlbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgZm4uaGFuZGxlRXZlbnQgPSBzZWxmLndyYXAoZm4uaGFuZGxlRXZlbnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgICAgICAgICAgICAvLyBjYW4gc29tZXRpbWVzIGdldCAnUGVybWlzc2lvbiBkZW5pZWQgdG8gYWNjZXNzIHByb3BlcnR5IFwiaGFuZGxlIEV2ZW50J1xuXG5cblx0ICAgICAgICAgICAgICAvLyBNb3JlIGJyZWFkY3J1bWIgRE9NIGNhcHR1cmUgLi4uIGRvbmUgaGVyZSBhbmQgbm90IGluIGBfaW5zdHJ1bWVudEJyZWFkY3J1bWJzYFxuXHQgICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSBtb3JlIHRoYW4gb25lIHdyYXBwZXIgZnVuY3Rpb25cblx0ICAgICAgICAgICAgICB2YXIgYmVmb3JlO1xuXG5cdCAgICAgICAgICAgICAgcmV0dXJuIG9yaWcuY2FsbCh0aGlzLCBldnROYW1lLCBzZWxmLndyYXAoZm4sIHVuZGVmaW5lZCwgYmVmb3JlKSwgY2FwdHVyZSwgc2VjdXJlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgIH0sIHdyYXBwZWRCdWlsdElucyk7XG5cdCAgICAgICAgICBmaWxsKHByb3RvLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZ0LCBmbiwgY2FwdHVyZSwgc2VjdXJlKSB7XG5cdCAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIGZuID0gZm4gJiYgKGZuLl9fbHJfd3JhcHBlcl9fID8gZm4uX19scl93cmFwcGVyX18gOiBmbik7XG5cdCAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgLy8gaWdub3JlLCBhY2Nlc3NpbmcgX19scl93cmFwcGVyX18gd2lsbCB0aHJvdyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIGV2dCwgZm4sIGNhcHR1cmUsIHNlY3VyZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9LCB3cmFwcGVkQnVpbHRJbnMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGZpbGwoX3dpbmRvdywgJ3NldFRpbWVvdXQnLCB3cmFwVGltZUZuLCB3cmFwcGVkQnVpbHRJbnMpO1xuXHQgICAgICBmaWxsKF93aW5kb3csICdzZXRJbnRlcnZhbCcsIHdyYXBUaW1lRm4sIHdyYXBwZWRCdWlsdElucyk7XG5cdCAgICAgIGlmIChfd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuXHQgICAgICAgIGZpbGwoX3dpbmRvdywgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsIGZ1bmN0aW9uIChvcmlnKSB7XG5cdCAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvcmlnKHNlbGYud3JhcChjYikpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9LCB3cmFwcGVkQnVpbHRJbnMpO1xuXHQgICAgICB9XG5cblx0ICAgICAgLy8gZXZlbnQgdGFyZ2V0cyBib3Jyb3dlZCBmcm9tIGJ1Z3NuYWctanM6XG5cdCAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9idWdzbmFnL2J1Z3NuYWctanMvYmxvYi9tYXN0ZXIvc3JjL2J1Z3NuYWcuanMjTDY2NlxuXHQgICAgICB2YXIgZXZlbnRUYXJnZXRzID0gWydFdmVudFRhcmdldCcsICdXaW5kb3cnLCAnTm9kZScsICdBcHBsaWNhdGlvbkNhY2hlJywgJ0F1ZGlvVHJhY2tMaXN0JywgJ0NoYW5uZWxNZXJnZXJOb2RlJywgJ0NyeXB0b09wZXJhdGlvbicsICdFdmVudFNvdXJjZScsICdGaWxlUmVhZGVyJywgJ0hUTUxVbmtub3duRWxlbWVudCcsICdJREJEYXRhYmFzZScsICdJREJSZXF1ZXN0JywgJ0lEQlRyYW5zYWN0aW9uJywgJ0tleU9wZXJhdGlvbicsICdNZWRpYUNvbnRyb2xsZXInLCAnTWVzc2FnZVBvcnQnLCAnTW9kYWxXaW5kb3cnLCAnTm90aWZpY2F0aW9uJywgJ1NWR0VsZW1lbnRJbnN0YW5jZScsICdTY3JlZW4nLCAnVGV4dFRyYWNrJywgJ1RleHRUcmFja0N1ZScsICdUZXh0VHJhY2tMaXN0JywgJ1dlYlNvY2tldCcsICdXZWJTb2NrZXRXb3JrZXInLCAnV29ya2VyJywgJ1hNTEh0dHBSZXF1ZXN0JywgJ1hNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQnLCAnWE1MSHR0cFJlcXVlc3RVcGxvYWQnXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudFRhcmdldHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB3cmFwRXZlbnRUYXJnZXQoZXZlbnRUYXJnZXRzW2ldKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciAkID0gX3dpbmRvdy5qUXVlcnkgfHwgX3dpbmRvdy4kO1xuXHQgICAgICBpZiAoJCAmJiAkLmZuICYmICQuZm4ucmVhZHkpIHtcblx0ICAgICAgICBmaWxsKCQuZm4sICdyZWFkeScsIGZ1bmN0aW9uIChvcmlnKSB7XG5cdCAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvcmlnLmNhbGwodGhpcywgc2VsZi53cmFwKGZuKSk7XG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0sIHdyYXBwZWRCdWlsdElucyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gSGFuZGxlcjtcblx0fSgpO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IEhhbmRsZXI7XG5cdDtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSByZWdpc3RlckNvcmU7XG5cblx0dmFyIF9yYXZlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG5cdHZhciBfcmF2ZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmF2ZW4pO1xuXG5cdHZhciBfQ2FwdHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIENhcHR1cmUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfQ2FwdHVyZSk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIHJlZ2lzdGVyQ29yZShsb2dnZXIpIHtcblx0ICB2YXIgcmF2ZW4gPSBuZXcgX3JhdmVuMi5kZWZhdWx0KHtcblx0ICAgIGNhcHR1cmVFeGNlcHRpb246IGZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oZXJyb3JSZXBvcnQpIHtcblx0ICAgICAgQ2FwdHVyZS5jYXB0dXJlRXhjZXB0aW9uKGxvZ2dlciwgbnVsbCwgbnVsbCwgZXJyb3JSZXBvcnQpO1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgdmFyIHJlamVjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiByZWplY3Rpb25IYW5kbGVyKGV2dCkge1xuXHQgICAgLy8gaHR0cDovLzJhbGl0eS5jb20vMjAxNi8wNC91bmhhbmRsZWQtcmVqZWN0aW9ucy5odG1sXG5cdCAgICBsb2dnZXIuYWRkRXZlbnQoJ2xyLmNvcmUuRXhjZXB0aW9uJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIGV4Y2VwdGlvblR5cGU6ICdVTkhBTkRMRURfUkVKRUNUSU9OJyxcblx0ICAgICAgICBtZXNzYWdlOiBldnQucmVhc29uIHx8ICdVbmhhbmRsZWQgUHJvbWlzZSByZWplY3Rpb24nXG5cdCAgICAgIH07XG5cdCAgICB9KTtcblx0ICB9O1xuXG5cdCAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHJlamVjdGlvbkhhbmRsZXIpO1xuXG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCByZWplY3Rpb25IYW5kbGVyKTtcblx0ICAgIHJhdmVuLnVuaW5zdGFsbCgpO1xuXHQgIH07XG5cdH1cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBzdGFja1RyYWNlRnJvbUVycm9yO1xuXHRmdW5jdGlvbiBzdGFja1RyYWNlRnJvbUVycm9yKGVycm9yUmVwb3J0KSB7XG5cdCAgZnVuY3Rpb24gbWFrZU5vdE51bGwodmFsKSB7XG5cdCAgICByZXR1cm4gdmFsID09PSBudWxsID8gdW5kZWZpbmVkIDogdmFsO1xuXHQgIH1cblxuXHQgIHJldHVybiBlcnJvclJlcG9ydC5zdGFjayA/IGVycm9yUmVwb3J0LnN0YWNrLm1hcChmdW5jdGlvbiAoZnJhbWUpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGxpbmVOdW1iZXI6IG1ha2VOb3ROdWxsKGZyYW1lLmxpbmUpLFxuXHQgICAgICBjb2x1bW5OdW1iZXI6IG1ha2VOb3ROdWxsKGZyYW1lLmNvbHVtbiksXG5cdCAgICAgIGZpbGVOYW1lOiBtYWtlTm90TnVsbChmcmFtZS51cmwpLFxuXHQgICAgICBmdW5jdGlvbk5hbWU6IG1ha2VOb3ROdWxsKGZyYW1lLmZ1bmMpXG5cdCAgICB9O1xuXHQgIH0pIDogdW5kZWZpbmVkO1xuXHR9XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cblsyNywgMTddLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF9yZWdpc3RlclhIUiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cblx0ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cblx0dmFyIGludGVyY2VwdG9ycyA9IFtdO1xuXG5cdGZ1bmN0aW9uIG1ha2VJbnRlcmNlcHRvcihmZXRjaCwgZmV0Y2hJZCkge1xuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgdmFyIHJldmVyc2VkSW50ZXJjZXB0b3JzID0gaW50ZXJjZXB0b3JzLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIGludGVyY2VwdG9yKSB7XG5cdCAgICByZXR1cm4gW2ludGVyY2VwdG9yXS5jb25jYXQoYXJyYXkpO1xuXHQgIH0sIFtdKTtcblx0ICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShhcmdzKTtcblxuXHQgIC8vIFJlZ2lzdGVyIHJlcXVlc3QgaW50ZXJjZXB0b3JzXG5cdCAgcmV2ZXJzZWRJbnRlcmNlcHRvcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuXHQgICAgdmFyIHJlcXVlc3QgPSBfcmVmLnJlcXVlc3QsXG5cdCAgICAgICAgcmVxdWVzdEVycm9yID0gX3JlZi5yZXF1ZXN0RXJyb3I7XG5cblx0ICAgIGlmIChyZXF1ZXN0IHx8IHJlcXVlc3RFcnJvcikge1xuXHQgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcmdzKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlcXVlc3QuYXBwbHkodW5kZWZpbmVkLCBbZmV0Y2hJZF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSkpO1xuXHQgICAgICB9LCBmdW5jdGlvbiAoYXJncykge1xuXHQgICAgICAgIHJldHVybiByZXF1ZXN0RXJyb3IuYXBwbHkodW5kZWZpbmVkLCBbZmV0Y2hJZF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSkpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9KTtcblxuXHQgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcblx0ICAgICgwLCBfcmVnaXN0ZXJYSFIuc2V0QWN0aXZlKShmYWxzZSk7XG5cblx0ICAgIHZhciByZXMgPSB2b2lkIDA7XG5cdCAgICB2YXIgZXJyID0gdm9pZCAwO1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmVzID0gZmV0Y2guYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuXHQgICAgfSBjYXRjaCAoX2Vycikge1xuXHQgICAgICBlcnIgPSBfZXJyO1xuXHQgICAgfVxuXG5cdCAgICAoMCwgX3JlZ2lzdGVyWEhSLnNldEFjdGl2ZSkodHJ1ZSk7XG5cblx0ICAgIGlmIChlcnIpIHtcblx0ICAgICAgdGhyb3cgZXJyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlcztcblx0ICB9KTtcblxuXHQgIHJldmVyc2VkSW50ZXJjZXB0b3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XG5cdCAgICB2YXIgcmVzcG9uc2UgPSBfcmVmMi5yZXNwb25zZSxcblx0ICAgICAgICByZXNwb25zZUVycm9yID0gX3JlZjIucmVzcG9uc2VFcnJvcjtcblxuXHQgICAgaWYgKHJlc3BvbnNlIHx8IHJlc3BvbnNlRXJyb3IpIHtcblx0ICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlc3BvbnNlKGZldGNoSWQsIHJlcyk7XG5cdCAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICByZXR1cm4gcmVzcG9uc2VFcnJvciAmJiByZXNwb25zZUVycm9yKGZldGNoSWQsIGVycik7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIHByb21pc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBhdHRhY2goZW52KSB7XG5cdCAgaWYgKCFlbnYuZmV0Y2ggfHwgIWVudi5Qcm9taXNlKSB7XG5cdCAgICAvLyBNYWtlIHN1cmUgZmV0Y2ggaXMgYXZhaWJhbGUgaW4gdGhlIGdpdmVuIGVudmlyb25tZW50LiBJZiBpdCdzIG5vdCwgdGhlblxuXHQgICAgLy8gZGVmYXVsdCB0byB1c2luZyBYSFIgaW50ZXJjZXB0LlxuXHQgICAgcmV0dXJuO1xuXHQgIH1cblxuXHQgIHZhciBpc1BvbHlmaWxsID0gZW52LmZldGNoLnBvbHlmaWxsO1xuXG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdCAgZW52LmZldGNoID0gZnVuY3Rpb24gKGZldGNoKSB7XG5cdCAgICB2YXIgZmV0Y2hJZCA9IDA7XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG5cdCAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIG1ha2VJbnRlcmNlcHRvci5hcHBseSh1bmRlZmluZWQsIFtmZXRjaCwgZmV0Y2hJZCsrXS5jb25jYXQoYXJncykpO1xuXHQgICAgfTtcblx0ICB9KGVudi5mZXRjaCk7XG5cblx0ICAvLyBGb3J3YXJkIHRoZSBwb2x5ZmlsbCBwcm9wZXJ5IGZyb20gZmV0Y2ggKHNldCBieSBnaXRodWIvd2hhdHdnLWZldGNoKS5cblx0ICBpZiAoaXNQb2x5ZmlsbCkge1xuXHQgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdCAgICBlbnYuZmV0Y2gucG9seWZpbGwgPSBpc1BvbHlmaWxsO1xuXHQgIH1cblx0fVxuXG5cdC8vIFRPRE86IFJlYWN0IE5hdGl2ZVxuXHQvLyAgIGF0dGFjaChnbG9iYWwpO1xuXG5cdHZhciBkaWRBdHRhY2ggPSBmYWxzZTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSB7XG5cdCAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGludGVyY2VwdG9yKSB7XG5cdCAgICBpZiAoIWRpZEF0dGFjaCkge1xuXHQgICAgICBkaWRBdHRhY2ggPSB0cnVlO1xuXHQgICAgICBhdHRhY2god2luZG93KTtcblx0ICAgIH1cblxuXHQgICAgaW50ZXJjZXB0b3JzLnB1c2goaW50ZXJjZXB0b3IpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGluZGV4ID0gaW50ZXJjZXB0b3JzLmluZGV4T2YoaW50ZXJjZXB0b3IpO1xuXG5cdCAgICAgIGlmIChpbmRleCA+PSAwKSB7XG5cdCAgICAgICAgaW50ZXJjZXB0b3JzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfSxcblx0ICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG5cdCAgICBpbnRlcmNlcHRvcnMgPSBbXTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHQvLyBpbXBvcnQgcmVnaXN0ZXJXZWJTb2NrZXQgZnJvbSAnLi9yZWdpc3RlcldlYlNvY2tldCc7XG5cblxuXHRleHBvcnRzLmRlZmF1bHQgPSByZWdpc3Rlck5ldHdvcms7XG5cblx0dmFyIF9yZWdpc3RlckZldGNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cblx0dmFyIF9yZWdpc3RlckZldGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2lzdGVyRmV0Y2gpO1xuXG5cdHZhciBfcmVnaXN0ZXJYSFIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfcmVnaXN0ZXJYSFIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnaXN0ZXJYSFIpO1xuXG5cdHZhciBfbWFwVmFsdWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX21hcFZhbHVlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXBWYWx1ZXMpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gcmVnaXN0ZXJOZXR3b3JrKGxvZ2dlcikge1xuXHQgIHZhciBpZ25vcmVkTmV0d29yayA9IHt9O1xuXG5cdCAgLy8gdHJ1bmNhdGUgaWYgPiA0TUIgaW4gc2l6ZVxuXHQgIHZhciB0cnVuY2F0ZSA9IGZ1bmN0aW9uIHRydW5jYXRlKGRhdGEpIHtcblx0ICAgIHZhciBsaW1pdCA9IDEwMjQgKiAxMDAwICogNDtcblx0ICAgIHZhciBzdHIgPSBkYXRhO1xuXG5cdCAgICBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkYXRhKSkgPT09ICdvYmplY3QnICYmIGRhdGEgIT0gbnVsbCkge1xuXHQgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGF0YSk7XG5cblx0ICAgICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsKSB7XG5cdCAgICAgICAgLy8gcGxhaW4gb2JqZWN0IC0ganNvbmlmeSBmb3IgdGhlIHNpemUgY2hlY2tcblx0ICAgICAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoc3RyICYmIHN0ci5sZW5ndGggJiYgc3RyLmxlbmd0aCA+IGxpbWl0ICYmIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHZhciBiZWdpbm5pbmcgPSBzdHIuc3Vic3RyaW5nKDAsIDEwMDApO1xuXHQgICAgICByZXR1cm4gYmVnaW5uaW5nICsgJyAuLi4gTG9nUm9ja2V0IHRydW5jYXRpbmcgdG8gZmlyc3QgMTAwMCBjaGFyYWN0ZXJzLlxcbiAgICAgIEtlZXAgZGF0YSB1bmRlciA0TUIgdG8gcHJldmVudCB0cnVuY2F0aW9uLiBodHRwczovL2RvY3MubG9ncm9ja2V0LmNvbS9yZWZlcmVuY2UjbmV0d29yayc7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBkYXRhO1xuXHQgIH07XG5cblx0ICB2YXIgYWRkUmVxdWVzdCA9IGZ1bmN0aW9uIGFkZFJlcXVlc3QocmVxSWQsIHJlcXVlc3QpIHtcblx0ICAgIHZhciBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcblx0ICAgIGxvZ2dlci5hZGRFdmVudCgnbHIubmV0d29yay5SZXF1ZXN0RXZlbnQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcblx0ICAgICAgICAgIF9yZWYkaXNFbmFibGVkID0gX3JlZi5pc0VuYWJsZWQsXG5cdCAgICAgICAgICBpc0VuYWJsZWQgPSBfcmVmJGlzRW5hYmxlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkaXNFbmFibGVkLFxuXHQgICAgICAgICAgX3JlZiRyZXF1ZXN0U2FuaXRpemVyID0gX3JlZi5yZXF1ZXN0U2FuaXRpemVyLFxuXHQgICAgICAgICAgcmVxdWVzdFNhbml0aXplciA9IF9yZWYkcmVxdWVzdFNhbml0aXplciA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKGYpIHtcblx0ICAgICAgICByZXR1cm4gZjtcblx0ICAgICAgfSA6IF9yZWYkcmVxdWVzdFNhbml0aXplcjtcblxuXHQgICAgICBpZiAoIWlzRW5hYmxlZCkge1xuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBzYW5pdGl6ZWQgPSBudWxsO1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIC8vIG9ubHkgdHJ5IGNhdGNoIHVzZXIgZGVmaW5lZCBmdW5jdGlvbnNcblx0ICAgICAgICBzYW5pdGl6ZWQgPSByZXF1ZXN0U2FuaXRpemVyKHJlcXVlc3QpO1xuXHQgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHNhbml0aXplZCkge1xuXHQgICAgICAgIC8vIFdyaXRpbmcgYW5kIHRoZW4gcmVhZGluZyBmcm9tIGFuIGEgdGFnIHR1cm5zIGEgcmVsYXRpdmVcblx0ICAgICAgICAvLyB1cmwgaW50byBhbiBhYnNvbHV0ZSBvbmUuXG5cdCAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdCAgICAgICAgYS5ocmVmID0gc2FuaXRpemVkLnVybDtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICByZXFJZDogcmVxSWQsIC8vIGRlZmF1bHRcblx0ICAgICAgICAgIHVybDogYS5ocmVmLCAvLyBzYW5pdGl6ZWRcblx0ICAgICAgICAgIGhlYWRlcnM6ICgwLCBfbWFwVmFsdWVzMi5kZWZhdWx0KShzYW5pdGl6ZWQuaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlclZhbHVlKSB7XG5cdCAgICAgICAgICAgIC8vIHNhbml0aXplZFxuXHQgICAgICAgICAgICByZXR1cm4gJycgKyBoZWFkZXJWYWx1ZTtcblx0ICAgICAgICAgIH0pLFxuXHQgICAgICAgICAgYm9keTogdHJ1bmNhdGUoc2FuaXRpemVkLmJvZHkpLCAvLyBzYW5pdGl6ZWRcblx0ICAgICAgICAgIG1ldGhvZDogbWV0aG9kLCAvLyBkZWZhdWx0XG5cdCAgICAgICAgICByZWZlcnJlcjogc2FuaXRpemVkLnJlZmVycmVyIHx8IHVuZGVmaW5lZCwgLy8gc2FuaXRpemVkXG5cdCAgICAgICAgICBtb2RlOiBzYW5pdGl6ZWQubW9kZSB8fCB1bmRlZmluZWQsIC8vIHNhbml0aXplZFxuXHQgICAgICAgICAgY3JlZGVudGlhbHM6IHNhbml0aXplZC5jcmVkZW50aWFscyB8fCB1bmRlZmluZWQgLy8gc2FuaXRpemVkXG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHQgICAgICBpZ25vcmVkTmV0d29ya1tyZXFJZF0gPSB0cnVlO1xuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH0pO1xuXHQgIH07XG5cblx0ICB2YXIgYWRkUmVzcG9uc2UgPSBmdW5jdGlvbiBhZGRSZXNwb25zZShyZXFJZCwgcmVzcG9uc2UpIHtcblx0ICAgIHZhciBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG5cdCAgICBsb2dnZXIuYWRkRXZlbnQoJ2xyLm5ldHdvcmsuUmVzcG9uc2VFdmVudCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcblx0ICAgICAgICAgIF9yZWYyJGlzRW5hYmxlZCA9IF9yZWYyLmlzRW5hYmxlZCxcblx0ICAgICAgICAgIGlzRW5hYmxlZCA9IF9yZWYyJGlzRW5hYmxlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJGlzRW5hYmxlZCxcblx0ICAgICAgICAgIF9yZWYyJHJlc3BvbnNlU2FuaXRpeiA9IF9yZWYyLnJlc3BvbnNlU2FuaXRpemVyLFxuXHQgICAgICAgICAgcmVzcG9uc2VTYW5pdGl6ZXIgPSBfcmVmMiRyZXNwb25zZVNhbml0aXogPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChmKSB7XG5cdCAgICAgICAgcmV0dXJuIGY7XG5cdCAgICAgIH0gOiBfcmVmMiRyZXNwb25zZVNhbml0aXo7XG5cblx0ICAgICAgaWYgKCFpc0VuYWJsZWQpIHtcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfSBlbHNlIGlmIChpZ25vcmVkTmV0d29ya1tyZXFJZF0pIHtcblx0ICAgICAgICBkZWxldGUgaWdub3JlZE5ldHdvcmtbcmVxSWRdO1xuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBzYW5pdGl6ZWQgPSBudWxsO1xuXG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuXHQgICAgICAgIHNhbml0aXplZCA9IHJlc3BvbnNlU2FuaXRpemVyKHJlc3BvbnNlKTtcblx0ICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuXHQgICAgICAgIC8vIGZhbGwgdGhyb3VnaCB0byByZWRhY3RlZCBsb2dcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc2FuaXRpemVkKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIHJlcUlkOiByZXFJZCwgLy8gZGVmYXVsdFxuXHQgICAgICAgICAgc3RhdHVzOiBzYW5pdGl6ZWQuc3RhdHVzLCAvLyBzYW5pdGl6ZWRcblx0ICAgICAgICAgIGhlYWRlcnM6ICgwLCBfbWFwVmFsdWVzMi5kZWZhdWx0KShzYW5pdGl6ZWQuaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlclZhbHVlKSB7XG5cdCAgICAgICAgICAgIC8vIHNhbml0aXplZFxuXHQgICAgICAgICAgICByZXR1cm4gJycgKyBoZWFkZXJWYWx1ZTtcblx0ICAgICAgICAgIH0pLFxuXHQgICAgICAgICAgYm9keTogdHJ1bmNhdGUoc2FuaXRpemVkLmJvZHkpIC8vIHNhbml0aXplZFxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICByZXFJZDogcmVxSWQsIC8vIGRlZmF1bHRcblx0ICAgICAgICBzdGF0dXM6IHN0YXR1cywgLy8gZGVmYXVsdFxuXHQgICAgICAgIGhlYWRlcnM6IHt9LCAvLyByZWRhY3RlZFxuXHQgICAgICAgIGJvZHk6IG51bGwgLy8gcmVkYWN0ZWRcblx0ICAgICAgfTtcblx0ICAgIH0pO1xuXHQgIH07XG5cblx0ICB2YXIgdW5zdWJGZXRjaCA9ICgwLCBfcmVnaXN0ZXJGZXRjaDIuZGVmYXVsdCkoeyBhZGRSZXF1ZXN0OiBhZGRSZXF1ZXN0LCBhZGRSZXNwb25zZTogYWRkUmVzcG9uc2UgfSk7XG5cdCAgdmFyIHVuc3ViWEhSID0gKDAsIF9yZWdpc3RlclhIUjIuZGVmYXVsdCkoeyBhZGRSZXF1ZXN0OiBhZGRSZXF1ZXN0LCBhZGRSZXNwb25zZTogYWRkUmVzcG9uc2UgfSk7XG5cdCAgLy8gY29uc3QgdW5zdWJXZWJTb2NrZXQgPSByZWdpc3RlcldlYlNvY2tldChsb2dnZXIpO1xuXG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIHVuc3ViRmV0Y2goKTtcblx0ICAgIHVuc3ViWEhSKCk7XG5cdCAgICAvLyB1bnN1YldlYlNvY2tldCgpO1xuXHQgIH07XG5cdH1cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IHJlZ2lzdGVyRmV0Y2g7XG5cblx0dmFyIF9tYXBWYWx1ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cdHZhciBfbWFwVmFsdWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcFZhbHVlcyk7XG5cblx0dmFyIF9mZXRjaEludGVyY2VwdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5cdHZhciBfZmV0Y2hJbnRlcmNlcHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmV0Y2hJbnRlcmNlcHQpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gbWFrZU9iamVjdEZyb21IZWFkZXJzKGhlYWRlcnMpIHtcblx0ICAvLyBJZiB1c2luZyByZWFsIGZldGNoLCB3ZSBtdXN0IHN0cmluZ2lmeSB0aGUgSGVhZGVycyBvYmplY3QuXG5cdCAgaWYgKGhlYWRlcnMgPT0gbnVsbCB8fCB0eXBlb2YgaGVhZGVycy5mb3JFYWNoICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICByZXR1cm4gaGVhZGVycztcblx0ICB9XG5cblx0ICB2YXIgcmVzdWx0ID0ge307XG5cdCAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG5cdCAgICBpZiAocmVzdWx0W2tleV0pIHtcblx0ICAgICAgcmVzdWx0W2tleV0gPSByZXN1bHRba2V5XSArICcsJyArIHZhbHVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmVzdWx0W2tleV0gPSAnJyArIHZhbHVlO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvLyBYSFIgc3BlY2lmaWNhdGlvbiBpcyB1bmNsZWFyIG9mIHdoYXQgdHlwZXMgdG8gYWxsb3cgaW4gdmFsdWUgc28gdXNpbmcgdG9TdHJpbmcgbWV0aG9kIGZvciBub3dcblx0dmFyIHN0cmluZ2lmeUhlYWRlcnMgPSBmdW5jdGlvbiBzdHJpbmdpZnlIZWFkZXJzKGhlYWRlcnMpIHtcblx0ICByZXR1cm4gKDAsIF9tYXBWYWx1ZXMyLmRlZmF1bHQpKG1ha2VPYmplY3RGcm9tSGVhZGVycyhoZWFkZXJzKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gJycgKyB2YWx1ZTtcblx0ICB9KTtcblx0fTtcblxuXHRmdW5jdGlvbiBwbHVja0ZldGNoRmllbGRzKCkge1xuXHQgIHZhciBhcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG5cdCAgcmV0dXJuIHtcblx0ICAgIHVybDogYXJnLnVybCxcblx0ICAgIGhlYWRlcnM6IHN0cmluZ2lmeUhlYWRlcnMoYXJnLmhlYWRlcnMpLFxuXHQgICAgbWV0aG9kOiBhcmcubWV0aG9kICYmIGFyZy5tZXRob2QudG9VcHBlckNhc2UoKSxcblx0ICAgIHJlZmVycmVyOiBhcmcucmVmZXJyZXIgfHwgdW5kZWZpbmVkLFxuXHQgICAgbW9kZTogYXJnLm1vZGUgfHwgdW5kZWZpbmVkLFxuXHQgICAgY3JlZGVudGlhbHM6IGFyZy5jcmVkZW50aWFscyB8fCB1bmRlZmluZWRcblx0ICB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVnaXN0ZXJGZXRjaChfcmVmKSB7XG5cdCAgdmFyIGFkZFJlcXVlc3QgPSBfcmVmLmFkZFJlcXVlc3QsXG5cdCAgICAgIGFkZFJlc3BvbnNlID0gX3JlZi5hZGRSZXNwb25zZTtcblxuXHQgIHZhciBMT0dST0NLRVRfWEhSX0xBQkVMID0gJ2ZldGNoLSc7XG5cdCAgdmFyIHVucmVnaXN0ZXIgPSBfZmV0Y2hJbnRlcmNlcHQyLmRlZmF1bHQucmVnaXN0ZXIoe1xuXHQgICAgcmVxdWVzdDogZnVuY3Rpb24gcmVxdWVzdChmZXRjaElkKSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIHAgPSB2b2lkIDA7XG5cblx0ICAgICAgaWYgKHR5cGVvZiBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiBhcmdzWzBdIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuXHQgICAgICAgIHAgPSBhcmdzWzBdLmNsb25lKCkudGV4dCgpLnRoZW4oZnVuY3Rpb24gKGJvZHkpIHtcblx0ICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcGx1Y2tGZXRjaEZpZWxkcyhhcmdzWzBdKSwge1xuXHQgICAgICAgICAgICBib2R5OiBib2R5XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBwID0gUHJvbWlzZS5yZXNvbHZlKF9leHRlbmRzKHt9LCBwbHVja0ZldGNoRmllbGRzKGFyZ3NbMV0pLCB7XG5cdCAgICAgICAgICB1cmw6ICcnICsgYXJnc1swXSxcblx0ICAgICAgICAgIGJvZHk6IChhcmdzWzFdIHx8IHt9KS5ib2R5XG5cdCAgICAgICAgfSkpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbiAocmVxKSB7XG5cdCAgICAgICAgYWRkUmVxdWVzdCgnJyArIExPR1JPQ0tFVF9YSFJfTEFCRUwgKyBmZXRjaElkLCByZXEpO1xuXHQgICAgICAgIHJldHVybiBhcmdzO1xuXHQgICAgICB9KTtcblx0ICAgIH0sXG5cdCAgICByZXF1ZXN0RXJyb3I6IGZ1bmN0aW9uIHJlcXVlc3RFcnJvcihmZXRjaElkLCBlcnJvcikge1xuXHQgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHQgICAgfSxcblx0ICAgIHJlc3BvbnNlOiBmdW5jdGlvbiByZXNwb25zZShmZXRjaElkLCBfcmVzcG9uc2UpIHtcblx0ICAgICAgdmFyIGNsb25lZFRleHQgPSB2b2lkIDA7XG5cblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICAvLyBUT0RPOiBlbmhhbmNlIGZ1bmN0aW9uIG9uIG9yaWdpbmFsIHJlc3BvbnNlIGFuZCBmdXR1cmUgY2xvbmVzIGZvcjpcblx0ICAgICAgICAvLyB0ZXh0KCksIGpzb24oKSwgYmxvYigpLCBmb3JtZGF0YSgpLCBhcnJheWJ1ZmZlcigpXG5cdCAgICAgICAgY2xvbmVkVGV4dCA9IF9yZXNwb25zZS5jbG9uZSgpLnRleHQoKTtcblx0ICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgLy8gc2FmYXJpIGhhcyBhIGJ1ZyB3aGVyZSBjbG9uaW5nIGNhbiBmYWlsXG5cdCAgICAgICAgY2xvbmVkVGV4dCA9IFByb21pc2UucmVzb2x2ZSgnTG9nUm9ja2V0IGZldGNoIGVycm9yOiAnICsgZXJyLm1lc3NhZ2UpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGNsb25lZFRleHQudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIHZhciByZXNwb25zZUhhc2ggPSB7XG5cdCAgICAgICAgICB1cmw6IF9yZXNwb25zZS51cmwsXG5cdCAgICAgICAgICBzdGF0dXM6IF9yZXNwb25zZS5zdGF0dXMsXG5cdCAgICAgICAgICBoZWFkZXJzOiBzdHJpbmdpZnlIZWFkZXJzKF9yZXNwb25zZS5oZWFkZXJzKSxcblx0ICAgICAgICAgIGJvZHk6IGRhdGFcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGFkZFJlc3BvbnNlKCcnICsgTE9HUk9DS0VUX1hIUl9MQUJFTCArIGZldGNoSWQsIHJlc3BvbnNlSGFzaCk7XG5cdCAgICAgICAgcmV0dXJuIF9yZXNwb25zZTtcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHQgICAgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gcmVzcG9uc2VFcnJvcihmZXRjaElkLCBlcnJvcikge1xuXHQgICAgICB2YXIgcmVzcG9uc2UgPSB7XG5cdCAgICAgICAgdXJsOiB1bmRlZmluZWQsXG5cdCAgICAgICAgc3RhdHVzOiAwLFxuXHQgICAgICAgIGhlYWRlcnM6IHt9LFxuXHQgICAgICAgIGJvZHk6ICcnICsgZXJyb3Jcblx0ICAgICAgfTtcblx0ICAgICAgYWRkUmVzcG9uc2UoJycgKyBMT0dST0NLRVRfWEhSX0xBQkVMICsgZmV0Y2hJZCwgcmVzcG9uc2UpO1xuXHQgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIHVucmVnaXN0ZXI7XG5cdH1cblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuWzI3LCAyMl0sXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUVuaGFuY2VyO1xuXG5cdHZhciBfbm93ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX25vdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3cpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIHN0b3JlSWRDb3VudGVyID0gMDtcblxuXHRmdW5jdGlvbiBjcmVhdGVFbmhhbmNlcihsb2dnZXIpIHtcblx0ICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG5cdCAgICAgIF9yZWYkc3RhdGVTYW5pdGl6ZXIgPSBfcmVmLnN0YXRlU2FuaXRpemVyLFxuXHQgICAgICBzdGF0ZVNhbml0aXplciA9IF9yZWYkc3RhdGVTYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChmKSB7XG5cdCAgICByZXR1cm4gZjtcblx0ICB9IDogX3JlZiRzdGF0ZVNhbml0aXplcixcblx0ICAgICAgX3JlZiRhY3Rpb25TYW5pdGl6ZXIgPSBfcmVmLmFjdGlvblNhbml0aXplcixcblx0ICAgICAgYWN0aW9uU2FuaXRpemVyID0gX3JlZiRhY3Rpb25TYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChmKSB7XG5cdCAgICByZXR1cm4gZjtcblx0ICB9IDogX3JlZiRhY3Rpb25TYW5pdGl6ZXI7XG5cblx0ICAvLyBhbiBlbmhhbmNlciBpcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFN0b3JlXG5cdCAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGVuaGFuY2VyKSB7XG5cdCAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgZW5oYW5jZXIpO1xuXHQgICAgICB2YXIgb3JpZ2luYWxEaXNwYXRjaCA9IHN0b3JlLmRpc3BhdGNoO1xuXHQgICAgICB2YXIgc3RvcmVJZCA9IHN0b3JlSWRDb3VudGVyKys7XG5cdCAgICAgIGxvZ2dlci5hZGRFdmVudCgnbHIucmVkdXguSW5pdGlhbFN0YXRlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzYW5pdGl6ZWRTdGF0ZSA9IHZvaWQgMDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuXHQgICAgICAgICAgc2FuaXRpemVkU3RhdGUgPSBzdGF0ZVNhbml0aXplcihzdG9yZS5nZXRTdGF0ZSgpKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICBzdGF0ZTogc2FuaXRpemVkU3RhdGUsXG5cdCAgICAgICAgICBzdG9yZUlkOiBzdG9yZUlkXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgdmFyIGRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gKDAsIF9ub3cyLmRlZmF1bHQpKCk7XG5cblx0ICAgICAgICB2YXIgZXJyID0gdm9pZCAwO1xuXHQgICAgICAgIHZhciByZXMgPSB2b2lkIDA7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIHJlcyA9IG9yaWdpbmFsRGlzcGF0Y2goYWN0aW9uKTtcblx0ICAgICAgICB9IGNhdGNoIChfZXJyKSB7XG5cdCAgICAgICAgICBlcnIgPSBfZXJyO1xuXHQgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoMCwgX25vdzIuZGVmYXVsdCkoKSAtIHN0YXJ0O1xuXG5cdCAgICAgICAgICBsb2dnZXIuYWRkRXZlbnQoJ2xyLnJlZHV4LlJlZHV4QWN0aW9uJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgc2FuaXRpemVkU3RhdGUgPSBudWxsO1xuXHQgICAgICAgICAgICB2YXIgc2FuaXRpemVkQWN0aW9uID0gbnVsbDtcblxuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgIC8vIG9ubHkgdHJ5IGNhdGNoIHVzZXIgZGVmaW5lZCBmdW5jdGlvbnNcblx0ICAgICAgICAgICAgICBzYW5pdGl6ZWRTdGF0ZSA9IHN0YXRlU2FuaXRpemVyKHN0b3JlLmdldFN0YXRlKCkpO1xuXHQgICAgICAgICAgICAgIHNhbml0aXplZEFjdGlvbiA9IGFjdGlvblNhbml0aXplcihhY3Rpb24pO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChzYW5pdGl6ZWRTdGF0ZSAmJiBzYW5pdGl6ZWRBY3Rpb24pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgc3RvcmVJZDogc3RvcmVJZCxcblx0ICAgICAgICAgICAgICAgIGFjdGlvbjogc2FuaXRpemVkQWN0aW9uLFxuXHQgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuXHQgICAgICAgICAgICAgICAgc3RhdGVEZWx0YTogc2FuaXRpemVkU3RhdGVcblx0ICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGVycikge1xuXHQgICAgICAgICAgdGhyb3cgZXJyO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiByZXM7XG5cdCAgICAgIH07XG5cblx0ICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuXHQgICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgfTtcblx0fVxuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNaWRkbGV3YXJlO1xuXG5cdHZhciBfbm93ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX25vdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3cpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIHN0b3JlSWRDb3VudGVyID0gMDtcblxuXHRmdW5jdGlvbiBjcmVhdGVNaWRkbGV3YXJlKGxvZ2dlcikge1xuXHQgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcblx0ICAgICAgX3JlZiRzdGF0ZVNhbml0aXplciA9IF9yZWYuc3RhdGVTYW5pdGl6ZXIsXG5cdCAgICAgIHN0YXRlU2FuaXRpemVyID0gX3JlZiRzdGF0ZVNhbml0aXplciA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKGYpIHtcblx0ICAgIHJldHVybiBmO1xuXHQgIH0gOiBfcmVmJHN0YXRlU2FuaXRpemVyLFxuXHQgICAgICBfcmVmJGFjdGlvblNhbml0aXplciA9IF9yZWYuYWN0aW9uU2FuaXRpemVyLFxuXHQgICAgICBhY3Rpb25TYW5pdGl6ZXIgPSBfcmVmJGFjdGlvblNhbml0aXplciA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKGYpIHtcblx0ICAgIHJldHVybiBmO1xuXHQgIH0gOiBfcmVmJGFjdGlvblNhbml0aXplcjtcblxuXHQgIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcblx0ICAgIHZhciBzdG9yZUlkID0gc3RvcmVJZENvdW50ZXIrKztcblx0ICAgIGxvZ2dlci5hZGRFdmVudCgnbHIucmVkdXguSW5pdGlhbFN0YXRlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgc2FuaXRpemVkU3RhdGUgPSB2b2lkIDA7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuXHQgICAgICAgIHNhbml0aXplZFN0YXRlID0gc3RhdGVTYW5pdGl6ZXIoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cdCAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBzdGF0ZTogc2FuaXRpemVkU3RhdGUsXG5cdCAgICAgICAgc3RvcmVJZDogc3RvcmVJZFxuXHQgICAgICB9O1xuXHQgICAgfSk7XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuXHQgICAgICAgIHZhciBzdGFydCA9ICgwLCBfbm93Mi5kZWZhdWx0KSgpO1xuXG5cdCAgICAgICAgdmFyIGVyciA9IHZvaWQgMDtcblx0ICAgICAgICB2YXIgcmVzID0gdm9pZCAwO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICByZXMgPSBuZXh0KGFjdGlvbik7XG5cdCAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuXHQgICAgICAgICAgZXJyID0gX2Vycjtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgdmFyIGR1cmF0aW9uID0gKDAsIF9ub3cyLmRlZmF1bHQpKCkgLSBzdGFydDtcblxuXHQgICAgICAgICAgbG9nZ2VyLmFkZEV2ZW50KCdsci5yZWR1eC5SZWR1eEFjdGlvbicsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHNhbml0aXplZFN0YXRlID0gbnVsbDtcblx0ICAgICAgICAgICAgdmFyIHNhbml0aXplZEFjdGlvbiA9IG51bGw7XG5cblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAvLyBvbmx5IHRyeSBjYXRjaCB1c2VyIGRlZmluZWQgZnVuY3Rpb25zXG5cdCAgICAgICAgICAgICAgc2FuaXRpemVkU3RhdGUgPSBzdGF0ZVNhbml0aXplcihzdG9yZS5nZXRTdGF0ZSgpKTtcblx0ICAgICAgICAgICAgICBzYW5pdGl6ZWRBY3Rpb24gPSBhY3Rpb25TYW5pdGl6ZXIoYWN0aW9uKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIudG9TdHJpbmcoKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAoc2FuaXRpemVkU3RhdGUgJiYgc2FuaXRpemVkQWN0aW9uKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHN0b3JlSWQ6IHN0b3JlSWQsXG5cdCAgICAgICAgICAgICAgICBhY3Rpb246IHNhbml0aXplZEFjdGlvbixcblx0ICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcblx0ICAgICAgICAgICAgICAgIHN0YXRlRGVsdGE6IHNhbml0aXplZFN0YXRlXG5cdCAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChlcnIpIHtcblx0ICAgICAgICAgIHRocm93IGVycjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gcmVzO1xuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICB9O1xuXHR9XG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuY3JlYXRlRW5oYW5jZXIgPSBleHBvcnRzLmNyZWF0ZU1pZGRsZXdhcmUgPSB1bmRlZmluZWQ7XG5cblx0dmFyIF9jcmVhdGVFbmhhbmNlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG5cdHZhciBfY3JlYXRlRW5oYW5jZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRW5oYW5jZXIpO1xuXG5cdHZhciBfY3JlYXRlTWlkZGxld2FyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG5cdHZhciBfY3JlYXRlTWlkZGxld2FyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNaWRkbGV3YXJlKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuY3JlYXRlTWlkZGxld2FyZSA9IF9jcmVhdGVNaWRkbGV3YXJlMi5kZWZhdWx0O1xuXHRleHBvcnRzLmNyZWF0ZUVuaGFuY2VyID0gX2NyZWF0ZUVuaGFuY2VyMi5kZWZhdWx0O1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgZGF0ZU5vdz1EYXRlLm5vdy5iaW5kKERhdGUpO1xuXHR2YXIgbG9hZFRpbWU9ZGF0ZU5vdygpO2V4cG9ydHMuZGVmYXVsdD1cblxuXHR0eXBlb2YgcGVyZm9ybWFuY2UhPT0ndW5kZWZpbmVkJyYmcGVyZm9ybWFuY2Uubm93P1xuXHRwZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSk6XG5cdGZ1bmN0aW9uKCl7cmV0dXJuIGRhdGVOb3coKS1sb2FkVGltZTt9O21vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5NQVhfUVVFVUVfU0laRSA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cblx0dmFyIF9sb2dyb2NrZXROZXR3b3JrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cblx0dmFyIF9sb2dyb2NrZXROZXR3b3JrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ3JvY2tldE5ldHdvcmspO1xuXG5cdHZhciBfbG9ncm9ja2V0RXhjZXB0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cdHZhciBfbG9ncm9ja2V0Q29uc29sZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cblx0dmFyIF9sb2dyb2NrZXRDb25zb2xlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ3JvY2tldENvbnNvbGUpO1xuXG5cdHZhciBfbG9ncm9ja2V0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0dmFyIE1BWF9RVUVVRV9TSVpFID0gZXhwb3J0cy5NQVhfUVVFVUVfU0laRSA9IDEwMDA7XG5cblx0dmFyIExvZ1JvY2tldCA9IGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBMb2dSb2NrZXQoKSB7XG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nUm9ja2V0KTtcblxuXHQgICAgdGhpcy5fYnVmZmVyID0gW107XG5cblx0ICAgIC8vIFRPRE86IHRlc3RzIGZvciB0aGVzZSBleHBvc2VkIG1ldGhvZHMuXG5cdCAgICBbJ2xvZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnZGVidWcnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAgICAgX3RoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfdGhpcy5hZGRFdmVudCgnbHIuY29yZS5Mb2dFdmVudCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGxvZ0xldmVsOiBtZXRob2QudG9VcHBlckNhc2UoKSxcblx0ICAgICAgICAgICAgYXJnczogYXJnc1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9LCB7IHNob3VsZENhcHR1cmVTdGFja1RyYWNlOiB0cnVlIH0pO1xuXHQgICAgICB9O1xuXHQgICAgfSk7XG5cdCAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gZmFsc2U7XG5cdCAgICB0aGlzLl9pbnN0YWxsZWQgPSBbXTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTG9nUm9ja2V0LCBbe1xuXHQgICAga2V5OiAnYWRkRXZlbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50KHR5cGUsIGdldE1lc3NhZ2UpIHtcblx0ICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG5cdCAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcblx0ICAgICAgdGhpcy5fcnVuKGZ1bmN0aW9uIChsb2dnZXIpIHtcblx0ICAgICAgICBsb2dnZXIuYWRkRXZlbnQodHlwZSwgZ2V0TWVzc2FnZSwgX2V4dGVuZHMoe30sIG9wdHMsIHtcblx0ICAgICAgICAgIHRpbWVPdmVycmlkZTogdGltZVxuXHQgICAgICAgIH0pKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnb25Mb2dnZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG9uTG9nZ2VyKGxvZ2dlcikge1xuXHQgICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXI7XG5cblx0ICAgICAgd2hpbGUgKHRoaXMuX2J1ZmZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgdmFyIGYgPSB0aGlzLl9idWZmZXIuc2hpZnQoKTtcblx0ICAgICAgICBmKHRoaXMuX2xvZ2dlcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfcnVuJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfcnVuKGYpIHtcblx0ICAgICAgaWYgKHRoaXMuX2lzRGlzYWJsZWQpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodGhpcy5fbG9nZ2VyKSB7XG5cdCAgICAgICAgZih0aGlzLl9sb2dnZXIpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoID49IE1BWF9RVUVVRV9TSVpFKSB7XG5cdCAgICAgICAgICB0aGlzLl9pc0Rpc2FibGVkID0gdHJ1ZTtcblx0ICAgICAgICAgIGNvbnNvbGUud2FybignTG9nUm9ja2V0OiBzY3JpcHQgZGlkIG5vdCBsb2FkLiBDaGVjayB0aGF0IHlvdSBoYXZlIGEgdmFsaWQgbmV0d29yayBjb25uZWN0aW9uLicpO1xuXHQgICAgICAgICAgdGhpcy51bmluc3RhbGwoKTtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLl9idWZmZXIucHVzaChmLmJpbmQodGhpcykpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChhcHBJRCwgb3B0cykge1xuXHQgICAgICBpZiAoIXRoaXMuX2lzSW5pdGlhbGl6ZWQpIHtcblx0ICAgICAgICB0aGlzLl9pbnN0YWxsZWQucHVzaCgoMCwgX2xvZ3JvY2tldEV4Y2VwdGlvbnMucmVnaXN0ZXJFeGNlcHRpb25zKSh0aGlzKSk7XG5cdCAgICAgICAgdGhpcy5faW5zdGFsbGVkLnB1c2goKDAsIF9sb2dyb2NrZXROZXR3b3JrMi5kZWZhdWx0KSh0aGlzKSk7XG5cdCAgICAgICAgdGhpcy5faW5zdGFsbGVkLnB1c2goKDAsIF9sb2dyb2NrZXRDb25zb2xlMi5kZWZhdWx0KSh0aGlzKSk7XG5cblx0ICAgICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuXHQgICAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdCAgICAgICAgICBsb2dnZXIuaW5pdChhcHBJRCwgb3B0cyk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGFydCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG5cdCAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdCAgICAgICAgbG9nZ2VyLnN0YXJ0KCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3VuaW5zdGFsbCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdW5pbnN0YWxsKCkge1xuXHQgICAgICB0aGlzLl9pbnN0YWxsZWQuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuXHQgICAgICAgIHJldHVybiBmKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgICB0aGlzLl9idWZmZXIgPSBbXTtcblxuXHQgICAgICB0aGlzLl9ydW4oZnVuY3Rpb24gKGxvZ2dlcikge1xuXHQgICAgICAgIGxvZ2dlci51bmluc3RhbGwoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaWRlbnRpZnknLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGlkZW50aWZ5KGlkLCBvcHRzKSB7XG5cdCAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdCAgICAgICAgbG9nZ2VyLmlkZW50aWZ5KGlkLCBvcHRzKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RhcnROZXdTZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydE5ld1Nlc3Npb24oKSB7XG5cdCAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdCAgICAgICAgbG9nZ2VyLnN0YXJ0TmV3U2Vzc2lvbigpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd0cmFjaycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdHJhY2soY3VzdG9tRXZlbnROYW1lKSB7XG5cdCAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdCAgICAgICAgbG9nZ2VyLnRyYWNrKGN1c3RvbUV2ZW50TmFtZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFNlc3Npb25VUkwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlc3Npb25VUkwoY2IpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignTG9nUm9ja2V0OiBtdXN0IHBhc3MgY2FsbGJhY2sgdG8gZ2V0U2Vzc2lvblVSTCgpJyk7XG5cdCAgICAgIH1cblxuXHQgICAgICB0aGlzLl9ydW4oZnVuY3Rpb24gKGxvZ2dlcikge1xuXHQgICAgICAgIGlmIChsb2dnZXIuZ2V0U2Vzc2lvblVSTCkge1xuXHQgICAgICAgICAgbG9nZ2VyLmdldFNlc3Npb25VUkwoY2IpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjYihsb2dnZXIucmVjb3JkaW5nVVJMKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZlcnNpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZlcnNpb24oY2IpIHtcblx0ICAgICAgdGhpcy5fcnVuKGZ1bmN0aW9uIChsb2dnZXIpIHtcblx0ICAgICAgICBjYihsb2dnZXIudmVyc2lvbik7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0YXJ0VHJhbnNhY3Rpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb25JRCkge1xuXHQgICAgICB0aGlzLmFkZEV2ZW50KCdsci50cmFuc2FjdGlvbi5TdGFydCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4geyBpZDogdHJhbnNhY3Rpb25JRCB9O1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdlbmRUcmFuc2FjdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25JRCkge1xuXHQgICAgICB0aGlzLmFkZEV2ZW50KCdsci50cmFuc2FjdGlvbi5FbmQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHsgaWQ6IHRyYW5zYWN0aW9uSUQgfTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY2FwdHVyZU1lc3NhZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UpIHtcblx0ICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdCAgICAgIF9sb2dyb2NrZXRFeGNlcHRpb25zLkNhcHR1cmUuY2FwdHVyZU1lc3NhZ2UodGhpcywgbWVzc2FnZSwgb3B0aW9ucyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY2FwdHVyZUV4Y2VwdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2FwdHVyZUV4Y2VwdGlvbihleGNlcHRpb24pIHtcblx0ICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdCAgICAgIF9sb2dyb2NrZXRFeGNlcHRpb25zLkNhcHR1cmUuY2FwdHVyZUV4Y2VwdGlvbih0aGlzLCBleGNlcHRpb24sIG9wdGlvbnMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlZHV4RW5oYW5jZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZHV4RW5oYW5jZXIoKSB7XG5cdCAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuXHQgICAgICByZXR1cm4gKDAsIF9sb2dyb2NrZXRSZWR1eC5jcmVhdGVFbmhhbmNlcikodGhpcywgb3B0aW9ucyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVkdXhNaWRkbGV3YXJlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZWR1eE1pZGRsZXdhcmUoKSB7XG5cdCAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuXHQgICAgICByZXR1cm4gKDAsIF9sb2dyb2NrZXRSZWR1eC5jcmVhdGVNaWRkbGV3YXJlKSh0aGlzLCBvcHRpb25zKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd2ZXJzaW9uJyxcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fbG9nZ2VyICYmIHRoaXMuX2xvZ2dlci52ZXJzaW9uO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Nlc3Npb25VUkwnLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnJlY29yZGluZ1VSTDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZWNvcmRpbmdVUkwnLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnJlY29yZGluZ1VSTDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZWNvcmRpbmdJRCcsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2xvZ2dlciAmJiB0aGlzLl9sb2dnZXIucmVjb3JkaW5nSUQ7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndGhyZWFkSUQnLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnRocmVhZElEO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3RhYklEJyxcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fbG9nZ2VyICYmIHRoaXMuX2xvZ2dlci50YWJJRDtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTG9nUm9ja2V0O1xuXHR9KCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gTG9nUm9ja2V0O1xuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBtYWtlTG9nUm9ja2V0O1xuXG5cdHZhciBfTG9nUm9ja2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cblx0dmFyIF9Mb2dSb2NrZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nUm9ja2V0KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBSRUFDVF9OQVRJVkVfTk9USUNFID0gJ0xvZ1JvY2tldCBkb2VzIG5vdCB5ZXQgc3VwcG9ydCBSZWFjdCBOYXRpdmUuJztcblx0dmFyIG1ha2VOb29wUG9seWZpbGwgPSBmdW5jdGlvbiBtYWtlTm9vcFBvbHlmaWxsKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge30sXG5cdCAgICB1bmluc3RhbGw6IGZ1bmN0aW9uIHVuaW5zdGFsbCgpIHt9LFxuXHQgICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7fSxcblx0ICAgIGluZm86IGZ1bmN0aW9uIGluZm8oKSB7fSxcblx0ICAgIHdhcm46IGZ1bmN0aW9uIHdhcm4oKSB7fSxcblx0ICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHt9LFxuXHQgICAgZGVidWc6IGZ1bmN0aW9uIGRlYnVnKCkge30sXG5cdCAgICBhZGRFdmVudDogZnVuY3Rpb24gYWRkRXZlbnQoKSB7fSxcblx0ICAgIGlkZW50aWZ5OiBmdW5jdGlvbiBpZGVudGlmeSgpIHt9LFxuXHQgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge30sXG5cblxuXHQgICAgZ2V0IHRocmVhZElEKCkge1xuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH0sXG5cdCAgICBnZXQgcmVjb3JkaW5nSUQoKSB7XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfSxcblx0ICAgIGdldCByZWNvcmRpbmdVUkwoKSB7XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfSxcblxuXHQgICAgcmVkdXhFbmhhbmNlcjogZnVuY3Rpb24gcmVkdXhFbmhhbmNlcigpIHtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSkge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICByZXR1cm4gc3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgcmVkdXhNaWRkbGV3YXJlOiBmdW5jdGlvbiByZWR1eE1pZGRsZXdhcmUoKSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG5cdCAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIHRyYWNrOiBmdW5jdGlvbiB0cmFjaygpIHt9LFxuXHQgICAgZ2V0U2Vzc2lvblVSTDogZnVuY3Rpb24gZ2V0U2Vzc2lvblVSTCgpIHt9LFxuXHQgICAgZ2V0VmVyc2lvbjogZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHt9LFxuXHQgICAgc3RhcnROZXdTZXNzaW9uOiBmdW5jdGlvbiBzdGFydE5ld1Nlc3Npb24oKSB7fSxcblx0ICAgIG9uTG9nZ2VyOiBmdW5jdGlvbiBvbkxvZ2dlcigpIHt9LFxuXHQgICAgc2V0Q2xvY2s6IGZ1bmN0aW9uIHNldENsb2NrKCkge30sXG5cdCAgICBjYXB0dXJlTWVzc2FnZTogZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UoKSB7fSxcblx0ICAgIGNhcHR1cmVFeGNlcHRpb246IGZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oKSB7fVxuXHQgIH07XG5cdH07XG5cblx0ZnVuY3Rpb24gbWFrZUxvZ1JvY2tldCgpIHtcblx0ICB2YXIgZ2V0TG9nZ2VyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmdW5jdGlvbiAoKSB7fTtcblxuXHQgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKFJFQUNUX05BVElWRV9OT1RJQ0UpO1xuXHQgIH1cblxuXHQgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgaWYgKHdpbmRvdy5fZGlzYWJsZUxvZ1JvY2tldCkge1xuXHQgICAgICByZXR1cm4gbWFrZU5vb3BQb2x5ZmlsbCgpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcblx0ICAgICAgLy8gU2F2ZSB3aW5kb3cgZ2xvYmFscyB0aGF0IHdlIHJlbHkgb24uXG5cdCAgICAgIHdpbmRvdy5fbHJNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI7XG5cblx0ICAgICAgdmFyIGluc3RhbmNlID0gbmV3IF9Mb2dSb2NrZXQyLmRlZmF1bHQoKTtcblx0ICAgICAgZ2V0TG9nZ2VyKGluc3RhbmNlKTtcblx0ICAgICAgcmV0dXJuIGluc3RhbmNlO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBtYWtlTm9vcFBvbHlmaWxsKCk7XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF9tYWtlTG9nUm9ja2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cblx0dmFyIF9tYWtlTG9nUm9ja2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21ha2VMb2dSb2NrZXQpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIGluc3RhbmNlID0gKDAsIF9tYWtlTG9nUm9ja2V0Mi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdCAgaWYgKHdpbmRvdy5fX1NES0NPTkZJR19fICYmIHdpbmRvdy5fX1NES0NPTkZJR19fLmxvZ2dlclVSTCkge1xuXHQgICAgc2NyaXB0LnNyYyA9IHdpbmRvdy5fX1NES0NPTkZJR19fLmxvZ2dlclVSTDtcblx0ICB9IGVsc2UgaWYgKHdpbmRvdy5fbHJBc3luY1NjcmlwdCkge1xuXHQgICAgc2NyaXB0LnNyYyA9IHdpbmRvdy5fbHJBc3luY1NjcmlwdDtcblx0ICB9IGVsc2Uge1xuXHQgICAgc2NyaXB0LnNyYyA9ICh1bmRlZmluZWQpID09PSAnc3RhZ2luZycgPyAnaHR0cHM6Ly9jZG4tc3RhZ2luZy5sb2dyb2NrZXQuaW8vbG9nZ2VyLm1pbi5qcycgOiAnaHR0cHM6Ly9jZG4ubG9ncm9ja2V0LmlvL2xvZ2dlci5taW4uanMnO1xuXHQgIH1cblxuXHQgIHNjcmlwdC5hc3luYyA9IHRydWU7XG5cdCAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHQgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpbnN0YW5jZS5vbkxvZ2dlcihuZXcgd2luZG93Ll9MUkxvZ2dlcih7XG5cdCAgICAgIHNka1ZlcnNpb246IChcIjAuNi4xMlwiKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cdCAgICB9KSk7XG5cdCAgfTtcblx0ICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGNvbnNvbGUud2FybignTG9nUm9ja2V0OiBzY3JpcHQgY291bGQgbm90IGxvYWQuIENoZWNrIHRoYXQgeW91IGhhdmUgYSB2YWxpZCBuZXR3b3JrIGNvbm5lY3Rpb24uJyk7XG5cdCAgICBpbnN0YW5jZS51bmluc3RhbGwoKTtcblx0ICB9O1xuXHR9KTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBpbnN0YW5jZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIF9fd2VicGFja19tb2R1bGVfdGVtcGxhdGVfYXJndW1lbnRfMF9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfbW9kdWxlX3RlbXBsYXRlX2FyZ3VtZW50XzBfXyk7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKSkpXG59KTtcbjsiLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSwgcmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicmVhY3RcIiwgXCJwcm9wLXR5cGVzXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSwgcmVxdWlyZShcInByb3AtdHlwZXNcIikpIDogZmFjdG9yeShyb290W1wicmVhY3RcIl0sIHJvb3RbXCJwcm9wLXR5cGVzXCJdKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzExX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMTJfXykge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdhcm47XG5mdW5jdGlvbiB3YXJuKHMpIHtcbiAgY29uc29sZS53YXJuKCdbcmVhY3QtZ2FdJywgcyk7XG59XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJpbTtcbi8vIEdBIHN0cmluZ3MgbmVlZCB0byBoYXZlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZSB0cmltbWVkLCBhbmQgbm90IGFsbFxuLy8gYnJvd3NlcnMgaGF2ZSBTdHJpbmcucHJvdG90b3lwZS50cmltKCkuXG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50ZXN0TW9kZUFQSSA9IGV4cG9ydHMuT3V0Ym91bmRMaW5rID0gZXhwb3J0cy5wbHVnaW4gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0cy5pbml0aWFsaXplID0gaW5pdGlhbGl6ZTtcbmV4cG9ydHMuZ2EgPSBnYTtcbmV4cG9ydHMuc2V0ID0gc2V0O1xuZXhwb3J0cy5zZW5kID0gc2VuZDtcbmV4cG9ydHMucGFnZXZpZXcgPSBwYWdldmlldztcbmV4cG9ydHMubW9kYWx2aWV3ID0gbW9kYWx2aWV3O1xuZXhwb3J0cy50aW1pbmcgPSB0aW1pbmc7XG5leHBvcnRzLmV2ZW50ID0gZXZlbnQ7XG5leHBvcnRzLmV4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbmV4cG9ydHMub3V0Ym91bmRMaW5rID0gb3V0Ym91bmRMaW5rO1xuXG52YXIgX2Zvcm1hdDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2Zvcm1hdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JtYXQyKTtcblxudmFyIF9yZW1vdmVMZWFkaW5nU2xhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX3JlbW92ZUxlYWRpbmdTbGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVMZWFkaW5nU2xhc2gpO1xuXG52YXIgX3RyaW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3RyaW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJpbSk7XG5cbnZhciBfbG9hZEdBID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF9sb2FkR0EyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9hZEdBKTtcblxudmFyIF93YXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF93YXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm4pO1xuXG52YXIgX2xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfbG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZyk7XG5cbnZhciBfdGVzdE1vZGVBUEkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX3Rlc3RNb2RlQVBJMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rlc3RNb2RlQVBJKTtcblxudmFyIF9PdXRib3VuZExpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9PdXRib3VuZExpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3V0Ym91bmRMaW5rKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogUmVhY3QgR29vZ2xlIEFuYWx5dGljcyBNb2R1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYWNrYWdlIHJlYWN0LWdhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGF1dGhvciAgQWRhbSBMb2Z0aW5nIDxhZGFtQG1vemlsbGFmb3VuZGF0aW9uLm9yZz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgICAgICBBdHVsIFZhcm1hIDxhdHVsQG1vemlsbGFmb3VuZGF0aW9uLm9yZz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuLyoqXG4gKiBVdGlsaXRpZXNcbiAqL1xuXG5cbnZhciBfZGVidWcgPSBmYWxzZTtcbnZhciBfdGl0bGVDYXNlID0gdHJ1ZTtcbnZhciBfdGVzdE1vZGUgPSBmYWxzZTtcbnZhciBfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgPSB0cnVlO1xuXG52YXIgaW50ZXJuYWxHYSA9IGZ1bmN0aW9uIGludGVybmFsR2EoKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIGlmIChfdGVzdE1vZGUpIHJldHVybiBfdGVzdE1vZGVBUEkyLmRlZmF1bHQuZ2EuYXBwbHkoX3Rlc3RNb2RlQVBJMi5kZWZhdWx0LCBhcmd1bWVudHMpO1xuICBpZiAoIXdpbmRvdy5nYSkgcmV0dXJuICgwLCBfd2FybjIuZGVmYXVsdCkoJ1JlYWN0R0EuaW5pdGlhbGl6ZSBtdXN0IGJlIGNhbGxlZCBmaXJzdCBvciBHb29nbGVBbmFseXRpY3Mgc2hvdWxkIGJlIGxvYWRlZCBtYW51YWxseScpO1xuICByZXR1cm4gKF93aW5kb3cgPSB3aW5kb3cpLmdhLmFwcGx5KF93aW5kb3csIGFyZ3VtZW50cyk7XG59O1xuXG5mdW5jdGlvbiBfZm9ybWF0KHMpIHtcbiAgcmV0dXJuICgwLCBfZm9ybWF0My5kZWZhdWx0KShzLCBfdGl0bGVDYXNlKTtcbn1cblxuZnVuY3Rpb24gX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY29tbWFuZCA9IGFyZ3NbMF07XG4gIGlmICh0eXBlb2YgaW50ZXJuYWxHYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgY29tbWFuZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2dhIGNvbW1hbmQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgfHwgIUFycmF5LmlzQXJyYXkodHJhY2tlck5hbWVzKSkgaW50ZXJuYWxHYS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRyYWNrZXJOYW1lcykpIHtcbiAgICAgIHRyYWNrZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGludGVybmFsR2EuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoW25hbWUgKyAnLicgKyBjb21tYW5kXS5jb25jYXQoYXJncy5zbGljZSgxKSkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfaW5pdGlhbGl6ZShnYVRyYWNraW5nSUQsIG9wdGlvbnMpIHtcbiAgaWYgKCFnYVRyYWNraW5nSUQpIHtcbiAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdnYVRyYWNraW5nSUQgaXMgcmVxdWlyZWQgaW4gaW5pdGlhbGl6ZSgpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyAmJiBvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICBfZGVidWcgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRpdGxlQ2FzZSA9PT0gZmFsc2UpIHtcbiAgICAgIF90aXRsZUNhc2UgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdhT3B0aW9ucykge1xuICAgIGludGVybmFsR2EoJ2NyZWF0ZScsIGdhVHJhY2tpbmdJRCwgb3B0aW9ucy5nYU9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsR2EoJ2NyZWF0ZScsIGdhVHJhY2tpbmdJRCwgJ2F1dG8nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplKGNvbmZpZ3NPclRyYWNraW5nSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50ZXN0TW9kZSA9PT0gdHJ1ZSkge1xuICAgIF90ZXN0TW9kZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgKDAsIF9sb2FkR0EyLmRlZmF1bHQpKG9wdGlvbnMpO1xuICB9XG5cbiAgX2Fsd2F5c1NlbmRUb0RlZmF1bHRUcmFja2VyID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciA6IHRydWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnc09yVHJhY2tpbmdJZCkpIHtcbiAgICBjb25maWdzT3JUcmFja2luZ0lkLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgaWYgKCh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnQWxsIGNvbmZpZ3MgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX2luaXRpYWxpemUoY29uZmlnLnRyYWNraW5nSWQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgX2luaXRpYWxpemUoY29uZmlnc09yVHJhY2tpbmdJZCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogZ2E6XG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBHQSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGdhKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICBpbnRlcm5hbEdhLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgaWYgKF9kZWJ1Zykge1xuICAgICAgKDAsIF9sb2cyLmRlZmF1bHQpKCdjYWxsZWQgZ2EoXFwnYXJndW1lbnRzXFwnKTsnKTtcbiAgICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnd2l0aCBhcmd1bWVudHM6ICcgKyBKU09OLnN0cmluZ2lmeShhcmdzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHdpbmRvdy5nYTtcbn1cblxuLyoqXG4gKiBzZXQ6XG4gKiBHQSB0cmFja2VyIHNldCBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZHNPYmplY3QgLSBhIGZpZWxkL3ZhbHVlIHBhaXIgb3IgYSBncm91cCBvZiBmaWVsZC92YWx1ZSBwYWlycyBvbiB0aGUgdHJhY2tlclxuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cbmZ1bmN0aW9uIHNldChmaWVsZHNPYmplY3QsIHRyYWNrZXJOYW1lcykge1xuICBpZiAoIWZpZWxkc09iamVjdCkge1xuICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2BmaWVsZHNPYmplY3RgIGlzIHJlcXVpcmVkIGluIC5zZXQoKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGZpZWxkc09iamVjdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZmllbGRzT2JqZWN0KSkgIT09ICdvYmplY3QnKSB7XG4gICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnRXhwZWN0ZWQgYGZpZWxkc09iamVjdGAgYXJnIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhmaWVsZHNPYmplY3QpLmxlbmd0aCA9PT0gMCkge1xuICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2VtcHR5IGBmaWVsZHNPYmplY3RgIGdpdmVuIHRvIC5zZXQoKScpO1xuICB9XG5cbiAgX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMsICdzZXQnLCBmaWVsZHNPYmplY3QpO1xuXG4gIGlmIChfZGVidWcpIHtcbiAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2NhbGxlZCBnYShcXCdzZXRcXCcsIGZpZWxkc09iamVjdCk7Jyk7XG4gICAgKDAsIF9sb2cyLmRlZmF1bHQpKCd3aXRoIGZpZWxkc09iamVjdDogJyArIEpTT04uc3RyaW5naWZ5KGZpZWxkc09iamVjdCkpO1xuICB9XG59XG5cbi8qKlxuICogc2VuZDpcbiAqIENsb25lIG9mIHRoZSBsb3cgbGV2ZWwgYGdhLnNlbmRgIG1ldGhvZFxuICogV0FSTklORzogTm8gdmFsaWRhdGlvbnMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoaXNcbiAqIEBwYXJhbSAge09iamVjdH0gZmllbGRPYmplY3QgLSBmaWVsZCBvYmplY3QgZm9yIHRyYWNraW5nIGRpZmZlcmVudCBhbmFseXRpY3NcbiAqIEBwYXJhbSAge0FycmF5fSB0cmFja2VyTmFtZXMgLSB0cmFja2VycyB0byBzZW5kIHRoZSBjb21tYW5kIHRvXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqL1xuZnVuY3Rpb24gc2VuZChmaWVsZE9iamVjdCwgdHJhY2tlck5hbWVzKSB7XG4gIF9nYUNvbW1hbmQodHJhY2tlck5hbWVzLCAnc2VuZCcsIGZpZWxkT2JqZWN0KTtcbiAgaWYgKF9kZWJ1Zykge1xuICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIGZpZWxkT2JqZWN0KTsnKTtcbiAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ3dpdGggZmllbGRPYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShmaWVsZE9iamVjdCkpO1xuICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnd2l0aCB0cmFja2VyczogJyArIEpTT04uc3RyaW5naWZ5KHRyYWNrZXJOYW1lcykpO1xuICB9XG59XG5cbi8qKlxuICogcGFnZXZpZXc6XG4gKiBCYXNpYyBHQSBwYWdldmlldyB0cmFja2luZ1xuICogQHBhcmFtICB7U3RyaW5nfSBwYXRoIC0gdGhlIGN1cnJlbnQgcGFnZSBwYWdlIGUuZy4gJy9hYm91dCdcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlIC0gKG9wdGlvbmFsKSB0aGUgcGFnZSB0aXRsZSBlLiBnLiAnTXkgV2Vic2l0ZSdcbiAqL1xuZnVuY3Rpb24gcGFnZXZpZXcocmF3UGF0aCwgdHJhY2tlck5hbWVzLCB0aXRsZSkge1xuICBpZiAoIXJhd1BhdGgpIHtcbiAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdwYXRoIGlzIHJlcXVpcmVkIGluIC5wYWdldmlldygpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhdGggPSAoMCwgX3RyaW0yLmRlZmF1bHQpKHJhd1BhdGgpO1xuICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdwYXRoIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnBhZ2V2aWV3KCknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZXh0cmFGaWVsZHMgPSB7fTtcbiAgaWYgKHRpdGxlKSB7XG4gICAgZXh0cmFGaWVsZHMudGl0bGUgPSB0aXRsZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICBfZ2FDb21tYW5kKHRyYWNrZXJOYW1lcywgJ3NlbmQnLCBfZXh0ZW5kcyh7XG4gICAgICBoaXRUeXBlOiAncGFnZXZpZXcnLFxuICAgICAgcGFnZTogcGF0aFxuICAgIH0sIGV4dHJhRmllbGRzKSk7XG5cbiAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2NhbGxlZCBnYShcXCdzZW5kXFwnLCBcXCdwYWdldmlld1xcJywgcGF0aCk7Jyk7XG4gICAgICB2YXIgZXh0cmFMb2cgPSAnJztcbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBleHRyYUxvZyA9ICcgYW5kIHRpdGxlOiAnICsgdGl0bGU7XG4gICAgICB9XG4gICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ3dpdGggcGF0aDogJyArIHBhdGggKyBleHRyYUxvZyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogbW9kYWx2aWV3OlxuICogYSBwcm94eSB0byBiYXNpYyBHQSBwYWdldmlldyB0cmFja2luZyB0byBjb25zaXN0ZW50bHkgdHJhY2tcbiAqIG1vZGFsIHZpZXdzIHRoYXQgYXJlIGFuIGVxdWl2YWxlbnQgVVggdG8gYSB0cmFkaXRpb25hbCBwYWdldmlld1xuICogQHBhcmFtICB7U3RyaW5nfSBtb2RhbE5hbWUgZS5nLiAnYWRkLW9yLWVkaXQtY2x1YidcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5mdW5jdGlvbiBtb2RhbHZpZXcocmF3TW9kYWxOYW1lLCB0cmFja2VyTmFtZXMpIHtcbiAgaWYgKCFyYXdNb2RhbE5hbWUpIHtcbiAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdtb2RhbE5hbWUgaXMgcmVxdWlyZWQgaW4gLm1vZGFsdmlldyhtb2RhbE5hbWUpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vZGFsTmFtZSA9ICgwLCBfcmVtb3ZlTGVhZGluZ1NsYXNoMi5kZWZhdWx0KSgoMCwgX3RyaW0yLmRlZmF1bHQpKHJhd01vZGFsTmFtZSkpO1xuXG4gIGlmIChtb2RhbE5hbWUgPT09ICcnKSB7XG4gICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnbW9kYWxOYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgb3IgYSBzaW5nbGUgLyBpbiAubW9kYWx2aWV3KCknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHBhdGggPSAnL21vZGFsLycgKyBtb2RhbE5hbWU7XG4gICAgX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMsICdzZW5kJywgJ3BhZ2V2aWV3JywgcGF0aCk7XG5cbiAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2NhbGxlZCBnYShcXCdzZW5kXFwnLCBcXCdwYWdldmlld1xcJywgcGF0aCk7Jyk7XG4gICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ3dpdGggcGF0aDogJyArIHBhdGgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIHRpbWluZzpcbiAqIEdBIHRpbWluZ1xuICogQHBhcmFtIGFyZ3MuY2F0ZWdvcnkge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLnZhcmlhYmxlIHtTdHJpbmd9IHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy52YWx1ZSAge0ludH0gIHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy5sYWJlbCAge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5mdW5jdGlvbiB0aW1pbmcoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGNhdGVnb3J5ID0gX3JlZi5jYXRlZ29yeSxcbiAgICAgIHZhcmlhYmxlID0gX3JlZi52YXJpYWJsZSxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbDtcblxuICB2YXIgdHJhY2tlck5hbWVzID0gYXJndW1lbnRzWzFdO1xuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoIWNhdGVnb3J5IHx8ICF2YXJpYWJsZSB8fCAhdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnYXJncy5jYXRlZ29yeSwgYXJncy52YXJpYWJsZSAnICsgJ0FORCBhcmdzLnZhbHVlIGFyZSByZXF1aXJlZCBpbiB0aW1pbmcoKSAnICsgJ0FORCBhcmdzLnZhbHVlIGhhcyB0byBiZSBhIG51bWJlcicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlcXVpcmVkIEZpZWxkc1xuICAgIHZhciBmaWVsZE9iamVjdCA9IHtcbiAgICAgIGhpdFR5cGU6ICd0aW1pbmcnLFxuICAgICAgdGltaW5nQ2F0ZWdvcnk6IF9mb3JtYXQoY2F0ZWdvcnkpLFxuICAgICAgdGltaW5nVmFyOiBfZm9ybWF0KHZhcmlhYmxlKSxcbiAgICAgIHRpbWluZ1ZhbHVlOiB2YWx1ZVxuICAgIH07XG5cbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGZpZWxkT2JqZWN0LnRpbWluZ0xhYmVsID0gX2Zvcm1hdChsYWJlbCk7XG4gICAgfVxuXG4gICAgc2VuZChmaWVsZE9iamVjdCwgdHJhY2tlck5hbWVzKTtcbiAgfVxufVxuXG4vKipcbiAqIGV2ZW50OlxuICogR0EgZXZlbnQgdHJhY2tpbmdcbiAqIEBwYXJhbSBhcmdzLmNhdGVnb3J5IHtTdHJpbmd9IHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy5hY3Rpb24ge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IG9wdGlvbmFsXG4gKiBAcGFyYW0gYXJncy52YWx1ZSB7SW50fSBvcHRpb25hbFxuICogQHBhcmFtIGFyZ3Mubm9uSW50ZXJhY3Rpb24ge2Jvb2xlYW59IG9wdGlvbmFsXG4gKiBAcGFyYW0gYXJncy50cmFuc3BvcnQge3N0cmluZ30gb3B0aW9uYWxcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5mdW5jdGlvbiBldmVudCgpIHtcbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgdHJhY2tlck5hbWVzID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBjYXRlZ29yeSA9IF9yZWYyLmNhdGVnb3J5LFxuICAgICAgYWN0aW9uID0gX3JlZjIuYWN0aW9uLFxuICAgICAgbGFiZWwgPSBfcmVmMi5sYWJlbCxcbiAgICAgIHZhbHVlID0gX3JlZjIudmFsdWUsXG4gICAgICBub25JbnRlcmFjdGlvbiA9IF9yZWYyLm5vbkludGVyYWN0aW9uLFxuICAgICAgdHJhbnNwb3J0ID0gX3JlZjIudHJhbnNwb3J0LFxuICAgICAgYXJncyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydjYXRlZ29yeScsICdhY3Rpb24nLCAnbGFiZWwnLCAndmFsdWUnLCAnbm9uSW50ZXJhY3Rpb24nLCAndHJhbnNwb3J0J10pO1xuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBTaW1wbGUgVmFsaWRhdGlvblxuICAgIGlmICghY2F0ZWdvcnkgfHwgIWFjdGlvbikge1xuICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnYXJncy5jYXRlZ29yeSBBTkQgYXJncy5hY3Rpb24gYXJlIHJlcXVpcmVkIGluIGV2ZW50KCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgZXZlbnRDYXRlZ29yeTogX2Zvcm1hdChjYXRlZ29yeSksXG4gICAgICBldmVudEFjdGlvbjogX2Zvcm1hdChhY3Rpb24pXG4gICAgfTtcblxuICAgIC8vIE9wdGlvbmFsIEZpZWxkc1xuICAgIGlmIChsYWJlbCkge1xuICAgICAgZmllbGRPYmplY3QuZXZlbnRMYWJlbCA9IF9mb3JtYXQobGFiZWwpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdFeHBlY3RlZCBgYXJncy52YWx1ZWAgYXJnIHRvIGJlIGEgTnVtYmVyLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRPYmplY3QuZXZlbnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9uSW50ZXJhY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIG5vbkludGVyYWN0aW9uICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnYGFyZ3Mubm9uSW50ZXJhY3Rpb25gIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRPYmplY3Qubm9uSW50ZXJhY3Rpb24gPSBub25JbnRlcmFjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRyYW5zcG9ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNwb3J0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAoMCwgX3dhcm4yLmRlZmF1bHQpKCdgYXJncy50cmFuc3BvcnRgIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoWydiZWFjb24nLCAneGhyJywgJ2ltYWdlJ10uaW5kZXhPZih0cmFuc3BvcnQpID09PSAtMSkge1xuICAgICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2BhcmdzLnRyYW5zcG9ydGAgbXVzdCBiZSBlaXRoZXIgb25lIG9mIHRoZXNlIHZhbHVlczogYGJlYWNvbmAsIGB4aHJgIG9yIGBpbWFnZWAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkT2JqZWN0LnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhhcmdzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGtleS5zdWJzdHIoMCwgJ2RpbWVuc2lvbicubGVuZ3RoKSA9PT0gJ2RpbWVuc2lvbic7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBmaWVsZE9iamVjdFtrZXldID0gYXJnc1trZXldO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMoYXJncykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBrZXkuc3Vic3RyKDAsICdtZXRyaWMnLmxlbmd0aCkgPT09ICdtZXRyaWMnO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZmllbGRPYmplY3Rba2V5XSA9IGFyZ3Nba2V5XTtcbiAgICB9KTtcblxuICAgIC8vIFNlbmQgdG8gR0FcbiAgICBzZW5kKGZpZWxkT2JqZWN0LCB0cmFja2VyTmFtZXMpO1xuICB9XG59XG5cbi8qKlxuICogZXhjZXB0aW9uOlxuICogR0EgZXhjZXB0aW9uIHRyYWNraW5nXG4gKiBAcGFyYW0gYXJncy5kZXNjcmlwdGlvbiB7U3RyaW5nfSBvcHRpb25hbFxuICogQHBhcmFtIGFyZ3MuZmF0YWwge2Jvb2xlYW59IG9wdGlvbmFsXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqL1xuZnVuY3Rpb24gZXhjZXB0aW9uKF9yZWYzLCB0cmFja2VyTmFtZXMpIHtcbiAgdmFyIGRlc2NyaXB0aW9uID0gX3JlZjMuZGVzY3JpcHRpb24sXG4gICAgICBmYXRhbCA9IF9yZWYzLmZhdGFsO1xuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXhjZXB0aW9uJ1xuICAgIH07XG5cbiAgICAvLyBPcHRpb25hbCBGaWVsZHNcbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIGZpZWxkT2JqZWN0LmV4RGVzY3JpcHRpb24gPSBfZm9ybWF0KGRlc2NyaXB0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZhdGFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBmYXRhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2BhcmdzLmZhdGFsYCBtdXN0IGJlIGEgYm9vbGVhbi4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LmV4RmF0YWwgPSBmYXRhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZW5kIHRvIEdBXG4gICAgc2VuZChmaWVsZE9iamVjdCwgdHJhY2tlck5hbWVzKTtcbiAgfVxufVxuXG52YXIgcGx1Z2luID0gZXhwb3J0cy5wbHVnaW4gPSB7XG4gIC8qKlxuICAgKiByZXF1aXJlOlxuICAgKiBHQSByZXF1aXJlcyBhIHBsdWdpblxuICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0gb3B0aW9uYWwgZS5nIHtwYXRoOiAnL2xvZycsIGRlYnVnOiB0cnVlfVxuICAgKi9cbiAgcmVxdWlyZTogZnVuY3Rpb24gcmVxdWlyZShyYXdOYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICBpZiAoIXJhd05hbWUpIHtcbiAgICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnYG5hbWVgIGlzIHJlcXVpcmVkIGluIC5yZXF1aXJlKCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9ICgwLCBfdHJpbTIuZGVmYXVsdCkocmF3TmFtZSk7XG4gICAgICBpZiAobmFtZSA9PT0gJycpIHtcbiAgICAgICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnYG5hbWVgIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnJlcXVpcmUoKScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE9wdGlvbmFsIEZpZWxkc1xuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9ucykpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ0V4cGVjdGVkIGBvcHRpb25zYCBhcmcgdG8gYmUgYW4gT2JqZWN0Jyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ0VtcHR5IGBvcHRpb25zYCBnaXZlbiB0byAucmVxdWlyZSgpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBnYSgncmVxdWlyZScsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2NhbGxlZCBnYShcXCdyZXF1aXJlXFwnLCBcXCcnICsgbmFtZSArICdcXCcsICcgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdhKCdyZXF1aXJlJywgbmFtZSk7XG5cbiAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnY2FsbGVkIGdhKFxcJ3JlcXVpcmVcXCcsIFxcJycgKyBuYW1lICsgJ1xcJyk7Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV4ZWN1dGU6XG4gICAqIEdBIGV4ZWN1dGUgYWN0aW9uIGZvciBwbHVnaW5cbiAgICogVGFrZXMgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50c1xuICAgKiBAcGFyYW0gcGx1Z2luTmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICogQHBhcmFtIGFjdGlvbiB7U3RyaW5nfSBlLmcuICdhZGRJdGVtJyBvciAnbXlDdXN0b21BY3Rpb24nXG4gICAqIEBwYXJhbSBhY3Rpb25UeXBlIHtTdHJpbmd9IG9wdGlvbmFsIGUuZy4gJ2RldGFpbCdcbiAgICogQHBhcmFtIHBheWxvYWQge09iamVjdH0gb3B0aW9uYWwgZS5nIHsgaWQ6ICcxeDVlJywgbmFtZSA6ICdNeSBwcm9kdWN0IHRvIHRyYWNrJyB9XG4gICAqL1xuICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKHBsdWdpbk5hbWUsIGFjdGlvbikge1xuICAgIHZhciBwYXlsb2FkID0gdm9pZCAwO1xuICAgIHZhciBhY3Rpb25UeXBlID0gdm9pZCAwO1xuXG4gICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyAwIDogYXJndW1lbnRzLmxlbmd0aCAtIDIpID09PSAxKSB7XG4gICAgICBwYXlsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25UeXBlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgICAgcGF5bG9hZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ0V4cGVjdGVkIGBwbHVnaW5OYW1lYCBhcmcgdG8gYmUgYSBTdHJpbmcuJyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ0V4cGVjdGVkIGBhY3Rpb25gIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb21tYW5kID0gcGx1Z2luTmFtZSArICc6JyArIGFjdGlvbjtcbiAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQgfHwgbnVsbDtcbiAgICAgICAgaWYgKGFjdGlvblR5cGUgJiYgcGF5bG9hZCkge1xuICAgICAgICAgIGdhKGNvbW1hbmQsIGFjdGlvblR5cGUsIHBheWxvYWQpO1xuICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnY2FsbGVkIGdhKFxcJycgKyBjb21tYW5kICsgJ1xcJyk7Jyk7XG4gICAgICAgICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2FjdGlvblR5cGU6IFwiJyArIGFjdGlvblR5cGUgKyAnXCIgd2l0aCBwYXlsb2FkOiAnICsgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgZ2EoY29tbWFuZCwgcGF5bG9hZCk7XG4gICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgKDAsIF9sb2cyLmRlZmF1bHQpKCdjYWxsZWQgZ2EoXFwnJyArIGNvbW1hbmQgKyAnXFwnKTsnKTtcbiAgICAgICAgICAgICgwLCBfbG9nMi5kZWZhdWx0KSgnd2l0aCBwYXlsb2FkOiAnICsgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnYShjb21tYW5kKTtcbiAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICAoMCwgX2xvZzIuZGVmYXVsdCkoJ2NhbGxlZCBnYShcXCcnICsgY29tbWFuZCArICdcXCcpOycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBvdXRib3VuZExpbms6XG4gKiBHQSBvdXRib3VuZExpbmsgdHJhY2tpbmdcbiAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IGUuZy4gdXJsLCBvciAnQ3JlYXRlIGFuIEFjY291bnQnXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoaXRDYWxsYmFjayAtIENhbGxlZCBhZnRlciBwcm9jZXNzaW5nIGEgaGl0LlxuICovXG5mdW5jdGlvbiBvdXRib3VuZExpbmsoYXJncywgaGl0Q2FsbGJhY2ssIHRyYWNrZXJOYW1lcykge1xuICBpZiAodHlwZW9mIGhpdENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnaGl0Q2FsbGJhY2sgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gU2ltcGxlIFZhbGlkYXRpb25cbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MubGFiZWwpIHtcbiAgICAgICgwLCBfd2FybjIuZGVmYXVsdCkoJ2FyZ3MubGFiZWwgaXMgcmVxdWlyZWQgaW4gb3V0Ym91bmRMaW5rKCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgZXZlbnRDYXRlZ29yeTogJ091dGJvdW5kJyxcbiAgICAgIGV2ZW50QWN0aW9uOiAnQ2xpY2snLFxuICAgICAgZXZlbnRMYWJlbDogX2Zvcm1hdChhcmdzLmxhYmVsKVxuICAgIH07XG5cbiAgICB2YXIgc2FmZXR5Q2FsbGJhY2tDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgc2FmZXR5Q2FsbGJhY2sgPSBmdW5jdGlvbiBzYWZldHlDYWxsYmFjaygpIHtcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBkZWxheWVkIHJlc3BvbnNlIGZyb20gR0FcbiAgICAgIC8vIGNhdXNpbmcgaGl0Q2FsbGJhY2sgZnJvbSBiZWluZyBmaXJlZCB0d2ljZVxuICAgICAgc2FmZXR5Q2FsbGJhY2tDYWxsZWQgPSB0cnVlO1xuXG4gICAgICBoaXRDYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICAvLyBVc2luZyBhIHRpbWVvdXQgdG8gZW5zdXJlIHRoZSBleGVjdXRpb24gb2YgY3JpdGljYWwgYXBwbGljYXRpb24gY29kZVxuICAgIC8vIGluIHRoZSBjYXNlIHdoZW4gdGhlIEdBIHNlcnZlciBtaWdodCBiZSBkb3duXG4gICAgLy8gb3IgYW4gYWQgYmxvY2tlciBwcmV2ZW50cyBzZW5kaW5nIHRoZSBkYXRhXG5cbiAgICAvLyByZWdpc3RlciBzYWZldHkgbmV0IHRpbWVvdXQ6XG4gICAgdmFyIHQgPSBzZXRUaW1lb3V0KHNhZmV0eUNhbGxiYWNrLCAyNTApO1xuXG4gICAgdmFyIGNsZWFyYWJsZUNhbGxiYWNrRm9yR0EgPSBmdW5jdGlvbiBjbGVhcmFibGVDYWxsYmFja0ZvckdBKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHQpO1xuICAgICAgaWYgKCFzYWZldHlDYWxsYmFja0NhbGxlZCkge1xuICAgICAgICBoaXRDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmaWVsZE9iamVjdC5oaXRDYWxsYmFjayA9IGNsZWFyYWJsZUNhbGxiYWNrRm9yR0E7XG5cbiAgICAvLyBTZW5kIHRvIEdBXG4gICAgc2VuZChmaWVsZE9iamVjdCwgdHJhY2tlck5hbWVzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBnYSBpcyBub3QgZGVmaW5lZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBzbyB0aGUgYXBwbGljYXRpb25cbiAgICAvLyBjb250aW51ZXMgdG8gd29yayBhcyBleHBlY3RlZFxuICAgIHNldFRpbWVvdXQoaGl0Q2FsbGJhY2ssIDApO1xuICB9XG59XG5cbl9PdXRib3VuZExpbmsyLmRlZmF1bHQub3JpZ1RyYWNrTGluayA9IF9PdXRib3VuZExpbmsyLmRlZmF1bHQudHJhY2tMaW5rO1xuX091dGJvdW5kTGluazIuZGVmYXVsdC50cmFja0xpbmsgPSBvdXRib3VuZExpbms7XG52YXIgT3V0Ym91bmRMaW5rID0gZXhwb3J0cy5PdXRib3VuZExpbmsgPSBfT3V0Ym91bmRMaW5rMi5kZWZhdWx0O1xudmFyIHRlc3RNb2RlQVBJID0gZXhwb3J0cy50ZXN0TW9kZUFQSSA9IF90ZXN0TW9kZUFQSTIuZGVmYXVsdDtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBpbml0aWFsaXplOiBpbml0aWFsaXplLFxuICBnYTogZ2EsXG4gIHNldDogc2V0LFxuICBzZW5kOiBzZW5kLFxuICBwYWdldmlldzogcGFnZXZpZXcsXG4gIG1vZGFsdmlldzogbW9kYWx2aWV3LFxuICB0aW1pbmc6IHRpbWluZyxcbiAgZXZlbnQ6IGV2ZW50LFxuICBleGNlcHRpb246IGV4Y2VwdGlvbixcbiAgcGx1Z2luOiBwbHVnaW4sXG4gIG91dGJvdW5kTGluazogb3V0Ym91bmRMaW5rLFxuICBPdXRib3VuZExpbms6IE91dGJvdW5kTGluayxcbiAgdGVzdE1vZGVBUEk6IF90ZXN0TW9kZUFQSTIuZGVmYXVsdFxufTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXQ7XG5cbnZhciBfbWlnaHRCZUVtYWlsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9taWdodEJlRW1haWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWlnaHRCZUVtYWlsKTtcblxudmFyIF90b1RpdGxlQ2FzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfdG9UaXRsZUNhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9UaXRsZUNhc2UpO1xuXG52YXIgX3dhcm4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3dhcm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2Fybik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciByZWRhY3RlZCA9ICdSRURBQ1RFRCAoUG90ZW50aWFsIEVtYWlsIEFkZHJlc3MpJztcblxuZnVuY3Rpb24gZm9ybWF0KHMsIHRpdGxlQ2FzZSkge1xuICBpZiAoKDAsIF9taWdodEJlRW1haWwyLmRlZmF1bHQpKHMpKSB7XG4gICAgKDAsIF93YXJuMi5kZWZhdWx0KSgnVGhpcyBhcmcgbG9va3MgbGlrZSBhbiBlbWFpbCBhZGRyZXNzLCByZWRhY3RpbmcuJyk7XG4gICAgcmV0dXJuIHJlZGFjdGVkO1xuICB9XG5cbiAgaWYgKHRpdGxlQ2FzZSkge1xuICAgIHJldHVybiAoMCwgX3RvVGl0bGVDYXNlMi5kZWZhdWx0KShzKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufVxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1pZ2h0QmVFbWFpbDtcbi8vIFNlZSBpZiBzIGNvdWxkIGJlIGFuIGVtYWlsIGFkZHJlc3MuIFdlIGRvbid0IHdhbnQgdG8gc2VuZCBwZXJzb25hbCBkYXRhIGxpa2UgZW1haWwuXG4vLyBodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9hbmFseXRpY3MvYW5zd2VyLzI3OTU5ODM/aGw9ZW5cbmZ1bmN0aW9uIG1pZ2h0QmVFbWFpbChzKSB7XG4gIC8vIFRoZXJlJ3Mgbm8gcG9pbnQgdHJ5aW5nIHRvIHZhbGlkYXRlIHJmYzgyMiBmdWxseSwganVzdCBsb29rIGZvciAuLi5ALi4uXG4gIHJldHVybiAoL1teQF0rQFteQF0rLy50ZXN0KHMpXG4gICk7XG59XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9UaXRsZUNhc2U7XG5cbnZhciBfdHJpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfdHJpbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmltKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNtYWxsV29yZHMgPSAvXihhfGFufGFuZHxhc3xhdHxidXR8Ynl8ZW58Zm9yfGlmfGlufG5vcnxvZnxvbnxvcnxwZXJ8dGhlfHRvfHZzP1xcLj98dmlhKSQvaTsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFRvIFRpdGxlIENhc2UgMi4xIC0gaHR0cDovL2luZGl2aWRlZC5jb20vY29kZS90by10aXRsZS1jYXNlL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAwOC0yMDEzIERhdmlkIEdvdWNoLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3VjaC90by10aXRsZS1jYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG5mdW5jdGlvbiB0b1RpdGxlQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuICgwLCBfdHJpbTIuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKC9bQS1aYS16MC05XFx1MDBDMC1cXHUwMEZGXStbXlxccy1dKi9nLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4LCB0aXRsZSkge1xuICAgIGlmIChpbmRleCA+IDAgJiYgaW5kZXggKyBtYXRjaC5sZW5ndGggIT09IHRpdGxlLmxlbmd0aCAmJiBtYXRjaC5zZWFyY2goc21hbGxXb3JkcykgPiAtMSAmJiB0aXRsZS5jaGFyQXQoaW5kZXggLSAyKSAhPT0gJzonICYmICh0aXRsZS5jaGFyQXQoaW5kZXggKyBtYXRjaC5sZW5ndGgpICE9PSAnLScgfHwgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkgPT09ICctJykgJiYgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkuc2VhcmNoKC9bXlxccy1dLykgPCAwKSB7XG4gICAgICByZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2guc3Vic3RyKDEpLnNlYXJjaCgvW0EtWl18XFwuLi8pID4gLTEpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2guY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtYXRjaC5zdWJzdHIoMSk7XG4gIH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZUxlYWRpbmdTbGFzaDtcbmZ1bmN0aW9uIHJlbW92ZUxlYWRpbmdTbGFzaChzdHJpbmcpIHtcbiAgaWYgKHN0cmluZy5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJykge1xuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9hbmFseXRpY3Nqcy9cbiAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgKGZ1bmN0aW9uIChpLCBzLCBvLCBnLCByLCBhLCBtKSB7XG4gICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByO1xuICAgIGlbcl0gPSBpW3JdIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgIChpW3JdLnEgPSBpW3JdLnEgfHwgW10pLnB1c2goYXJndW1lbnRzKTtcbiAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTtcbiAgICBhID0gcy5jcmVhdGVFbGVtZW50KG8pLCBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTtcbiAgICBhLmFzeW5jID0gMTtcbiAgICBhLnNyYyA9IGc7XG4gICAgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKTtcbiAgfSkod2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsIG9wdGlvbnMgJiYgb3B0aW9ucy5nYUFkZHJlc3MgPyBvcHRpb25zLmdhQWRkcmVzcyA6ICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCAnZ2EnKTtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBsb2c7XG5mdW5jdGlvbiBsb2cocykge1xuICBjb25zb2xlLmluZm8oJ1tyZWFjdC1nYV0nLCBzKTtcbn1cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgZ2FDYWxscyA9IGV4cG9ydHMuZ2FDYWxscyA9IFtdO1xuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGNhbGxzOiBnYUNhbGxzLFxuICBnYTogZnVuY3Rpb24gZ2EoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgZ2FDYWxscy5wdXNoKFtdLmNvbmNhdChhcmdzKSk7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF93YXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF93YXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBORVdUQUIgPSAnX2JsYW5rJztcbnZhciBNSURETEVDTElDSyA9IDE7XG5cbnZhciBPdXRib3VuZExpbmsgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3V0Ym91bmRMaW5rLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPdXRib3VuZExpbmsoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE91dGJvdW5kTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gT3V0Ym91bmRMaW5rLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT3V0Ym91bmRMaW5rKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRhcmdldCA9IF90aGlzJHByb3BzLnRhcmdldCxcbiAgICAgICAgICBldmVudExhYmVsID0gX3RoaXMkcHJvcHMuZXZlbnRMYWJlbCxcbiAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuXG4gICAgICB2YXIgZXZlbnRNZXRhID0geyBsYWJlbDogZXZlbnRMYWJlbCB9O1xuICAgICAgdmFyIHNhbWVUYXJnZXQgPSB0YXJnZXQgIT09IE5FV1RBQjtcbiAgICAgIHZhciBub3JtYWxDbGljayA9ICEoZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmJ1dHRvbiA9PT0gTUlERExFQ0xJQ0spO1xuXG4gICAgICBpZiAoc2FtZVRhcmdldCAmJiBub3JtYWxDbGljaykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBPdXRib3VuZExpbmsudHJhY2tMaW5rKGV2ZW50TWV0YSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdG87XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT3V0Ym91bmRMaW5rLnRyYWNrTGluayhldmVudE1ldGEsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT3V0Ym91bmRMaW5rLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIGhyZWY6IHRoaXMucHJvcHMudG8sXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIHByb3BzLmV2ZW50TGFiZWw7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBwcm9wcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE91dGJvdW5kTGluaztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk91dGJvdW5kTGluay5wcm9wVHlwZXMgPSB7XG4gIGV2ZW50TGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRhcmdldDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHRvOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb25DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuT3V0Ym91bmRMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFyZ2V0OiBudWxsLFxuICB0bzogbnVsbCxcbiAgb25DbGljazogbnVsbFxufTtcblxuT3V0Ym91bmRMaW5rLnRyYWNrTGluayA9IGZ1bmN0aW9uICgpIHtcbiAgKDAsIF93YXJuMi5kZWZhdWx0KSgnZ2EgdHJhY2tpbmcgbm90IGVuYWJsZWQnKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE91dGJvdW5kTGluaztcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMTFfXztcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMTJfXztcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiAoXG4gICAgPGRpdj5IZWlnaHRzIGVzdGltYXRpbmcuIFBsZWFzZSB3YWl0Li4uPC9kaXY+XG4pIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnLi9Mb2FkaW5nJ1xuXG5leHBvcnQgZGVmYXVsdCAoaXNMb2FkaW5nLCBMb2FkaW5nQ29tcG9uZW50KSA9PiBMb2FkZXIgPT4gKFxuICAgIGNsYXNzIFdyYXBwZWRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRpbmcgPSAhIWlzTG9hZGluZyB8fCB0aGlzLnByb3BzLmlzTG9hZGluZ1xuICAgICAgICAgICAgY29uc3QgTG9hZGluZ0NvbXBvbmVudCA9IExvYWRpbmdDb21wb25lbnQgfHwgTG9hZGluZ1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW0tbG9hZGVyXCIgPlxuICAgICAgICAgICAgICAgICAgICB7bG9hZGluZyAgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW0tbG9hZGVyX19tYXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmdDb21wb25lbnQgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDxMb2FkZXIgey4uLnRoaXMucHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG4pIiwiaW1wb3J0IGxvYWRlckhvYyBmcm9tICcuL2hvYycgXG5pbXBvcnQgJy4vc3R5bGUuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBsb2FkZXJIb2NcbiIsImltcG9ydCB7IGdldENvbG9yIH0gZnJvbSAnLi4vY29uc3RhbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUsIGZpbHRlcnMpID0+IHtcbiAgICBsZXQgeyBmZWF0dXJlcyB9ID0gc3RhdGUuYXJlYVxuICAgIGxldCBhZ3JlZ2F0ZWQgPSBmZWF0dXJlc1xuICAgICAgICAucmVkdWNlKChyZXMsIGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGxldCB7IHR5cGUsIHBvcHVsYXRpb24gfSA9IGZlYXR1cmUucHJvcGVydGllc1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZSA9ICgocmVzIHx8IHt9KS5jaGFydCB8fCB7fSlbdHlwZV1cbiAgICAgICAgICAgIGlmICghY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzLmNoYXJ0W3R5cGVdID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmNoYXJ0W3R5cGVdICs9IDFcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7fSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIHJldHVybiB7XG4gICAgICAgIGxlZ2VuZDogdG9MaXN0T2ZPYmplY3RzKGFncmVnYXRlZC5jaGFydCwgZmlsdGVycyksXG4gICAgICAgIGlzQXJlYVNlbGVjdGVkOiAhZmVhdHVyZXMubGVuZ3RoID4gMFxuICAgIH1cbn1cblxuY29uc3QgdG9MaXN0T2ZPYmplY3RzID0gKGRhdGEsIGZpbHRlcnMpID0+IChcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5yZWR1Y2UoKHJlc3VsdCwgY3VycmVudEl0ZW0pID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCBjb3VudF0gPSBbY3VycmVudEl0ZW0sIGRhdGFbY3VycmVudEl0ZW1dXVxuICAgICAgICBsZXQgaXNBY3RpdmUgPSBmaWx0ZXJzLmZlYXR1cmVzLmluZGV4T2YobmFtZSkgPT09IC0xXG4gICAgICAgIHJlc3VsdC5wdXNoKHsgXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICBpc0FjdGl2ZVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSwgW10pXG4pIiwiaW1wb3J0IHsgZ2V0Q29sb3IsIGJyaWdodGVyQ29sb3IgfSBmcm9tICcuLi9jb25zdGFudHMnXG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgZmlsdGVycykgPT4ge1xuICAgIGxldCB7IGZlYXR1cmVzIH0gPSBzdGF0ZS5hcmVhXG4gICAgbGV0IGFncmVnYXRlZCA9IGZlYXR1cmVzXG4gICAgICAgIC5yZWR1Y2UoKHJlc3VsdCwgZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHsgcHJvcGVydGllcyB9ID0gZmVhdHVyZVxuICAgICAgICAgICAgbGV0IHsgdHlwZSwgcG9wdWxhdGlvbiB9ID0gcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMuZmVhdHVyZXMuaW5kZXhPZihwcm9wZXJ0aWVzLnR5cGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFt0eXBlXSA9IDBcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSByZXN1bHRbdHlwZV1cbiAgICAgICAgICAgIGlmICghY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W3R5cGVdID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W3R5cGVdICs9IDFcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSwge30pXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogdG9DaGFydChhZ3JlZ2F0ZWQpXG4gICAgfVxufVxuXG5jb25zdCB0b0NoYXJ0ID0gKGFnZ3JlZ2F0ZWREYXRhKSA9PiB7XG4gICAgbGV0IGRhdGEgPSBbXTtcblxuICAgIGZvciAobGV0IGxhYmVsIGluIGFnZ3JlZ2F0ZWREYXRhKSB7XG4gICAgICAgIGxldCBjb2xvciA9IGdldENvbG9yKGxhYmVsKVxuICAgICAgICBsZXQgaGlnaGxpZ2h0ID0gYnJpZ2h0ZXJDb2xvcihjb2xvcilcbiAgICAgICAgbGV0IHZhbHVlID0gYWdncmVnYXRlZERhdGFbbGFiZWxdXG4gICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgaGlnaGxpZ2h0LFxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbn0iLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcbiIsIi8qIVxuICogQ2hhcnQuanNcbiAqIGh0dHA6Ly9jaGFydGpzLm9yZy9cbiAqIFZlcnNpb246IDEuMS4xXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgTmljayBEb3duaWVcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL25ubmljay9DaGFydC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuXG4oZnVuY3Rpb24oKXtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvL0RlY2xhcmUgcm9vdCB2YXJpYWJsZSAtIHdpbmRvdyBpbiB0aGUgYnJvd3NlciwgZ2xvYmFsIG9uIHRoZSBzZXJ2ZXJcblx0dmFyIHJvb3QgPSB0aGlzLFxuXHRcdHByZXZpb3VzID0gcm9vdC5DaGFydDtcblxuXHQvL09jY3VweSB0aGUgZ2xvYmFsIHZhcmlhYmxlIG9mIENoYXJ0LCBhbmQgY3JlYXRlIGEgc2ltcGxlIGJhc2UgY2xhc3Ncblx0dmFyIENoYXJ0ID0gZnVuY3Rpb24oY29udGV4dCl7XG5cdFx0dmFyIGNoYXJ0ID0gdGhpcztcblx0XHR0aGlzLmNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuXG5cdFx0dGhpcy5jdHggPSBjb250ZXh0O1xuXG5cdFx0Ly9WYXJpYWJsZXMgZ2xvYmFsIHRvIHRoZSBjaGFydFxuXHRcdHZhciBjb21wdXRlRGltZW5zaW9uID0gZnVuY3Rpb24oZWxlbWVudCxkaW1lbnNpb24pXG5cdFx0e1xuXHRcdFx0aWYgKGVsZW1lbnRbJ29mZnNldCcrZGltZW5zaW9uXSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRbJ29mZnNldCcrZGltZW5zaW9uXTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShkaW1lbnNpb24pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgd2lkdGggPSB0aGlzLndpZHRoID0gY29tcHV0ZURpbWVuc2lvbihjb250ZXh0LmNhbnZhcywnV2lkdGgnKSB8fCBjb250ZXh0LmNhbnZhcy53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPSBjb21wdXRlRGltZW5zaW9uKGNvbnRleHQuY2FudmFzLCdIZWlnaHQnKSB8fCBjb250ZXh0LmNhbnZhcy5oZWlnaHQ7XG5cblx0XHR0aGlzLmFzcGVjdFJhdGlvID0gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuXHRcdC8vSGlnaCBwaXhlbCBkZW5zaXR5IGRpc3BsYXlzIC0gbXVsdGlwbHkgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBoZWlnaHQvd2lkdGggYnkgdGhlIGRldmljZSBwaXhlbCByYXRpbywgdGhlbiBzY2FsZS5cblx0XHRoZWxwZXJzLnJldGluYVNjYWxlKHRoaXMpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdC8vR2xvYmFsbHkgZXhwb3NlIHRoZSBkZWZhdWx0cyB0byBhbGxvdyBmb3IgdXNlciB1cGRhdGluZy9jaGFuZ2luZ1xuXHRDaGFydC5kZWZhdWx0cyA9IHtcblx0XHRnbG9iYWw6IHtcblx0XHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgdGhlIGNoYXJ0XG5cdFx0XHRhbmltYXRpb246IHRydWUsXG5cblx0XHRcdC8vIE51bWJlciAtIE51bWJlciBvZiBhbmltYXRpb24gc3RlcHNcblx0XHRcdGFuaW1hdGlvblN0ZXBzOiA2MCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3Rcblx0XHRcdGFuaW1hdGlvbkVhc2luZzogXCJlYXNlT3V0UXVhcnRcIixcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIElmIHdlIHNob3VsZCBzaG93IHRoZSBzY2FsZSBhdCBhbGxcblx0XHRcdHNob3dTY2FsZTogdHJ1ZSxcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIElmIHdlIHdhbnQgdG8gb3ZlcnJpZGUgd2l0aCBhIGhhcmQgY29kZWQgc2NhbGVcblx0XHRcdHNjYWxlT3ZlcnJpZGU6IGZhbHNlLFxuXG5cdFx0XHQvLyAqKiBSZXF1aXJlZCBpZiBzY2FsZU92ZXJyaWRlIGlzIHRydWUgKipcblx0XHRcdC8vIE51bWJlciAtIFRoZSBudW1iZXIgb2Ygc3RlcHMgaW4gYSBoYXJkIGNvZGVkIHNjYWxlXG5cdFx0XHRzY2FsZVN0ZXBzOiBudWxsLFxuXHRcdFx0Ly8gTnVtYmVyIC0gVGhlIHZhbHVlIGp1bXAgaW4gdGhlIGhhcmQgY29kZWQgc2NhbGVcblx0XHRcdHNjYWxlU3RlcFdpZHRoOiBudWxsLFxuXHRcdFx0Ly8gTnVtYmVyIC0gVGhlIHNjYWxlIHN0YXJ0aW5nIHZhbHVlXG5cdFx0XHRzY2FsZVN0YXJ0VmFsdWU6IG51bGwsXG5cblx0XHRcdC8vIFN0cmluZyAtIENvbG91ciBvZiB0aGUgc2NhbGUgbGluZVxuXHRcdFx0c2NhbGVMaW5lQ29sb3I6IFwicmdiYSgwLDAsMCwuMSlcIixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgdGhlIHNjYWxlIGxpbmVcblx0XHRcdHNjYWxlTGluZVdpZHRoOiAxLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0byBzaG93IGxhYmVscyBvbiB0aGUgc2NhbGVcblx0XHRcdHNjYWxlU2hvd0xhYmVsczogdHJ1ZSxcblxuXHRcdFx0Ly8gSW50ZXJwb2xhdGVkIEpTIHN0cmluZyAtIGNhbiBhY2Nlc3MgdmFsdWVcblx0XHRcdHNjYWxlTGFiZWw6IFwiPCU9dmFsdWUlPlwiLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0aWNrIHRvIGludGVnZXJzLCBhbmQgbm90IHNob3cgYW55IGZsb2F0cyBldmVuIGlmIGRyYXdpbmcgc3BhY2UgaXMgdGhlcmVcblx0XHRcdHNjYWxlSW50ZWdlcnNPbmx5OiB0cnVlLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuXHRcdFx0c2NhbGVCZWdpbkF0WmVybzogZmFsc2UsXG5cblx0XHRcdC8vIFN0cmluZyAtIFNjYWxlIGxhYmVsIGZvbnQgZGVjbGFyYXRpb24gZm9yIHRoZSBzY2FsZSBsYWJlbFxuXHRcdFx0c2NhbGVGb250RmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG5cblx0XHRcdC8vIE51bWJlciAtIFNjYWxlIGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHNjYWxlRm9udFNpemU6IDEyLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBTY2FsZSBsYWJlbCBmb250IHdlaWdodCBzdHlsZVxuXHRcdFx0c2NhbGVGb250U3R5bGU6IFwibm9ybWFsXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFNjYWxlIGxhYmVsIGZvbnQgY29sb3VyXG5cdFx0XHRzY2FsZUZvbnRDb2xvcjogXCIjNjY2XCIsXG5cblx0XHRcdC8vIEJvb2xlYW4gLSB3aGV0aGVyIG9yIG5vdCB0aGUgY2hhcnQgc2hvdWxkIGJlIHJlc3BvbnNpdmUgYW5kIHJlc2l6ZSB3aGVuIHRoZSBicm93c2VyIGRvZXMuXG5cdFx0XHRyZXNwb25zaXZlOiBmYWxzZSxcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIHdoZXRoZXIgdG8gbWFpbnRhaW4gdGhlIHN0YXJ0aW5nIGFzcGVjdCByYXRpbyBvciBub3Qgd2hlbiByZXNwb25zaXZlLCBpZiBzZXQgdG8gZmFsc2UsIHdpbGwgdGFrZSB1cCBlbnRpcmUgY29udGFpbmVyXG5cdFx0XHRtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRyYXcgdG9vbHRpcHMgb24gdGhlIGNhbnZhcyBvciBub3QgLSBhdHRhY2hlcyBldmVudHMgdG8gdG91Y2htb3ZlICYgbW91c2Vtb3ZlXG5cdFx0XHRzaG93VG9vbHRpcHM6IHRydWUsXG5cblx0XHRcdC8vIEJvb2xlYW4gLSBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZHJhdyBidWlsdC1pbiB0b29sdGlwIG9yIGNhbGwgY3VzdG9tIHRvb2x0aXAgZnVuY3Rpb25cblx0XHRcdGN1c3RvbVRvb2x0aXBzOiBmYWxzZSxcblxuXHRcdFx0Ly8gQXJyYXkgLSBBcnJheSBvZiBzdHJpbmcgbmFtZXMgdG8gYXR0YWNoIHRvb2x0aXAgZXZlbnRzXG5cdFx0XHR0b29sdGlwRXZlbnRzOiBbXCJtb3VzZW1vdmVcIiwgXCJ0b3VjaHN0YXJ0XCIsIFwidG91Y2htb3ZlXCIsIFwibW91c2VvdXRcIl0sXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgYmFja2dyb3VuZCBjb2xvdXJcblx0XHRcdHRvb2x0aXBGaWxsQ29sb3I6IFwicmdiYSgwLDAsMCwwLjgpXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgbGFiZWwgZm9udCBkZWNsYXJhdGlvbiBmb3IgdGhlIHNjYWxlIGxhYmVsXG5cdFx0XHR0b29sdGlwRm9udEZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUb29sdGlwIGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHRvb2x0aXBGb250U2l6ZTogMTQsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgZm9udCB3ZWlnaHQgc3R5bGVcblx0XHRcdHRvb2x0aXBGb250U3R5bGU6IFwibm9ybWFsXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgbGFiZWwgZm9udCBjb2xvdXJcblx0XHRcdHRvb2x0aXBGb250Q29sb3I6IFwiI2ZmZlwiLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBUb29sdGlwIHRpdGxlIGZvbnQgZGVjbGFyYXRpb24gZm9yIHRoZSBzY2FsZSBsYWJlbFxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udEZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUb29sdGlwIHRpdGxlIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHRvb2x0aXBUaXRsZUZvbnRTaXplOiAxNCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVG9vbHRpcCB0aXRsZSBmb250IHdlaWdodCBzdHlsZVxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udFN0eWxlOiBcImJvbGRcIixcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVG9vbHRpcCB0aXRsZSBmb250IGNvbG91clxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udENvbG9yOiBcIiNmZmZcIixcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVG9vbHRpcCB0aXRsZSB0ZW1wbGF0ZVxuXHRcdFx0dG9vbHRpcFRpdGxlVGVtcGxhdGU6IFwiPCU9IGxhYmVsJT5cIixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gcGl4ZWwgd2lkdGggb2YgcGFkZGluZyBhcm91bmQgdG9vbHRpcCB0ZXh0XG5cdFx0XHR0b29sdGlwWVBhZGRpbmc6IDYsXG5cblx0XHRcdC8vIE51bWJlciAtIHBpeGVsIHdpZHRoIG9mIHBhZGRpbmcgYXJvdW5kIHRvb2x0aXAgdGV4dFxuXHRcdFx0dG9vbHRpcFhQYWRkaW5nOiA2LFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBTaXplIG9mIHRoZSBjYXJldCBvbiB0aGUgdG9vbHRpcFxuXHRcdFx0dG9vbHRpcENhcmV0U2l6ZTogOCxcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgcmFkaXVzIG9mIHRoZSB0b29sdGlwIGJvcmRlclxuXHRcdFx0dG9vbHRpcENvcm5lclJhZGl1czogNixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgb2Zmc2V0IGZyb20gcG9pbnQgeCB0byB0b29sdGlwIGVkZ2Vcblx0XHRcdHRvb2x0aXBYT2Zmc2V0OiAxMCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVGVtcGxhdGUgc3RyaW5nIGZvciBzaW5nbGUgdG9vbHRpcHNcblx0XHRcdHRvb2x0aXBUZW1wbGF0ZTogXCI8JWlmIChsYWJlbCl7JT48JT1sYWJlbCU+OiA8JX0lPjwlPSB2YWx1ZSAlPlwiLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBUZW1wbGF0ZSBzdHJpbmcgZm9yIHNpbmdsZSB0b29sdGlwc1xuXHRcdFx0bXVsdGlUb29sdGlwVGVtcGxhdGU6IFwiPCU9IGRhdGFzZXRMYWJlbCAlPjogPCU9IHZhbHVlICU+XCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIENvbG91ciBiZWhpbmQgdGhlIGxlZ2VuZCBjb2xvdXIgYmxvY2tcblx0XHRcdG11bHRpVG9vbHRpcEtleUJhY2tncm91bmQ6ICcjZmZmJyxcblxuXHRcdFx0Ly8gQXJyYXkgLSBBIGxpc3Qgb2YgY29sb3JzIHRvIHVzZSBhcyB0aGUgZGVmYXVsdHNcblx0XHRcdHNlZ21lbnRDb2xvckRlZmF1bHQ6IFtcIiNBNkNFRTNcIiwgXCIjMUY3OEI0XCIsIFwiI0IyREY4QVwiLCBcIiMzM0EwMkNcIiwgXCIjRkI5QTk5XCIsIFwiI0UzMUExQ1wiLCBcIiNGREJGNkZcIiwgXCIjRkY3RjAwXCIsIFwiI0NBQjJENlwiLCBcIiM2QTNEOUFcIiwgXCIjQjRCNDgyXCIsIFwiI0IxNTkyOFwiIF0sXG5cblx0XHRcdC8vIEFycmF5IC0gQSBsaXN0IG9mIGhpZ2hsaWdodCBjb2xvcnMgdG8gdXNlIGFzIHRoZSBkZWZhdWx0c1xuXHRcdFx0c2VnbWVudEhpZ2hsaWdodENvbG9yRGVmYXVsdHM6IFsgXCIjQ0VGNkZGXCIsIFwiIzQ3QTBEQ1wiLCBcIiNEQUZGQjJcIiwgXCIjNUJDODU0XCIsIFwiI0ZGQzJDMVwiLCBcIiNGRjQyNDRcIiwgXCIjRkZFNzk3XCIsIFwiI0ZGQTcyOFwiLCBcIiNGMkRBRkVcIiwgXCIjOTI2NUMyXCIsIFwiI0RDRENBQVwiLCBcIiNEOTgxNTBcIiBdLFxuXG5cdFx0XHQvLyBGdW5jdGlvbiAtIFdpbGwgZmlyZSBvbiBhbmltYXRpb24gcHJvZ3Jlc3Npb24uXG5cdFx0XHRvbkFuaW1hdGlvblByb2dyZXNzOiBmdW5jdGlvbigpe30sXG5cblx0XHRcdC8vIEZ1bmN0aW9uIC0gV2lsbCBmaXJlIG9uIGFuaW1hdGlvbiBjb21wbGV0aW9uLlxuXHRcdFx0b25BbmltYXRpb25Db21wbGV0ZTogZnVuY3Rpb24oKXt9XG5cblx0XHR9XG5cdH07XG5cblx0Ly9DcmVhdGUgYSBkaWN0aW9uYXJ5IG9mIGNoYXJ0IHR5cGVzLCB0byBhbGxvdyBmb3IgZXh0ZW5zaW9uIG9mIGV4aXN0aW5nIHR5cGVzXG5cdENoYXJ0LnR5cGVzID0ge307XG5cblx0Ly9HbG9iYWwgQ2hhcnQgaGVscGVycyBvYmplY3QgZm9yIHV0aWxpdHkgbWV0aG9kcyBhbmQgY2xhc3Nlc1xuXHR2YXIgaGVscGVycyA9IENoYXJ0LmhlbHBlcnMgPSB7fTtcblxuXHRcdC8vLS0gQmFzaWMganMgdXRpbGl0eSBtZXRob2RzXG5cdHZhciBlYWNoID0gaGVscGVycy5lYWNoID0gZnVuY3Rpb24obG9vcGFibGUsY2FsbGJhY2ssc2VsZil7XG5cdFx0XHR2YXIgYWRkaXRpb25hbEFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIG51bGwgb3IgdW5kZWZpbmVkIGZpcnN0bHkuXG5cdFx0XHRpZiAobG9vcGFibGUpe1xuXHRcdFx0XHRpZiAobG9vcGFibGUubGVuZ3RoID09PSArbG9vcGFibGUubGVuZ3RoKXtcblx0XHRcdFx0XHR2YXIgaTtcblx0XHRcdFx0XHRmb3IgKGk9MDsgaTxsb29wYWJsZS5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0XHRjYWxsYmFjay5hcHBseShzZWxmLFtsb29wYWJsZVtpXSwgaV0uY29uY2F0KGFkZGl0aW9uYWxBcmdzKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaXRlbSBpbiBsb29wYWJsZSl7XG5cdFx0XHRcdFx0XHRjYWxsYmFjay5hcHBseShzZWxmLFtsb29wYWJsZVtpdGVtXSxpdGVtXS5jb25jYXQoYWRkaXRpb25hbEFyZ3MpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNsb25lID0gaGVscGVycy5jbG9uZSA9IGZ1bmN0aW9uKG9iail7XG5cdFx0XHR2YXIgb2JqQ2xvbmUgPSB7fTtcblx0XHRcdGVhY2gob2JqLGZ1bmN0aW9uKHZhbHVlLGtleSl7XG5cdFx0XHRcdGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSl7XG5cdFx0XHRcdFx0b2JqQ2xvbmVba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBvYmpDbG9uZTtcblx0XHR9LFxuXHRcdGV4dGVuZCA9IGhlbHBlcnMuZXh0ZW5kID0gZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHRlYWNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSwgZnVuY3Rpb24oZXh0ZW5zaW9uT2JqZWN0KSB7XG5cdFx0XHRcdGVhY2goZXh0ZW5zaW9uT2JqZWN0LGZ1bmN0aW9uKHZhbHVlLGtleSl7XG5cdFx0XHRcdFx0aWYgKGV4dGVuc2lvbk9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcblx0XHRcdFx0XHRcdGJhc2Vba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBiYXNlO1xuXHRcdH0sXG5cdFx0bWVyZ2UgPSBoZWxwZXJzLm1lcmdlID0gZnVuY3Rpb24oYmFzZSxtYXN0ZXIpe1xuXHRcdFx0Ly9NZXJnZSBwcm9wZXJ0aWVzIGluIGxlZnQgb2JqZWN0IG92ZXIgdG8gYSBzaGFsbG93IGNsb25lIG9mIG9iamVjdCByaWdodC5cblx0XHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO1xuXHRcdFx0YXJncy51bnNoaWZ0KHt9KTtcblx0XHRcdHJldHVybiBleHRlbmQuYXBwbHkobnVsbCwgYXJncyk7XG5cdFx0fSxcblx0XHRpbmRleE9mID0gaGVscGVycy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXlUb1NlYXJjaCwgaXRlbSl7XG5cdFx0XHRpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcblx0XHRcdFx0cmV0dXJuIGFycmF5VG9TZWFyY2guaW5kZXhPZihpdGVtKTtcblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlUb1NlYXJjaC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChhcnJheVRvU2VhcmNoW2ldID09PSBpdGVtKSByZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR3aGVyZSA9IGhlbHBlcnMud2hlcmUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBmaWx0ZXJDYWxsYmFjayl7XG5cdFx0XHR2YXIgZmlsdGVyZWQgPSBbXTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soaXRlbSkpe1xuXHRcdFx0XHRcdGZpbHRlcmVkLnB1c2goaXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gZmlsdGVyZWQ7XG5cdFx0fSxcblx0XHRmaW5kTmV4dFdoZXJlID0gaGVscGVycy5maW5kTmV4dFdoZXJlID0gZnVuY3Rpb24oYXJyYXlUb1NlYXJjaCwgZmlsdGVyQ2FsbGJhY2ssIHN0YXJ0SW5kZXgpe1xuXHRcdFx0Ly8gRGVmYXVsdCB0byBzdGFydCBvZiB0aGUgYXJyYXlcblx0XHRcdGlmICghc3RhcnRJbmRleCl7XG5cdFx0XHRcdHN0YXJ0SW5kZXggPSAtMTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IGFycmF5VG9TZWFyY2gubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRJdGVtID0gYXJyYXlUb1NlYXJjaFtpXTtcblx0XHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSl7XG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRJdGVtO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRmaW5kUHJldmlvdXNXaGVyZSA9IGhlbHBlcnMuZmluZFByZXZpb3VzV2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCl7XG5cdFx0XHQvLyBEZWZhdWx0IHRvIGVuZCBvZiB0aGUgYXJyYXlcblx0XHRcdGlmICghc3RhcnRJbmRleCl7XG5cdFx0XHRcdHN0YXJ0SW5kZXggPSBhcnJheVRvU2VhcmNoLmxlbmd0aDtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRJdGVtID0gYXJyYXlUb1NlYXJjaFtpXTtcblx0XHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSl7XG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRJdGVtO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRpbmhlcml0cyA9IGhlbHBlcnMuaW5oZXJpdHMgPSBmdW5jdGlvbihleHRlbnNpb25zKXtcblx0XHRcdC8vQmFzaWMgamF2YXNjcmlwdCBpbmhlcml0YW5jZSBiYXNlZCBvbiB0aGUgbW9kZWwgY3JlYXRlZCBpbiBCYWNrYm9uZS5qc1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXM7XG5cdFx0XHR2YXIgQ2hhcnRFbGVtZW50ID0gKGV4dGVuc2lvbnMgJiYgZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShcImNvbnN0cnVjdG9yXCIpKSA/IGV4dGVuc2lvbnMuY29uc3RydWN0b3IgOiBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG5cblx0XHRcdHZhciBTdXJyb2dhdGUgPSBmdW5jdGlvbigpeyB0aGlzLmNvbnN0cnVjdG9yID0gQ2hhcnRFbGVtZW50O307XG5cdFx0XHRTdXJyb2dhdGUucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcblx0XHRcdENoYXJ0RWxlbWVudC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlKCk7XG5cblx0XHRcdENoYXJ0RWxlbWVudC5leHRlbmQgPSBpbmhlcml0cztcblxuXHRcdFx0aWYgKGV4dGVuc2lvbnMpIGV4dGVuZChDaGFydEVsZW1lbnQucHJvdG90eXBlLCBleHRlbnNpb25zKTtcblxuXHRcdFx0Q2hhcnRFbGVtZW50Ll9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7XG5cblx0XHRcdHJldHVybiBDaGFydEVsZW1lbnQ7XG5cdFx0fSxcblx0XHRub29wID0gaGVscGVycy5ub29wID0gZnVuY3Rpb24oKXt9LFxuXHRcdHVpZCA9IGhlbHBlcnMudWlkID0gKGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgaWQ9MDtcblx0XHRcdHJldHVybiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4gXCJjaGFydC1cIiArIGlkKys7XG5cdFx0XHR9O1xuXHRcdH0pKCksXG5cdFx0d2FybiA9IGhlbHBlcnMud2FybiA9IGZ1bmN0aW9uKHN0cil7XG5cdFx0XHQvL01ldGhvZCBmb3Igd2FybmluZyBvZiBlcnJvcnNcblx0XHRcdGlmICh3aW5kb3cuY29uc29sZSAmJiB0eXBlb2Ygd2luZG93LmNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiKSBjb25zb2xlLndhcm4oc3RyKTtcblx0XHR9LFxuXHRcdGFtZCA9IGhlbHBlcnMuYW1kID0gKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCksXG5cdFx0Ly8tLSBNYXRoIG1ldGhvZHNcblx0XHRpc051bWJlciA9IGhlbHBlcnMuaXNOdW1iZXIgPSBmdW5jdGlvbihuKXtcblx0XHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG5cdFx0fSxcblx0XHRtYXggPSBoZWxwZXJzLm1heCA9IGZ1bmN0aW9uKGFycmF5KXtcblx0XHRcdHJldHVybiBNYXRoLm1heC5hcHBseSggTWF0aCwgYXJyYXkgKTtcblx0XHR9LFxuXHRcdG1pbiA9IGhlbHBlcnMubWluID0gZnVuY3Rpb24oYXJyYXkpe1xuXHRcdFx0cmV0dXJuIE1hdGgubWluLmFwcGx5KCBNYXRoLCBhcnJheSApO1xuXHRcdH0sXG5cdFx0Y2FwID0gaGVscGVycy5jYXAgPSBmdW5jdGlvbih2YWx1ZVRvQ2FwLG1heFZhbHVlLG1pblZhbHVlKXtcblx0XHRcdGlmKGlzTnVtYmVyKG1heFZhbHVlKSkge1xuXHRcdFx0XHRpZiggdmFsdWVUb0NhcCA+IG1heFZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXhWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpc051bWJlcihtaW5WYWx1ZSkpe1xuXHRcdFx0XHRpZiAoIHZhbHVlVG9DYXAgPCBtaW5WYWx1ZSApe1xuXHRcdFx0XHRcdHJldHVybiBtaW5WYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlVG9DYXA7XG5cdFx0fSxcblx0XHRnZXREZWNpbWFsUGxhY2VzID0gaGVscGVycy5nZXREZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24obnVtKXtcblx0XHRcdGlmIChudW0lMSE9PTAgJiYgaXNOdW1iZXIobnVtKSl7XG5cdFx0XHRcdHZhciBzID0gbnVtLnRvU3RyaW5nKCk7XG5cdFx0XHRcdGlmKHMuaW5kZXhPZihcImUtXCIpIDwgMCl7XG5cdFx0XHRcdFx0Ly8gbm8gZXhwb25lbnQsIGUuZy4gMC4wMVxuXHRcdFx0XHRcdHJldHVybiBzLnNwbGl0KFwiLlwiKVsxXS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihzLmluZGV4T2YoXCIuXCIpIDwgMCkge1xuXHRcdFx0XHRcdC8vIG5vIGRlY2ltYWwgcG9pbnQsIGUuZy4gMWUtOVxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludChzLnNwbGl0KFwiZS1cIilbMV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdC8vIGV4cG9uZW50IGFuZCBkZWNpbWFsIHBvaW50LCBlLmcuIDEuMjNlLTlcblx0XHRcdFx0XHR2YXIgcGFydHMgPSBzLnNwbGl0KFwiLlwiKVsxXS5zcGxpdChcImUtXCIpO1xuXHRcdFx0XHRcdHJldHVybiBwYXJ0c1swXS5sZW5ndGggKyBwYXJzZUludChwYXJ0c1sxXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRvUmFkaWFucyA9IGhlbHBlcnMucmFkaWFucyA9IGZ1bmN0aW9uKGRlZ3JlZXMpe1xuXHRcdFx0cmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSS8xODApO1xuXHRcdH0sXG5cdFx0Ly8gR2V0cyB0aGUgYW5nbGUgZnJvbSB2ZXJ0aWNhbCB1cHJpZ2h0IHRvIHRoZSBwb2ludCBhYm91dCBhIGNlbnRyZS5cblx0XHRnZXRBbmdsZUZyb21Qb2ludCA9IGhlbHBlcnMuZ2V0QW5nbGVGcm9tUG9pbnQgPSBmdW5jdGlvbihjZW50cmVQb2ludCwgYW5nbGVQb2ludCl7XG5cdFx0XHR2YXIgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50LngsXG5cdFx0XHRcdGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55LFxuXHRcdFx0XHRyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoIGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuXG5cblx0XHRcdHZhciBhbmdsZSA9IE1hdGguUEkgKiAyICsgTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcblxuXHRcdFx0Ly9JZiB0aGUgc2VnbWVudCBpcyBpbiB0aGUgdG9wIGxlZnQgcXVhZHJhbnQsIHdlIG5lZWQgdG8gYWRkIGFub3RoZXIgcm90YXRpb24gdG8gdGhlIGFuZ2xlXG5cdFx0XHRpZiAoZGlzdGFuY2VGcm9tWENlbnRlciA8IDAgJiYgZGlzdGFuY2VGcm9tWUNlbnRlciA8IDApe1xuXHRcdFx0XHRhbmdsZSArPSBNYXRoLlBJKjI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFuZ2xlOiBhbmdsZSxcblx0XHRcdFx0ZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGFsaWFzUGl4ZWwgPSBoZWxwZXJzLmFsaWFzUGl4ZWwgPSBmdW5jdGlvbihwaXhlbFdpZHRoKXtcblx0XHRcdHJldHVybiAocGl4ZWxXaWR0aCAlIDIgPT09IDApID8gMCA6IDAuNTtcblx0XHR9LFxuXHRcdHNwbGluZUN1cnZlID0gaGVscGVycy5zcGxpbmVDdXJ2ZSA9IGZ1bmN0aW9uKEZpcnN0UG9pbnQsTWlkZGxlUG9pbnQsQWZ0ZXJQb2ludCx0KXtcblx0XHRcdC8vUHJvcHMgdG8gUm9iIFNwZW5jZXIgYXQgc2NhbGVkIGlubm92YXRpb24gZm9yIGhpcyBwb3N0IG9uIHNwbGluaW5nIGJldHdlZW4gcG9pbnRzXG5cdFx0XHQvL2h0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuXHRcdFx0dmFyIGQwMT1NYXRoLnNxcnQoTWF0aC5wb3coTWlkZGxlUG9pbnQueC1GaXJzdFBvaW50LngsMikrTWF0aC5wb3coTWlkZGxlUG9pbnQueS1GaXJzdFBvaW50LnksMikpLFxuXHRcdFx0XHRkMTI9TWF0aC5zcXJ0KE1hdGgucG93KEFmdGVyUG9pbnQueC1NaWRkbGVQb2ludC54LDIpK01hdGgucG93KEFmdGVyUG9pbnQueS1NaWRkbGVQb2ludC55LDIpKSxcblx0XHRcdFx0ZmE9dCpkMDEvKGQwMStkMTIpLC8vIHNjYWxpbmcgZmFjdG9yIGZvciB0cmlhbmdsZSBUYVxuXHRcdFx0XHRmYj10KmQxMi8oZDAxK2QxMik7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpbm5lciA6IHtcblx0XHRcdFx0XHR4IDogTWlkZGxlUG9pbnQueC1mYSooQWZ0ZXJQb2ludC54LUZpcnN0UG9pbnQueCksXG5cdFx0XHRcdFx0eSA6IE1pZGRsZVBvaW50LnktZmEqKEFmdGVyUG9pbnQueS1GaXJzdFBvaW50LnkpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG91dGVyIDoge1xuXHRcdFx0XHRcdHg6IE1pZGRsZVBvaW50LngrZmIqKEFmdGVyUG9pbnQueC1GaXJzdFBvaW50LngpLFxuXHRcdFx0XHRcdHkgOiBNaWRkbGVQb2ludC55K2ZiKihBZnRlclBvaW50LnktRmlyc3RQb2ludC55KVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlT3JkZXJPZk1hZ25pdHVkZSA9IGhlbHBlcnMuY2FsY3VsYXRlT3JkZXJPZk1hZ25pdHVkZSA9IGZ1bmN0aW9uKHZhbCl7XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjEwKTtcblx0XHR9LFxuXHRcdGNhbGN1bGF0ZVNjYWxlUmFuZ2UgPSBoZWxwZXJzLmNhbGN1bGF0ZVNjYWxlUmFuZ2UgPSBmdW5jdGlvbih2YWx1ZXNBcnJheSwgZHJhd2luZ1NpemUsIHRleHRTaXplLCBzdGFydEZyb21aZXJvLCBpbnRlZ2Vyc09ubHkpe1xuXG5cdFx0XHQvL1NldCBhIG1pbmltdW0gc3RlcCBvZiB0d28gLSBhIHBvaW50IGF0IHRoZSB0b3Agb2YgdGhlIGdyYXBoLCBhbmQgYSBwb2ludCBhdCB0aGUgYmFzZVxuXHRcdFx0dmFyIG1pblN0ZXBzID0gMixcblx0XHRcdFx0bWF4U3RlcHMgPSBNYXRoLmZsb29yKGRyYXdpbmdTaXplLyh0ZXh0U2l6ZSAqIDEuNSkpLFxuXHRcdFx0XHRza2lwRml0dGluZyA9IChtaW5TdGVwcyA+PSBtYXhTdGVwcyk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgbnVsbCB2YWx1ZXMgc2luY2UgdGhlc2Ugd291bGQgbWluKCkgdG8gemVyb1xuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0ZWFjaCh2YWx1ZXNBcnJheSwgZnVuY3Rpb24oIHYgKXtcblx0XHRcdFx0diA9PSBudWxsIHx8IHZhbHVlcy5wdXNoKCB2ICk7XG5cdFx0XHR9KTtcblx0XHRcdHZhciBtaW5WYWx1ZSA9IG1pbih2YWx1ZXMpLFxuXHRcdFx0ICAgIG1heFZhbHVlID0gbWF4KHZhbHVlcyk7XG5cblx0XHRcdC8vIFdlIG5lZWQgc29tZSBkZWdyZWUgb2Ygc2VwYXJhdGlvbiBoZXJlIHRvIGNhbGN1bGF0ZSB0aGUgc2NhbGVzIGlmIGFsbCB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZVxuXHRcdFx0Ly8gQWRkaW5nL21pbnVzaW5nIDAuNSB3aWxsIGdpdmUgdXMgYSByYW5nZSBvZiAxLlxuXHRcdFx0aWYgKG1heFZhbHVlID09PSBtaW5WYWx1ZSl7XG5cdFx0XHRcdG1heFZhbHVlICs9IDAuNTtcblx0XHRcdFx0Ly8gU28gd2UgZG9uJ3QgZW5kIHVwIHdpdGggYSBncmFwaCB3aXRoIGEgbmVnYXRpdmUgc3RhcnQgdmFsdWUgaWYgd2UndmUgc2FpZCBhbHdheXMgc3RhcnQgZnJvbSB6ZXJvXG5cdFx0XHRcdGlmIChtaW5WYWx1ZSA+PSAwLjUgJiYgIXN0YXJ0RnJvbVplcm8pe1xuXHRcdFx0XHRcdG1pblZhbHVlIC09IDAuNTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdC8vIE1ha2UgdXAgYSB3aG9sZSBudW1iZXIgYWJvdmUgdGhlIHZhbHVlc1xuXHRcdFx0XHRcdG1heFZhbHVlICs9IDAuNTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXJcdHZhbHVlUmFuZ2UgPSBNYXRoLmFicyhtYXhWYWx1ZSAtIG1pblZhbHVlKSxcblx0XHRcdFx0cmFuZ2VPcmRlck9mTWFnbml0dWRlID0gY2FsY3VsYXRlT3JkZXJPZk1hZ25pdHVkZSh2YWx1ZVJhbmdlKSxcblx0XHRcdFx0Z3JhcGhNYXggPSBNYXRoLmNlaWwobWF4VmFsdWUgLyAoMSAqIE1hdGgucG93KDEwLCByYW5nZU9yZGVyT2ZNYWduaXR1ZGUpKSkgKiBNYXRoLnBvdygxMCwgcmFuZ2VPcmRlck9mTWFnbml0dWRlKSxcblx0XHRcdFx0Z3JhcGhNaW4gPSAoc3RhcnRGcm9tWmVybykgPyAwIDogTWF0aC5mbG9vcihtaW5WYWx1ZSAvICgxICogTWF0aC5wb3coMTAsIHJhbmdlT3JkZXJPZk1hZ25pdHVkZSkpKSAqIE1hdGgucG93KDEwLCByYW5nZU9yZGVyT2ZNYWduaXR1ZGUpLFxuXHRcdFx0XHRncmFwaFJhbmdlID0gZ3JhcGhNYXggLSBncmFwaE1pbixcblx0XHRcdFx0c3RlcFZhbHVlID0gTWF0aC5wb3coMTAsIHJhbmdlT3JkZXJPZk1hZ25pdHVkZSksXG5cdFx0XHRcdG51bWJlck9mU3RlcHMgPSBNYXRoLnJvdW5kKGdyYXBoUmFuZ2UgLyBzdGVwVmFsdWUpO1xuXG5cdFx0XHQvL0lmIHdlIGhhdmUgbW9yZSBzcGFjZSBvbiB0aGUgZ3JhcGggd2UnbGwgdXNlIGl0IHRvIGdpdmUgbW9yZSBkZWZpbml0aW9uIHRvIHRoZSBkYXRhXG5cdFx0XHR3aGlsZSgobnVtYmVyT2ZTdGVwcyA+IG1heFN0ZXBzIHx8IChudW1iZXJPZlN0ZXBzICogMikgPCBtYXhTdGVwcykgJiYgIXNraXBGaXR0aW5nKSB7XG5cdFx0XHRcdGlmKG51bWJlck9mU3RlcHMgPiBtYXhTdGVwcyl7XG5cdFx0XHRcdFx0c3RlcFZhbHVlICo9Mjtcblx0XHRcdFx0XHRudW1iZXJPZlN0ZXBzID0gTWF0aC5yb3VuZChncmFwaFJhbmdlL3N0ZXBWYWx1ZSk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3QgZXZlciBkZWFsIHdpdGggYSBkZWNpbWFsIG51bWJlciBvZiBzdGVwcyAtIGNhbmNlbCBmaXR0aW5nIGFuZCBqdXN0IHVzZSB0aGUgbWluaW11bSBudW1iZXIgb2Ygc3RlcHMuXG5cdFx0XHRcdFx0aWYgKG51bWJlck9mU3RlcHMgJSAxICE9PSAwKXtcblx0XHRcdFx0XHRcdHNraXBGaXR0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9XZSBjYW4gZml0IGluIGRvdWJsZSB0aGUgYW1vdW50IG9mIHNjYWxlIHBvaW50cyBvbiB0aGUgc2NhbGVcblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHQvL0lmIHVzZXIgaGFzIGRlY2xhcmVkIGludHMgb25seSwgYW5kIHRoZSBzdGVwIHZhbHVlIGlzbid0IGEgZGVjaW1hbFxuXHRcdFx0XHRcdGlmIChpbnRlZ2Vyc09ubHkgJiYgcmFuZ2VPcmRlck9mTWFnbml0dWRlID49IDApe1xuXHRcdFx0XHRcdFx0Ly9JZiB0aGUgdXNlciBoYXMgc2FpZCBpbnRlZ2VycyBvbmx5LCB3ZSBuZWVkIHRvIGNoZWNrIHRoYXQgbWFraW5nIHRoZSBzY2FsZSBtb3JlIGdyYW51bGFyIHdvdWxkbid0IG1ha2UgaXQgYSBmbG9hdFxuXHRcdFx0XHRcdFx0aWYoc3RlcFZhbHVlLzIgJSAxID09PSAwKXtcblx0XHRcdFx0XHRcdFx0c3RlcFZhbHVlIC89Mjtcblx0XHRcdFx0XHRcdFx0bnVtYmVyT2ZTdGVwcyA9IE1hdGgucm91bmQoZ3JhcGhSYW5nZS9zdGVwVmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly9JZiBpdCB3b3VsZCBtYWtlIGl0IGEgZmxvYXQgYnJlYWsgb3V0IG9mIHRoZSBsb29wXG5cdFx0XHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9JZiB0aGUgc2NhbGUgZG9lc24ndCBoYXZlIHRvIGJlIGFuIGludCwgbWFrZSB0aGUgc2NhbGUgbW9yZSBncmFudWxhciBhbnl3YXkuXG5cdFx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRcdHN0ZXBWYWx1ZSAvPTI7XG5cdFx0XHRcdFx0XHRudW1iZXJPZlN0ZXBzID0gTWF0aC5yb3VuZChncmFwaFJhbmdlL3N0ZXBWYWx1ZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNraXBGaXR0aW5nKXtcblx0XHRcdFx0bnVtYmVyT2ZTdGVwcyA9IG1pblN0ZXBzO1xuXHRcdFx0XHRzdGVwVmFsdWUgPSBncmFwaFJhbmdlIC8gbnVtYmVyT2ZTdGVwcztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3RlcHMgOiBudW1iZXJPZlN0ZXBzLFxuXHRcdFx0XHRzdGVwVmFsdWUgOiBzdGVwVmFsdWUsXG5cdFx0XHRcdG1pbiA6IGdyYXBoTWluLFxuXHRcdFx0XHRtYXhcdDogZ3JhcGhNaW4gKyAobnVtYmVyT2ZTdGVwcyAqIHN0ZXBWYWx1ZSlcblx0XHRcdH07XG5cblx0XHR9LFxuXHRcdC8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cblx0XHQvLyBCbG93cyB1cCBqc2hpbnQgZXJyb3JzIGJhc2VkIG9uIHRoZSBuZXcgRnVuY3Rpb24gY29uc3RydWN0b3Jcblx0XHQvL1RlbXBsYXRpbmcgbWV0aG9kc1xuXHRcdC8vSmF2YXNjcmlwdCBtaWNybyB0ZW1wbGF0aW5nIGJ5IEpvaG4gUmVzaWcgLSBzb3VyY2UgYXQgaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy9cblx0XHR0ZW1wbGF0ZSA9IGhlbHBlcnMudGVtcGxhdGUgPSBmdW5jdGlvbih0ZW1wbGF0ZVN0cmluZywgdmFsdWVzT2JqZWN0KXtcblxuXHRcdFx0Ly8gSWYgdGVtcGxhdGVTdHJpbmcgaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gc3RyaW5nLXRlbXBsYXRlIC0gY2FsbCB0aGUgZnVuY3Rpb24gZm9yIHZhbHVlc09iamVjdFxuXG5cdFx0XHRpZih0ZW1wbGF0ZVN0cmluZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKXtcblx0XHRcdCBcdHJldHVybiB0ZW1wbGF0ZVN0cmluZyh2YWx1ZXNPYmplY3QpO1xuXHRcdCBcdH1cblxuXHRcdFx0dmFyIGNhY2hlID0ge307XG5cdFx0XHRmdW5jdGlvbiB0bXBsKHN0ciwgZGF0YSl7XG5cdFx0XHRcdC8vIEZpZ3VyZSBvdXQgaWYgd2UncmUgZ2V0dGluZyBhIHRlbXBsYXRlLCBvciBpZiB3ZSBuZWVkIHRvXG5cdFx0XHRcdC8vIGxvYWQgdGhlIHRlbXBsYXRlIC0gYW5kIGJlIHN1cmUgdG8gY2FjaGUgdGhlIHJlc3VsdC5cblx0XHRcdFx0dmFyIGZuID0gIS9cXFcvLnRlc3Qoc3RyKSA/XG5cdFx0XHRcdGNhY2hlW3N0cl0gPSBjYWNoZVtzdHJdIDpcblxuXHRcdFx0XHQvLyBHZW5lcmF0ZSBhIHJldXNhYmxlIGZ1bmN0aW9uIHRoYXQgd2lsbCBzZXJ2ZSBhcyBhIHRlbXBsYXRlXG5cdFx0XHRcdC8vIGdlbmVyYXRvciAoYW5kIHdoaWNoIHdpbGwgYmUgY2FjaGVkKS5cblx0XHRcdFx0bmV3IEZ1bmN0aW9uKFwib2JqXCIsXG5cdFx0XHRcdFx0XCJ2YXIgcD1bXSxwcmludD1mdW5jdGlvbigpe3AucHVzaC5hcHBseShwLGFyZ3VtZW50cyk7fTtcIiArXG5cblx0XHRcdFx0XHQvLyBJbnRyb2R1Y2UgdGhlIGRhdGEgYXMgbG9jYWwgdmFyaWFibGVzIHVzaW5nIHdpdGgoKXt9XG5cdFx0XHRcdFx0XCJ3aXRoKG9iail7cC5wdXNoKCdcIiArXG5cblx0XHRcdFx0XHQvLyBDb252ZXJ0IHRoZSB0ZW1wbGF0ZSBpbnRvIHB1cmUgSmF2YVNjcmlwdFxuXHRcdFx0XHRcdHN0clxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csIFwiIFwiKVxuXHRcdFx0XHRcdFx0LnNwbGl0KFwiPCVcIikuam9pbihcIlxcdFwiKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoLygoXnwlPilbXlxcdF0qKScvZywgXCIkMVxcclwiKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xcdD0oLio/KSU+L2csIFwiJywkMSwnXCIpXG5cdFx0XHRcdFx0XHQuc3BsaXQoXCJcXHRcIikuam9pbihcIicpO1wiKVxuXHRcdFx0XHRcdFx0LnNwbGl0KFwiJT5cIikuam9pbihcInAucHVzaCgnXCIpXG5cdFx0XHRcdFx0XHQuc3BsaXQoXCJcXHJcIikuam9pbihcIlxcXFwnXCIpICtcblx0XHRcdFx0XHRcIicpO31yZXR1cm4gcC5qb2luKCcnKTtcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFByb3ZpZGUgc29tZSBiYXNpYyBjdXJyeWluZyB0byB0aGUgdXNlclxuXHRcdFx0XHRyZXR1cm4gZGF0YSA/IGZuKCBkYXRhICkgOiBmbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0bXBsKHRlbXBsYXRlU3RyaW5nLHZhbHVlc09iamVjdCk7XG5cdFx0fSxcblx0XHQvKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuXHRcdGdlbmVyYXRlTGFiZWxzID0gaGVscGVycy5nZW5lcmF0ZUxhYmVscyA9IGZ1bmN0aW9uKHRlbXBsYXRlU3RyaW5nLG51bWJlck9mU3RlcHMsZ3JhcGhNaW4sc3RlcFZhbHVlKXtcblx0XHRcdHZhciBsYWJlbHNBcnJheSA9IG5ldyBBcnJheShudW1iZXJPZlN0ZXBzKTtcblx0XHRcdGlmICh0ZW1wbGF0ZVN0cmluZyl7XG5cdFx0XHRcdGVhY2gobGFiZWxzQXJyYXksZnVuY3Rpb24odmFsLGluZGV4KXtcblx0XHRcdFx0XHRsYWJlbHNBcnJheVtpbmRleF0gPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVN0cmluZyx7dmFsdWU6IChncmFwaE1pbiArIChzdGVwVmFsdWUqKGluZGV4KzEpKSl9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbGFiZWxzQXJyYXk7XG5cdFx0fSxcblx0XHQvLy0tQW5pbWF0aW9uIG1ldGhvZHNcblx0XHQvL0Vhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zXG5cdFx0Ly9odHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuXHRcdGVhc2luZ0VmZmVjdHMgPSBoZWxwZXJzLmVhc2luZ0VmZmVjdHMgPSB7XG5cdFx0XHRsaW5lYXI6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdDtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIC0xICogdCAqICh0IC0gMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA8IDEpe1xuXHRcdFx0XHRcdHJldHVybiAxIC8gMiAqIHQgKiB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAtMSAvIDIgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluQ3ViaWM6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdCAqIHQ7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZU91dEN1YmljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gMSAqICgodCA9IHQgLyAxIC0gMSkgKiB0ICogdCArIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLyAyICogdCAqIHQgKiB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAxIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluUXVhcnQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdCAqIHQgKiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRRdWFydDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIC0xICogKCh0ID0gdCAvIDEgLSAxKSAqIHQgKiB0ICogdCAtIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLyAyICogdCAqIHQgKiB0ICogdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gLTEgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluUXVpbnQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAxICogKHQgLz0gMSkgKiB0ICogdCAqIHQgKiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRRdWludDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLyAyICogdCAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIDEgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJblNpbmU6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAtMSAqIE1hdGguY29zKHQgLyAxICogKE1hdGguUEkgLyAyKSkgKyAxO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRTaW5lOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gMSAqIE1hdGguc2luKHQgLyAxICogKE1hdGguUEkgLyAyKSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluT3V0U2luZTogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIC0xIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogdCAvIDEpIC0gMSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluRXhwbzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuICh0ID09PSAwKSA/IDEgOiAxICogTWF0aC5wb3coMiwgMTAgKiAodCAvIDEgLSAxKSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZU91dEV4cG86IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAodCA9PT0gMSkgPyAxIDogMSAqICgtTWF0aC5wb3coMiwgLTEwICogdCAvIDEpICsgMSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluT3V0RXhwbzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKHQgPT09IDApe1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0ID09PSAxKXtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLyAyICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gMSAvIDIgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5DaXJjOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAodCA+PSAxKXtcblx0XHRcdFx0XHRyZXR1cm4gdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gLTEgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSAxKSAqIHQpIC0gMSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZU91dENpcmM6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAxICogTWF0aC5zcXJ0KDEgLSAodCA9IHQgLyAxIC0gMSkgKiB0KTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIC0xIC8gMiAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAxIC8gMiAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5FbGFzdGljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdHZhciBwID0gMDtcblx0XHRcdFx0dmFyIGEgPSAxO1xuXHRcdFx0XHRpZiAodCA9PT0gMCl7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCh0IC89IDEpID09IDEpe1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghcCl7XG5cdFx0XHRcdFx0cCA9IDEgKiAwLjM7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGEgPCBNYXRoLmFicygxKSkge1xuXHRcdFx0XHRcdGEgPSAxO1xuXHRcdFx0XHRcdHMgPSBwIC8gNDtcblx0XHRcdFx0fSBlbHNle1xuXHRcdFx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIC0oYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiAxIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdHZhciBwID0gMDtcblx0XHRcdFx0dmFyIGEgPSAxO1xuXHRcdFx0XHRpZiAodCA9PT0gMCl7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCh0IC89IDEpID09IDEpe1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghcCl7XG5cdFx0XHRcdFx0cCA9IDEgKiAwLjM7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGEgPCBNYXRoLmFicygxKSkge1xuXHRcdFx0XHRcdGEgPSAxO1xuXHRcdFx0XHRcdHMgPSBwIC8gNDtcblx0XHRcdFx0fSBlbHNle1xuXHRcdFx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0ICogMSAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgMTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5PdXRFbGFzdGljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdHZhciBwID0gMDtcblx0XHRcdFx0dmFyIGEgPSAxO1xuXHRcdFx0XHRpZiAodCA9PT0gMCl7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA9PSAyKXtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXApe1xuXHRcdFx0XHRcdHAgPSAxICogKDAuMyAqIDEuNSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGEgPCBNYXRoLmFicygxKSkge1xuXHRcdFx0XHRcdGEgPSAxO1xuXHRcdFx0XHRcdHMgPSBwIC8gNDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0IDwgMSl7XG5cdFx0XHRcdFx0cmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiAxIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO31cblx0XHRcdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIDEgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSAqIDAuNSArIDE7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluQmFjazogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdFx0XHRyZXR1cm4gMSAqICh0IC89IDEpICogdCAqICgocyArIDEpICogdCAtIHMpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRCYWNrOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdHJldHVybiAxICogKCh0ID0gdCAvIDEgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dEJhY2s6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA8IDEpe1xuXHRcdFx0XHRcdHJldHVybiAxIC8gMiAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIDEgLyAyICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbkJvdW5jZTogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgLSBlYXNpbmdFZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRCb3VuY2U6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGlmICgodCAvPSAxKSA8ICgxIC8gMi43NSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gMSAqICg3LjU2MjUgKiB0ICogdCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodCA8ICgyIC8gMi43NSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gMSAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIDAuNzUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQgPCAoMi41IC8gMi43NSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gMSAqICg3LjU2MjUgKiAodCAtPSAoMi4yNSAvIDIuNzUpKSAqIHQgKyAwLjkzNzUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiAxICogKDcuNTYyNSAqICh0IC09ICgyLjYyNSAvIDIuNzUpKSAqIHQgKyAwLjk4NDM3NSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5PdXRCb3VuY2U6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGlmICh0IDwgMSAvIDIpe1xuXHRcdFx0XHRcdHJldHVybiBlYXNpbmdFZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGVhc2luZ0VmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMSAqIDAuNTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGwgLSBodHRwOi8vd3d3LnBhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cblx0XHRyZXF1ZXN0QW5pbUZyYW1lID0gaGVscGVycy5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0XHR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHRcdFx0XHR9O1xuXHRcdH0pKCksXG5cdFx0Y2FuY2VsQW5pbUZyYW1lID0gaGVscGVycy5jYW5jZWxBbmltRnJhbWUgPSAoZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0XHR3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG5cdFx0XHRcdH07XG5cdFx0fSkoKSxcblx0XHRhbmltYXRpb25Mb29wID0gaGVscGVycy5hbmltYXRpb25Mb29wID0gZnVuY3Rpb24oY2FsbGJhY2ssdG90YWxTdGVwcyxlYXNpbmdTdHJpbmcsb25Qcm9ncmVzcyxvbkNvbXBsZXRlLGNoYXJ0SW5zdGFuY2Upe1xuXG5cdFx0XHR2YXIgY3VycmVudFN0ZXAgPSAwLFxuXHRcdFx0XHRlYXNpbmdGdW5jdGlvbiA9IGVhc2luZ0VmZmVjdHNbZWFzaW5nU3RyaW5nXSB8fCBlYXNpbmdFZmZlY3RzLmxpbmVhcjtcblxuXHRcdFx0dmFyIGFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0Y3VycmVudFN0ZXArKztcblx0XHRcdFx0dmFyIHN0ZXBEZWNpbWFsID0gY3VycmVudFN0ZXAvdG90YWxTdGVwcztcblx0XHRcdFx0dmFyIGVhc2VEZWNpbWFsID0gZWFzaW5nRnVuY3Rpb24oc3RlcERlY2ltYWwpO1xuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoY2hhcnRJbnN0YW5jZSxlYXNlRGVjaW1hbCxzdGVwRGVjaW1hbCwgY3VycmVudFN0ZXApO1xuXHRcdFx0XHRvblByb2dyZXNzLmNhbGwoY2hhcnRJbnN0YW5jZSxlYXNlRGVjaW1hbCxzdGVwRGVjaW1hbCk7XG5cdFx0XHRcdGlmIChjdXJyZW50U3RlcCA8IHRvdGFsU3RlcHMpe1xuXHRcdFx0XHRcdGNoYXJ0SW5zdGFuY2UuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbUZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcblx0XHRcdFx0fSBlbHNle1xuXHRcdFx0XHRcdG9uQ29tcGxldGUuYXBwbHkoY2hhcnRJbnN0YW5jZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0QW5pbUZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcblx0XHR9LFxuXHRcdC8vLS0gRE9NIG1ldGhvZHNcblx0XHRnZXRSZWxhdGl2ZVBvc2l0aW9uID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZ0KXtcblx0XHRcdHZhciBtb3VzZVgsIG1vdXNlWTtcblx0XHRcdHZhciBlID0gZXZ0Lm9yaWdpbmFsRXZlbnQgfHwgZXZ0LFxuXHRcdFx0XHRjYW52YXMgPSBldnQuY3VycmVudFRhcmdldCB8fCBldnQuc3JjRWxlbWVudCxcblx0XHRcdFx0Ym91bmRpbmdSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRpZiAoZS50b3VjaGVzKXtcblx0XHRcdFx0bW91c2VYID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcblx0XHRcdFx0bW91c2VZID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xuXG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHRtb3VzZVggPSBlLmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcblx0XHRcdFx0bW91c2VZID0gZS5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eCA6IG1vdXNlWCxcblx0XHRcdFx0eSA6IG1vdXNlWVxuXHRcdFx0fTtcblxuXHRcdH0sXG5cdFx0YWRkRXZlbnQgPSBoZWxwZXJzLmFkZEV2ZW50ID0gZnVuY3Rpb24obm9kZSxldmVudFR5cGUsbWV0aG9kKXtcblx0XHRcdGlmIChub2RlLmFkZEV2ZW50TGlzdGVuZXIpe1xuXHRcdFx0XHRub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLG1ldGhvZCk7XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUuYXR0YWNoRXZlbnQpe1xuXHRcdFx0XHRub2RlLmF0dGFjaEV2ZW50KFwib25cIitldmVudFR5cGUsIG1ldGhvZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlW1wib25cIitldmVudFR5cGVdID0gbWV0aG9kO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVtb3ZlRXZlbnQgPSBoZWxwZXJzLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24obm9kZSwgZXZlbnRUeXBlLCBoYW5kbGVyKXtcblx0XHRcdGlmIChub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIpe1xuXHRcdFx0XHRub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBmYWxzZSk7XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUuZGV0YWNoRXZlbnQpe1xuXHRcdFx0XHRub2RlLmRldGFjaEV2ZW50KFwib25cIitldmVudFR5cGUsaGFuZGxlcik7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdG5vZGVbXCJvblwiICsgZXZlbnRUeXBlXSA9IG5vb3A7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRiaW5kRXZlbnRzID0gaGVscGVycy5iaW5kRXZlbnRzID0gZnVuY3Rpb24oY2hhcnRJbnN0YW5jZSwgYXJyYXlPZkV2ZW50cywgaGFuZGxlcil7XG5cdFx0XHQvLyBDcmVhdGUgdGhlIGV2ZW50cyBvYmplY3QgaWYgaXQncyBub3QgYWxyZWFkeSBwcmVzZW50XG5cdFx0XHRpZiAoIWNoYXJ0SW5zdGFuY2UuZXZlbnRzKSBjaGFydEluc3RhbmNlLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRlYWNoKGFycmF5T2ZFdmVudHMsZnVuY3Rpb24oZXZlbnROYW1lKXtcblx0XHRcdFx0Y2hhcnRJbnN0YW5jZS5ldmVudHNbZXZlbnROYW1lXSA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aGFuZGxlci5hcHBseShjaGFydEluc3RhbmNlLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRhZGRFdmVudChjaGFydEluc3RhbmNlLmNoYXJ0LmNhbnZhcyxldmVudE5hbWUsY2hhcnRJbnN0YW5jZS5ldmVudHNbZXZlbnROYW1lXSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHVuYmluZEV2ZW50cyA9IGhlbHBlcnMudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKGNoYXJ0SW5zdGFuY2UsIGFycmF5T2ZFdmVudHMpIHtcblx0XHRcdGVhY2goYXJyYXlPZkV2ZW50cywgZnVuY3Rpb24oaGFuZGxlcixldmVudE5hbWUpe1xuXHRcdFx0XHRyZW1vdmVFdmVudChjaGFydEluc3RhbmNlLmNoYXJ0LmNhbnZhcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0Z2V0TWF4aW11bVdpZHRoID0gaGVscGVycy5nZXRNYXhpbXVtV2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKXtcblx0XHRcdHZhciBjb250YWluZXIgPSBkb21Ob2RlLnBhcmVudE5vZGUsXG5cdFx0XHQgICAgcGFkZGluZyA9IHBhcnNlSW50KGdldFN0eWxlKGNvbnRhaW5lciwgJ3BhZGRpbmctbGVmdCcpKSArIHBhcnNlSW50KGdldFN0eWxlKGNvbnRhaW5lciwgJ3BhZGRpbmctcmlnaHQnKSk7XG5cdFx0XHQvLyBUT0RPID0gY2hlY2sgY3Jvc3MgYnJvd3NlciBzdHVmZiB3aXRoIHRoaXMuXG5cdFx0XHRyZXR1cm4gY29udGFpbmVyID8gY29udGFpbmVyLmNsaWVudFdpZHRoIC0gcGFkZGluZyA6IDA7XG5cdFx0fSxcblx0XHRnZXRNYXhpbXVtSGVpZ2h0ID0gaGVscGVycy5nZXRNYXhpbXVtSGVpZ2h0ID0gZnVuY3Rpb24oZG9tTm9kZSl7XG5cdFx0XHR2YXIgY29udGFpbmVyID0gZG9tTm9kZS5wYXJlbnROb2RlLFxuXHRcdFx0ICAgIHBhZGRpbmcgPSBwYXJzZUludChnZXRTdHlsZShjb250YWluZXIsICdwYWRkaW5nLWJvdHRvbScpKSArIHBhcnNlSW50KGdldFN0eWxlKGNvbnRhaW5lciwgJ3BhZGRpbmctdG9wJykpO1xuXHRcdFx0Ly8gVE9ETyA9IGNoZWNrIGNyb3NzIGJyb3dzZXIgc3R1ZmYgd2l0aCB0aGlzLlxuXHRcdFx0cmV0dXJuIGNvbnRhaW5lciA/IGNvbnRhaW5lci5jbGllbnRIZWlnaHQgLSBwYWRkaW5nIDogMDtcblx0XHR9LFxuXHRcdGdldFN0eWxlID0gaGVscGVycy5nZXRTdHlsZSA9IGZ1bmN0aW9uIChlbCwgcHJvcGVydHkpIHtcblx0XHRcdHJldHVybiBlbC5jdXJyZW50U3R5bGUgP1xuXHRcdFx0XHRlbC5jdXJyZW50U3R5bGVbcHJvcGVydHldIDpcblx0XHRcdFx0ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cdFx0fSxcblx0XHRnZXRNYXhpbXVtU2l6ZSA9IGhlbHBlcnMuZ2V0TWF4aW11bVNpemUgPSBoZWxwZXJzLmdldE1heGltdW1XaWR0aCwgLy8gbGVnYWN5IHN1cHBvcnRcblx0XHRyZXRpbmFTY2FsZSA9IGhlbHBlcnMucmV0aW5hU2NhbGUgPSBmdW5jdGlvbihjaGFydCl7XG5cdFx0XHR2YXIgY3R4ID0gY2hhcnQuY3R4LFxuXHRcdFx0XHR3aWR0aCA9IGNoYXJ0LmNhbnZhcy53aWR0aCxcblx0XHRcdFx0aGVpZ2h0ID0gY2hhcnQuY2FudmFzLmhlaWdodDtcblxuXHRcdFx0aWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG5cdFx0XHRcdGN0eC5jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcblx0XHRcdFx0Y3R4LmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRcdGN0eC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG5cdFx0XHRcdGN0eC5jYW52YXMud2lkdGggPSB3aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuXHRcdFx0XHRjdHguc2NhbGUod2luZG93LmRldmljZVBpeGVsUmF0aW8sIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vLS0gQ2FudmFzIG1ldGhvZHNcblx0XHRjbGVhciA9IGhlbHBlcnMuY2xlYXIgPSBmdW5jdGlvbihjaGFydCl7XG5cdFx0XHRjaGFydC5jdHguY2xlYXJSZWN0KDAsMCxjaGFydC53aWR0aCxjaGFydC5oZWlnaHQpO1xuXHRcdH0sXG5cdFx0Zm9udFN0cmluZyA9IGhlbHBlcnMuZm9udFN0cmluZyA9IGZ1bmN0aW9uKHBpeGVsU2l6ZSxmb250U3R5bGUsZm9udEZhbWlseSl7XG5cdFx0XHRyZXR1cm4gZm9udFN0eWxlICsgXCIgXCIgKyBwaXhlbFNpemUrXCJweCBcIiArIGZvbnRGYW1pbHk7XG5cdFx0fSxcblx0XHRsb25nZXN0VGV4dCA9IGhlbHBlcnMubG9uZ2VzdFRleHQgPSBmdW5jdGlvbihjdHgsZm9udCxhcnJheU9mU3RyaW5ncyl7XG5cdFx0XHRjdHguZm9udCA9IGZvbnQ7XG5cdFx0XHR2YXIgbG9uZ2VzdCA9IDA7XG5cdFx0XHRlYWNoKGFycmF5T2ZTdHJpbmdzLGZ1bmN0aW9uKHN0cmluZyl7XG5cdFx0XHRcdHZhciB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcblx0XHRcdFx0bG9uZ2VzdCA9ICh0ZXh0V2lkdGggPiBsb25nZXN0KSA/IHRleHRXaWR0aCA6IGxvbmdlc3Q7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBsb25nZXN0O1xuXHRcdH0sXG5cdFx0ZHJhd1JvdW5kZWRSZWN0YW5nbGUgPSBoZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24oY3R4LHgseSx3aWR0aCxoZWlnaHQscmFkaXVzKXtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG5cdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XG5cdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XG5cdFx0XHRjdHgubGluZVRvKHgsIHkgKyByYWRpdXMpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0fTtcblxuXG5cdC8vU3RvcmUgYSByZWZlcmVuY2UgdG8gZWFjaCBpbnN0YW5jZSAtIGFsbG93aW5nIHVzIHRvIGdsb2JhbGx5IHJlc2l6ZSBjaGFydCBpbnN0YW5jZXMgb24gd2luZG93IHJlc2l6ZS5cblx0Ly9EZXN0cm95IG1ldGhvZCBvbiB0aGUgY2hhcnQgd2lsbCByZW1vdmUgdGhlIGluc3RhbmNlIG9mIHRoZSBjaGFydCBmcm9tIHRoaXMgcmVmZXJlbmNlLlxuXHRDaGFydC5pbnN0YW5jZXMgPSB7fTtcblxuXHRDaGFydC5UeXBlID0gZnVuY3Rpb24oZGF0YSxvcHRpb25zLGNoYXJ0KXtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuY2hhcnQgPSBjaGFydDtcblx0XHR0aGlzLmlkID0gdWlkKCk7XG5cdFx0Ly9BZGQgdGhlIGNoYXJ0IGluc3RhbmNlIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG5cdFx0Q2hhcnQuaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcblxuXHRcdC8vIEluaXRpYWxpemUgaXMgYWx3YXlzIGNhbGxlZCB3aGVuIGEgY2hhcnQgdHlwZSBpcyBjcmVhdGVkXG5cdFx0Ly8gQnkgZGVmYXVsdCBpdCBpcyBhIG5vIG9wLCBidXQgaXQgc2hvdWxkIGJlIGV4dGVuZGVkXG5cdFx0aWYgKG9wdGlvbnMucmVzcG9uc2l2ZSl7XG5cdFx0XHR0aGlzLnJlc2l6ZSgpO1xuXHRcdH1cblx0XHR0aGlzLmluaXRpYWxpemUuY2FsbCh0aGlzLGRhdGEpO1xuXHR9O1xuXG5cdC8vQ29yZSBtZXRob2RzIHRoYXQnbGwgYmUgYSBwYXJ0IG9mIGV2ZXJ5IGNoYXJ0IHR5cGVcblx0ZXh0ZW5kKENoYXJ0LlR5cGUucHJvdG90eXBlLHtcblx0XHRpbml0aWFsaXplIDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LFxuXHRcdGNsZWFyIDogZnVuY3Rpb24oKXtcblx0XHRcdGNsZWFyKHRoaXMuY2hhcnQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHRzdG9wIDogZnVuY3Rpb24oKXtcblx0XHRcdC8vIFN0b3BzIGFueSBjdXJyZW50IGFuaW1hdGlvbiBsb29wIG9jY3VyaW5nXG5cdFx0XHRDaGFydC5hbmltYXRpb25TZXJ2aWNlLmNhbmNlbEFuaW1hdGlvbih0aGlzKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0cmVzaXplIDogZnVuY3Rpb24oY2FsbGJhY2spe1xuXHRcdFx0dGhpcy5zdG9wKCk7XG5cdFx0XHR2YXIgY2FudmFzID0gdGhpcy5jaGFydC5jYW52YXMsXG5cdFx0XHRcdG5ld1dpZHRoID0gZ2V0TWF4aW11bVdpZHRoKHRoaXMuY2hhcnQuY2FudmFzKSxcblx0XHRcdFx0bmV3SGVpZ2h0ID0gdGhpcy5vcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gPyBuZXdXaWR0aCAvIHRoaXMuY2hhcnQuYXNwZWN0UmF0aW8gOiBnZXRNYXhpbXVtSGVpZ2h0KHRoaXMuY2hhcnQuY2FudmFzKTtcblxuXHRcdFx0Y2FudmFzLndpZHRoID0gdGhpcy5jaGFydC53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IHRoaXMuY2hhcnQuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXG5cdFx0XHRyZXRpbmFTY2FsZSh0aGlzLmNoYXJ0KTtcblxuXHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdHJlZmxvdyA6IG5vb3AsXG5cdFx0cmVuZGVyIDogZnVuY3Rpb24ocmVmbG93KXtcblx0XHRcdGlmIChyZWZsb3cpe1xuXHRcdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiAmJiAhcmVmbG93KXtcblx0XHRcdFx0dmFyIGFuaW1hdGlvbiA9IG5ldyBDaGFydC5BbmltYXRpb24oKTtcblx0XHRcdFx0YW5pbWF0aW9uLm51bVN0ZXBzID0gdGhpcy5vcHRpb25zLmFuaW1hdGlvblN0ZXBzO1xuXHRcdFx0XHRhbmltYXRpb24uZWFzaW5nID0gdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZztcblx0XHRcdFx0XG5cdFx0XHRcdC8vIHJlbmRlciBmdW5jdGlvblxuXHRcdFx0XHRhbmltYXRpb24ucmVuZGVyID0gZnVuY3Rpb24oY2hhcnRJbnN0YW5jZSwgYW5pbWF0aW9uT2JqZWN0KSB7XG5cdFx0XHRcdFx0dmFyIGVhc2luZ0Z1bmN0aW9uID0gaGVscGVycy5lYXNpbmdFZmZlY3RzW2FuaW1hdGlvbk9iamVjdC5lYXNpbmddO1xuXHRcdFx0XHRcdHZhciBzdGVwRGVjaW1hbCA9IGFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCAvIGFuaW1hdGlvbk9iamVjdC5udW1TdGVwcztcblx0XHRcdFx0XHR2YXIgZWFzZURlY2ltYWwgPSBlYXNpbmdGdW5jdGlvbihzdGVwRGVjaW1hbCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2hhcnRJbnN0YW5jZS5kcmF3KGVhc2VEZWNpbWFsLCBzdGVwRGVjaW1hbCwgYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIHVzZXIgZXZlbnRzXG5cdFx0XHRcdGFuaW1hdGlvbi5vbkFuaW1hdGlvblByb2dyZXNzID0gdGhpcy5vcHRpb25zLm9uQW5pbWF0aW9uUHJvZ3Jlc3M7XG5cdFx0XHRcdGFuaW1hdGlvbi5vbkFuaW1hdGlvbkNvbXBsZXRlID0gdGhpcy5vcHRpb25zLm9uQW5pbWF0aW9uQ29tcGxldGU7XG5cdFx0XHRcdFxuXHRcdFx0XHRDaGFydC5hbmltYXRpb25TZXJ2aWNlLmFkZEFuaW1hdGlvbih0aGlzLCBhbmltYXRpb24pO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZXtcblx0XHRcdFx0dGhpcy5kcmF3KCk7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5vbkFuaW1hdGlvbkNvbXBsZXRlLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdGdlbmVyYXRlTGVnZW5kIDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiBoZWxwZXJzLnRlbXBsYXRlKHRoaXMub3B0aW9ucy5sZWdlbmRUZW1wbGF0ZSwgdGhpcyk7XG5cdFx0fSxcblx0XHRkZXN0cm95IDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuc3RvcCgpO1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0dW5iaW5kRXZlbnRzKHRoaXMsIHRoaXMuZXZlbnRzKTtcblx0XHRcdHZhciBjYW52YXMgPSB0aGlzLmNoYXJ0LmNhbnZhcztcblxuXHRcdFx0Ly8gUmVzZXQgY2FudmFzIGhlaWdodC93aWR0aCBhdHRyaWJ1dGVzIHN0YXJ0cyBhIGZyZXNoIHdpdGggdGhlIGNhbnZhcyBjb250ZXh0XG5cdFx0XHRjYW52YXMud2lkdGggPSB0aGlzLmNoYXJ0LndpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IHRoaXMuY2hhcnQuaGVpZ2h0O1xuXG5cdFx0XHQvLyA8IElFOSBkb2Vzbid0IHN1cHBvcnQgcmVtb3ZlUHJvcGVydHlcblx0XHRcdGlmIChjYW52YXMuc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd3aWR0aCcpO1xuXHRcdFx0XHRjYW52YXMuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnd2lkdGgnKTtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBDaGFydC5pbnN0YW5jZXNbdGhpcy5pZF07XG5cdFx0fSxcblx0XHRzaG93VG9vbHRpcCA6IGZ1bmN0aW9uKENoYXJ0RWxlbWVudHMsIGZvcmNlUmVkcmF3KXtcblx0XHRcdC8vIE9ubHkgcmVkcmF3IHRoZSBjaGFydCBpZiB3ZSd2ZSBhY3R1YWxseSBjaGFuZ2VkIHdoYXQgd2UncmUgaG92ZXJpbmcgb24uXG5cdFx0XHRpZiAodHlwZW9mIHRoaXMuYWN0aXZlRWxlbWVudHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmFjdGl2ZUVsZW1lbnRzID0gW107XG5cblx0XHRcdHZhciBpc0NoYW5nZWQgPSAoZnVuY3Rpb24oRWxlbWVudHMpe1xuXHRcdFx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmIChFbGVtZW50cy5sZW5ndGggIT09IHRoaXMuYWN0aXZlRWxlbWVudHMubGVuZ3RoKXtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVhY2goRWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KXtcblx0XHRcdFx0XHRpZiAoZWxlbWVudCAhPT0gdGhpcy5hY3RpdmVFbGVtZW50c1tpbmRleF0pe1xuXHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCB0aGlzKTtcblx0XHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0XHR9KS5jYWxsKHRoaXMsIENoYXJ0RWxlbWVudHMpO1xuXG5cdFx0XHRpZiAoIWlzQ2hhbmdlZCAmJiAhZm9yY2VSZWRyYXcpe1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHR0aGlzLmFjdGl2ZUVsZW1lbnRzID0gQ2hhcnRFbGVtZW50cztcblx0XHRcdH1cblx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzKXtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzKGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdGlmIChDaGFydEVsZW1lbnRzLmxlbmd0aCA+IDApe1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG11bHRpcGxlIGRhdGFzZXRzLCBzaG93IGEgTXVsdGlUb29sdGlwIGZvciBhbGwgb2YgdGhlIGRhdGEgcG9pbnRzIGF0IHRoYXQgaW5kZXhcblx0XHRcdFx0aWYgKHRoaXMuZGF0YXNldHMgJiYgdGhpcy5kYXRhc2V0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0dmFyIGRhdGFBcnJheSxcblx0XHRcdFx0XHRcdGRhdGFJbmRleDtcblxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSB0aGlzLmRhdGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRkYXRhQXJyYXkgPSB0aGlzLmRhdGFzZXRzW2ldLnBvaW50cyB8fCB0aGlzLmRhdGFzZXRzW2ldLmJhcnMgfHwgdGhpcy5kYXRhc2V0c1tpXS5zZWdtZW50cztcblx0XHRcdFx0XHRcdGRhdGFJbmRleCA9IGluZGV4T2YoZGF0YUFycmF5LCBDaGFydEVsZW1lbnRzWzBdKTtcblx0XHRcdFx0XHRcdGlmIChkYXRhSW5kZXggIT09IC0xKXtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0b29sdGlwTGFiZWxzID0gW10sXG5cdFx0XHRcdFx0XHR0b29sdGlwQ29sb3JzID0gW10sXG5cdFx0XHRcdFx0XHRtZWRpYW5Qb3NpdGlvbiA9IChmdW5jdGlvbihpbmRleCkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEdldCBhbGwgdGhlIHBvaW50cyBhdCB0aGF0IHBhcnRpY3VsYXIgaW5kZXhcblx0XHRcdFx0XHRcdFx0dmFyIEVsZW1lbnRzID0gW10sXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUNvbGxlY3Rpb24sXG5cdFx0XHRcdFx0XHRcdFx0eFBvc2l0aW9ucyA9IFtdLFxuXHRcdFx0XHRcdFx0XHRcdHlQb3NpdGlvbnMgPSBbXSxcblx0XHRcdFx0XHRcdFx0XHR4TWF4LFxuXHRcdFx0XHRcdFx0XHRcdHlNYXgsXG5cdFx0XHRcdFx0XHRcdFx0eE1pbixcblx0XHRcdFx0XHRcdFx0XHR5TWluO1xuXHRcdFx0XHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUNvbGxlY3Rpb24gPSBkYXRhc2V0LnBvaW50cyB8fCBkYXRhc2V0LmJhcnMgfHwgZGF0YXNldC5zZWdtZW50cztcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGF0YUNvbGxlY3Rpb25bZGF0YUluZGV4XSAmJiBkYXRhQ29sbGVjdGlvbltkYXRhSW5kZXhdLmhhc1ZhbHVlKCkpe1xuXHRcdFx0XHRcdFx0XHRcdFx0RWxlbWVudHMucHVzaChkYXRhQ29sbGVjdGlvbltkYXRhSW5kZXhdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0XHRcdHhQb3NpdGlvbnMucHVzaChlbGVtZW50LngpO1xuXHRcdFx0XHRcdFx0XHRcdHlQb3NpdGlvbnMucHVzaChlbGVtZW50LnkpO1xuXG5cblx0XHRcdFx0XHRcdFx0XHQvL0luY2x1ZGUgYW55IGNvbG91ciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdHRvb2x0aXBMYWJlbHMucHVzaChoZWxwZXJzLnRlbXBsYXRlKHRoaXMub3B0aW9ucy5tdWx0aVRvb2x0aXBUZW1wbGF0ZSwgZWxlbWVudCkpO1xuXHRcdFx0XHRcdFx0XHRcdHRvb2x0aXBDb2xvcnMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxsOiBlbGVtZW50Ll9zYXZlZC5maWxsQ29sb3IgfHwgZWxlbWVudC5maWxsQ29sb3IsXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHJva2U6IGVsZW1lbnQuX3NhdmVkLnN0cm9rZUNvbG9yIHx8IGVsZW1lbnQuc3Ryb2tlQ29sb3Jcblx0XHRcdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0XHR9LCB0aGlzKTtcblxuXHRcdFx0XHRcdFx0XHR5TWluID0gbWluKHlQb3NpdGlvbnMpO1xuXHRcdFx0XHRcdFx0XHR5TWF4ID0gbWF4KHlQb3NpdGlvbnMpO1xuXG5cdFx0XHRcdFx0XHRcdHhNaW4gPSBtaW4oeFBvc2l0aW9ucyk7XG5cdFx0XHRcdFx0XHRcdHhNYXggPSBtYXgoeFBvc2l0aW9ucyk7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR4OiAoeE1pbiA+IHRoaXMuY2hhcnQud2lkdGgvMikgPyB4TWluIDogeE1heCxcblx0XHRcdFx0XHRcdFx0XHR5OiAoeU1pbiArIHlNYXgpLzJcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0pLmNhbGwodGhpcywgZGF0YUluZGV4KTtcblxuXHRcdFx0XHRcdG5ldyBDaGFydC5NdWx0aVRvb2x0aXAoe1xuXHRcdFx0XHRcdFx0eDogbWVkaWFuUG9zaXRpb24ueCxcblx0XHRcdFx0XHRcdHk6IG1lZGlhblBvc2l0aW9uLnksXG5cdFx0XHRcdFx0XHR4UGFkZGluZzogdGhpcy5vcHRpb25zLnRvb2x0aXBYUGFkZGluZyxcblx0XHRcdFx0XHRcdHlQYWRkaW5nOiB0aGlzLm9wdGlvbnMudG9vbHRpcFlQYWRkaW5nLFxuXHRcdFx0XHRcdFx0eE9mZnNldDogdGhpcy5vcHRpb25zLnRvb2x0aXBYT2Zmc2V0LFxuXHRcdFx0XHRcdFx0ZmlsbENvbG9yOiB0aGlzLm9wdGlvbnMudG9vbHRpcEZpbGxDb2xvcixcblx0XHRcdFx0XHRcdHRleHRDb2xvcjogdGhpcy5vcHRpb25zLnRvb2x0aXBGb250Q29sb3IsXG5cdFx0XHRcdFx0XHRmb250RmFtaWx5OiB0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHRmb250U3R5bGU6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udFN0eWxlLFxuXHRcdFx0XHRcdFx0Zm9udFNpemU6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udFNpemUsXG5cdFx0XHRcdFx0XHR0aXRsZVRleHRDb2xvcjogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRDb2xvcixcblx0XHRcdFx0XHRcdHRpdGxlRm9udEZhbWlseTogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHR0aXRsZUZvbnRTdHlsZTogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRTdHlsZSxcblx0XHRcdFx0XHRcdHRpdGxlRm9udFNpemU6IHRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250U2l6ZSxcblx0XHRcdFx0XHRcdGNvcm5lclJhZGl1czogdGhpcy5vcHRpb25zLnRvb2x0aXBDb3JuZXJSYWRpdXMsXG5cdFx0XHRcdFx0XHRsYWJlbHM6IHRvb2x0aXBMYWJlbHMsXG5cdFx0XHRcdFx0XHRsZWdlbmRDb2xvcnM6IHRvb2x0aXBDb2xvcnMsXG5cdFx0XHRcdFx0XHRsZWdlbmRDb2xvckJhY2tncm91bmQgOiB0aGlzLm9wdGlvbnMubXVsdGlUb29sdGlwS2V5QmFja2dyb3VuZCxcblx0XHRcdFx0XHRcdHRpdGxlOiB0ZW1wbGF0ZSh0aGlzLm9wdGlvbnMudG9vbHRpcFRpdGxlVGVtcGxhdGUsQ2hhcnRFbGVtZW50c1swXSksXG5cdFx0XHRcdFx0XHRjaGFydDogdGhpcy5jaGFydCxcblx0XHRcdFx0XHRcdGN0eDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdFx0XHRjdXN0b206IHRoaXMub3B0aW9ucy5jdXN0b21Ub29sdGlwc1xuXHRcdFx0XHRcdH0pLmRyYXcoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVhY2goQ2hhcnRFbGVtZW50cywgZnVuY3Rpb24oRWxlbWVudCkge1xuXHRcdFx0XHRcdFx0dmFyIHRvb2x0aXBQb3NpdGlvbiA9IEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG5cdFx0XHRcdFx0XHRuZXcgQ2hhcnQuVG9vbHRpcCh7XG5cdFx0XHRcdFx0XHRcdHg6IE1hdGgucm91bmQodG9vbHRpcFBvc2l0aW9uLngpLFxuXHRcdFx0XHRcdFx0XHR5OiBNYXRoLnJvdW5kKHRvb2x0aXBQb3NpdGlvbi55KSxcblx0XHRcdFx0XHRcdFx0eFBhZGRpbmc6IHRoaXMub3B0aW9ucy50b29sdGlwWFBhZGRpbmcsXG5cdFx0XHRcdFx0XHRcdHlQYWRkaW5nOiB0aGlzLm9wdGlvbnMudG9vbHRpcFlQYWRkaW5nLFxuXHRcdFx0XHRcdFx0XHRmaWxsQ29sb3I6IHRoaXMub3B0aW9ucy50b29sdGlwRmlsbENvbG9yLFxuXHRcdFx0XHRcdFx0XHR0ZXh0Q29sb3I6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udENvbG9yLFxuXHRcdFx0XHRcdFx0XHRmb250RmFtaWx5OiB0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHRcdGZvbnRTdHlsZTogdGhpcy5vcHRpb25zLnRvb2x0aXBGb250U3R5bGUsXG5cdFx0XHRcdFx0XHRcdGZvbnRTaXplOiB0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRTaXplLFxuXHRcdFx0XHRcdFx0XHRjYXJldEhlaWdodDogdGhpcy5vcHRpb25zLnRvb2x0aXBDYXJldFNpemUsXG5cdFx0XHRcdFx0XHRcdGNvcm5lclJhZGl1czogdGhpcy5vcHRpb25zLnRvb2x0aXBDb3JuZXJSYWRpdXMsXG5cdFx0XHRcdFx0XHRcdHRleHQ6IHRlbXBsYXRlKHRoaXMub3B0aW9ucy50b29sdGlwVGVtcGxhdGUsIEVsZW1lbnQpLFxuXHRcdFx0XHRcdFx0XHRjaGFydDogdGhpcy5jaGFydCxcblx0XHRcdFx0XHRcdFx0Y3VzdG9tOiB0aGlzLm9wdGlvbnMuY3VzdG9tVG9vbHRpcHNcblx0XHRcdFx0XHRcdH0pLmRyYXcoKTtcblx0XHRcdFx0XHR9LCB0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHR0b0Jhc2U2NEltYWdlIDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB0aGlzLmNoYXJ0LmNhbnZhcy50b0RhdGFVUkwuYXBwbHkodGhpcy5jaGFydC5jYW52YXMsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5UeXBlLmV4dGVuZCA9IGZ1bmN0aW9uKGV4dGVuc2lvbnMpe1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXM7XG5cblx0XHR2YXIgQ2hhcnRUeXBlID0gZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiBwYXJlbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHQvL0NvcHkgdGhlIHByb3RvdHlwZSBvYmplY3Qgb2YgdGhlIHRoaXMgY2xhc3Ncblx0XHRDaGFydFR5cGUucHJvdG90eXBlID0gY2xvbmUocGFyZW50LnByb3RvdHlwZSk7XG5cdFx0Ly9Ob3cgb3ZlcndyaXRlIHNvbWUgb2YgdGhlIHByb3BlcnRpZXMgaW4gdGhlIGJhc2UgY2xhc3Mgd2l0aCB0aGUgbmV3IGV4dGVuc2lvbnNcblx0XHRleHRlbmQoQ2hhcnRUeXBlLnByb3RvdHlwZSwgZXh0ZW5zaW9ucyk7XG5cblx0XHRDaGFydFR5cGUuZXh0ZW5kID0gQ2hhcnQuVHlwZS5leHRlbmQ7XG5cblx0XHRpZiAoZXh0ZW5zaW9ucy5uYW1lIHx8IHBhcmVudC5wcm90b3R5cGUubmFtZSl7XG5cblx0XHRcdHZhciBjaGFydE5hbWUgPSBleHRlbnNpb25zLm5hbWUgfHwgcGFyZW50LnByb3RvdHlwZS5uYW1lO1xuXHRcdFx0Ly9Bc3NpZ24gYW55IHBvdGVudGlhbCBkZWZhdWx0IHZhbHVlcyBvZiB0aGUgbmV3IGNoYXJ0IHR5cGVcblxuXHRcdFx0Ly9JZiBub25lIGFyZSBkZWZpbmVkLCB3ZSdsbCB1c2UgYSBjbG9uZSBvZiB0aGUgY2hhcnQgdHlwZSB0aGlzIGlzIGJlaW5nIGV4dGVuZGVkIGZyb20uXG5cdFx0XHQvL0kuZS4gaWYgd2UgZXh0ZW5kIGEgbGluZSBjaGFydCwgd2UnbGwgdXNlIHRoZSBkZWZhdWx0cyBmcm9tIHRoZSBsaW5lIGNoYXJ0IGlmIG91ciBuZXcgY2hhcnRcblx0XHRcdC8vZG9lc24ndCBkZWZpbmUgc29tZSBkZWZhdWx0cyBvZiB0aGVpciBvd24uXG5cblx0XHRcdHZhciBiYXNlRGVmYXVsdHMgPSAoQ2hhcnQuZGVmYXVsdHNbcGFyZW50LnByb3RvdHlwZS5uYW1lXSkgPyBjbG9uZShDaGFydC5kZWZhdWx0c1twYXJlbnQucHJvdG90eXBlLm5hbWVdKSA6IHt9O1xuXG5cdFx0XHRDaGFydC5kZWZhdWx0c1tjaGFydE5hbWVdID0gZXh0ZW5kKGJhc2VEZWZhdWx0cyxleHRlbnNpb25zLmRlZmF1bHRzKTtcblxuXHRcdFx0Q2hhcnQudHlwZXNbY2hhcnROYW1lXSA9IENoYXJ0VHlwZTtcblxuXHRcdFx0Ly9SZWdpc3RlciB0aGlzIG5ldyBjaGFydCB0eXBlIGluIHRoZSBDaGFydCBwcm90b3R5cGVcblx0XHRcdENoYXJ0LnByb3RvdHlwZVtjaGFydE5hbWVdID0gZnVuY3Rpb24oZGF0YSxvcHRpb25zKXtcblx0XHRcdFx0dmFyIGNvbmZpZyA9IG1lcmdlKENoYXJ0LmRlZmF1bHRzLmdsb2JhbCwgQ2hhcnQuZGVmYXVsdHNbY2hhcnROYW1lXSwgb3B0aW9ucyB8fCB7fSk7XG5cdFx0XHRcdHJldHVybiBuZXcgQ2hhcnRUeXBlKGRhdGEsY29uZmlnLHRoaXMpO1xuXHRcdFx0fTtcblx0XHR9IGVsc2V7XG5cdFx0XHR3YXJuKFwiTmFtZSBub3QgcHJvdmlkZWQgZm9yIHRoaXMgY2hhcnQsIHNvIGl0IGhhc24ndCBiZWVuIHJlZ2lzdGVyZWRcIik7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJlbnQ7XG5cdH07XG5cblx0Q2hhcnQuRWxlbWVudCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pe1xuXHRcdGV4dGVuZCh0aGlzLGNvbmZpZ3VyYXRpb24pO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7XG5cdFx0dGhpcy5zYXZlKCk7XG5cdH07XG5cdGV4dGVuZChDaGFydC5FbGVtZW50LnByb3RvdHlwZSx7XG5cdFx0aW5pdGlhbGl6ZSA6IGZ1bmN0aW9uKCl7fSxcblx0XHRyZXN0b3JlIDogZnVuY3Rpb24ocHJvcHMpe1xuXHRcdFx0aWYgKCFwcm9wcyl7XG5cdFx0XHRcdGV4dGVuZCh0aGlzLHRoaXMuX3NhdmVkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVhY2gocHJvcHMsZnVuY3Rpb24oa2V5KXtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSB0aGlzLl9zYXZlZFtrZXldO1xuXHRcdFx0XHR9LHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHRzYXZlIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuX3NhdmVkID0gY2xvbmUodGhpcyk7XG5cdFx0XHRkZWxldGUgdGhpcy5fc2F2ZWQuX3NhdmVkO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbihuZXdQcm9wcyl7XG5cdFx0XHRlYWNoKG5ld1Byb3BzLGZ1bmN0aW9uKHZhbHVlLGtleSl7XG5cdFx0XHRcdHRoaXMuX3NhdmVkW2tleV0gPSB0aGlzW2tleV07XG5cdFx0XHRcdHRoaXNba2V5XSA9IHZhbHVlO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0dHJhbnNpdGlvbiA6IGZ1bmN0aW9uKHByb3BzLGVhc2Upe1xuXHRcdFx0ZWFjaChwcm9wcyxmdW5jdGlvbih2YWx1ZSxrZXkpe1xuXHRcdFx0XHR0aGlzW2tleV0gPSAoKHZhbHVlIC0gdGhpcy5fc2F2ZWRba2V5XSkgKiBlYXNlKSArIHRoaXMuX3NhdmVkW2tleV07XG5cdFx0XHR9LHRoaXMpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHR0b29sdGlwUG9zaXRpb24gOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eCA6IHRoaXMueCxcblx0XHRcdFx0eSA6IHRoaXMueVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGhhc1ZhbHVlOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIGlzTnVtYmVyKHRoaXMudmFsdWUpO1xuXHRcdH1cblx0fSk7XG5cblx0Q2hhcnQuRWxlbWVudC5leHRlbmQgPSBpbmhlcml0cztcblxuXG5cdENoYXJ0LlBvaW50ID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0aW5SYW5nZTogZnVuY3Rpb24oY2hhcnRYLGNoYXJ0WSl7XG5cdFx0XHR2YXIgaGl0RGV0ZWN0aW9uUmFuZ2UgPSB0aGlzLmhpdERldGVjdGlvblJhZGl1cyArIHRoaXMucmFkaXVzO1xuXHRcdFx0cmV0dXJuICgoTWF0aC5wb3coY2hhcnRYLXRoaXMueCwgMikrTWF0aC5wb3coY2hhcnRZLXRoaXMueSwgMikpIDwgTWF0aC5wb3coaGl0RGV0ZWN0aW9uUmFuZ2UsMikpO1xuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAodGhpcy5kaXNwbGF5KXtcblx0XHRcdFx0dmFyIGN0eCA9IHRoaXMuY3R4O1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdFx0Y3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkqMik7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblxuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZUNvbG9yO1xuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aDtcblxuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsQ29sb3I7XG5cblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fVxuXG5cblx0XHRcdC8vUXVpY2sgZGVidWcgZm9yIGJlemllciBjdXJ2ZSBzcGxpbmluZ1xuXHRcdFx0Ly9IaWdobGlnaHRzIGNvbnRyb2wgcG9pbnRzIGFuZCB0aGUgbGluZSBiZXR3ZWVuIHRoZW0uXG5cdFx0XHQvL0hhbmR5IGZvciBkZXYgLSBzdHJpcHBlZCBpbiB0aGUgbWluIHZlcnNpb24uXG5cblx0XHRcdC8vIGN0eC5zYXZlKCk7XG5cdFx0XHQvLyBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xuXHRcdFx0Ly8gY3R4LnN0cm9rZVN0eWxlID0gXCJibGFja1wiXG5cdFx0XHQvLyBjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHQvLyBjdHguYXJjKHRoaXMuY29udHJvbFBvaW50cy5pbm5lci54LHRoaXMuY29udHJvbFBvaW50cy5pbm5lci55LCAyLCAwLCBNYXRoLlBJKjIpO1xuXHRcdFx0Ly8gY3R4LmZpbGwoKTtcblxuXHRcdFx0Ly8gY3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Ly8gY3R4LmFyYyh0aGlzLmNvbnRyb2xQb2ludHMub3V0ZXIueCx0aGlzLmNvbnRyb2xQb2ludHMub3V0ZXIueSwgMiwgMCwgTWF0aC5QSSoyKTtcblx0XHRcdC8vIGN0eC5maWxsKCk7XG5cblx0XHRcdC8vIGN0eC5tb3ZlVG8odGhpcy5jb250cm9sUG9pbnRzLmlubmVyLngsdGhpcy5jb250cm9sUG9pbnRzLmlubmVyLnkpO1xuXHRcdFx0Ly8gY3R4LmxpbmVUbyh0aGlzLngsIHRoaXMueSk7XG5cdFx0XHQvLyBjdHgubGluZVRvKHRoaXMuY29udHJvbFBvaW50cy5vdXRlci54LHRoaXMuY29udHJvbFBvaW50cy5vdXRlci55KTtcblx0XHRcdC8vIGN0eC5zdHJva2UoKTtcblxuXHRcdFx0Ly8gY3R4LnJlc3RvcmUoKTtcblxuXG5cblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LkFyYyA9IENoYXJ0LkVsZW1lbnQuZXh0ZW5kKHtcblx0XHRpblJhbmdlIDogZnVuY3Rpb24oY2hhcnRYLGNoYXJ0WSl7XG5cblx0XHRcdHZhciBwb2ludFJlbGF0aXZlUG9zaXRpb24gPSBoZWxwZXJzLmdldEFuZ2xlRnJvbVBvaW50KHRoaXMsIHtcblx0XHRcdFx0eDogY2hhcnRYLFxuXHRcdFx0XHR5OiBjaGFydFlcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBOb3JtYWxpemUgYWxsIGFuZ2xlcyB0byAwIC0gMipQSSAoMCAtIDM2MMKwKVxuXHRcdFx0dmFyIHBvaW50UmVsYXRpdmVBbmdsZSA9IHBvaW50UmVsYXRpdmVQb3NpdGlvbi5hbmdsZSAlIChNYXRoLlBJICogMiksXG5cdFx0XHQgICAgc3RhcnRBbmdsZSA9IChNYXRoLlBJICogMiArIHRoaXMuc3RhcnRBbmdsZSkgJSAoTWF0aC5QSSAqIDIpLFxuXHRcdFx0ICAgIGVuZEFuZ2xlID0gKE1hdGguUEkgKiAyICsgdGhpcy5lbmRBbmdsZSkgJSAoTWF0aC5QSSAqIDIpIHx8IDM2MDtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHdldGhlciB0aGUgcG9pbnRSZWxhdGl2ZUFuZ2xlIGlzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCB0aGUgZW5kIGFuZ2xlXG5cdFx0XHR2YXIgYmV0d2VlbkFuZ2xlcyA9IChlbmRBbmdsZSA8IHN0YXJ0QW5nbGUpID9cblx0XHRcdFx0cG9pbnRSZWxhdGl2ZUFuZ2xlIDw9IGVuZEFuZ2xlIHx8IHBvaW50UmVsYXRpdmVBbmdsZSA+PSBzdGFydEFuZ2xlOlxuXHRcdFx0XHRwb2ludFJlbGF0aXZlQW5nbGUgPj0gc3RhcnRBbmdsZSAmJiBwb2ludFJlbGF0aXZlQW5nbGUgPD0gZW5kQW5nbGU7XG5cblx0XHRcdC8vQ2hlY2sgaWYgd2l0aGluIHRoZSByYW5nZSBvZiB0aGUgb3Blbi9jbG9zZSBhbmdsZVxuXHRcdFx0dmFyIHdpdGhpblJhZGl1cyA9IChwb2ludFJlbGF0aXZlUG9zaXRpb24uZGlzdGFuY2UgPj0gdGhpcy5pbm5lclJhZGl1cyAmJiBwb2ludFJlbGF0aXZlUG9zaXRpb24uZGlzdGFuY2UgPD0gdGhpcy5vdXRlclJhZGl1cyk7XG5cblx0XHRcdHJldHVybiAoYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXMpO1xuXHRcdFx0Ly9FbnN1cmUgd2l0aGluIHRoZSBvdXRzaWRlIG9mIHRoZSBhcmMgY2VudHJlLCBidXQgaW5zaWRlIGFyYyBvdXRlclxuXHRcdH0sXG5cdFx0dG9vbHRpcFBvc2l0aW9uIDogZnVuY3Rpb24oKXtcblx0XHRcdHZhciBjZW50cmVBbmdsZSA9IHRoaXMuc3RhcnRBbmdsZSArICgodGhpcy5lbmRBbmdsZSAtIHRoaXMuc3RhcnRBbmdsZSkgLyAyKSxcblx0XHRcdFx0cmFuZ2VGcm9tQ2VudHJlID0gKHRoaXMub3V0ZXJSYWRpdXMgLSB0aGlzLmlubmVyUmFkaXVzKSAvIDIgKyB0aGlzLmlubmVyUmFkaXVzO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eCA6IHRoaXMueCArIChNYXRoLmNvcyhjZW50cmVBbmdsZSkgKiByYW5nZUZyb21DZW50cmUpLFxuXHRcdFx0XHR5IDogdGhpcy55ICsgKE1hdGguc2luKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSlcblx0XHRcdH07XG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oYW5pbWF0aW9uUGVyY2VudCl7XG5cblx0XHRcdHZhciBlYXNpbmdEZWNpbWFsID0gYW5pbWF0aW9uUGVyY2VudCB8fCAxO1xuXG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jdHg7XG5cblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblxuXHRcdFx0Y3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5vdXRlclJhZGl1cyA8IDAgPyAwIDogdGhpcy5vdXRlclJhZGl1cywgdGhpcy5zdGFydEFuZ2xlLCB0aGlzLmVuZEFuZ2xlKTtcblxuICAgICAgICAgICAgY3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5pbm5lclJhZGl1cyA8IDAgPyAwIDogdGhpcy5pbm5lclJhZGl1cywgdGhpcy5lbmRBbmdsZSwgdGhpcy5zdGFydEFuZ2xlLCB0cnVlKTtcblxuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2VDb2xvcjtcblx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsQ29sb3I7XG5cblx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRjdHgubGluZUpvaW4gPSAnYmV2ZWwnO1xuXG5cdFx0XHRpZiAodGhpcy5zaG93U3Ryb2tlKXtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Q2hhcnQuUmVjdGFuZ2xlID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGRyYXcgOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY3R4LFxuXHRcdFx0XHRoYWxmV2lkdGggPSB0aGlzLndpZHRoLzIsXG5cdFx0XHRcdGxlZnRYID0gdGhpcy54IC0gaGFsZldpZHRoLFxuXHRcdFx0XHRyaWdodFggPSB0aGlzLnggKyBoYWxmV2lkdGgsXG5cdFx0XHRcdHRvcCA9IHRoaXMuYmFzZSAtICh0aGlzLmJhc2UgLSB0aGlzLnkpLFxuXHRcdFx0XHRoYWxmU3Ryb2tlID0gdGhpcy5zdHJva2VXaWR0aCAvIDI7XG5cblx0XHRcdC8vIENhbnZhcyBkb2Vzbid0IGFsbG93IHVzIHRvIHN0cm9rZSBpbnNpZGUgdGhlIHdpZHRoIHNvIHdlIGNhblxuXHRcdFx0Ly8gYWRqdXN0IHRoZSBzaXplcyB0byBmaXQgaWYgd2UncmUgc2V0dGluZyBhIHN0cm9rZSBvbiB0aGUgbGluZVxuXHRcdFx0aWYgKHRoaXMuc2hvd1N0cm9rZSl7XG5cdFx0XHRcdGxlZnRYICs9IGhhbGZTdHJva2U7XG5cdFx0XHRcdHJpZ2h0WCAtPSBoYWxmU3Ryb2tlO1xuXHRcdFx0XHR0b3AgKz0gaGFsZlN0cm9rZTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsQ29sb3I7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZUNvbG9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc3Ryb2tlV2lkdGg7XG5cblx0XHRcdC8vIEl0J2QgYmUgbmljZSB0byBrZWVwIHRoaXMgY2xhc3MgdG90YWxseSBnZW5lcmljIHRvIGFueSByZWN0YW5nbGVcblx0XHRcdC8vIGFuZCBzaW1wbHkgc3BlY2lmeSB3aGljaCBib3JkZXIgdG8gbWlzcyBvdXQuXG5cdFx0XHRjdHgubW92ZVRvKGxlZnRYLCB0aGlzLmJhc2UpO1xuXHRcdFx0Y3R4LmxpbmVUbyhsZWZ0WCwgdG9wKTtcblx0XHRcdGN0eC5saW5lVG8ocmlnaHRYLCB0b3ApO1xuXHRcdFx0Y3R4LmxpbmVUbyhyaWdodFgsIHRoaXMuYmFzZSk7XG5cdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0aWYgKHRoaXMuc2hvd1N0cm9rZSl7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGhlaWdodCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5iYXNlIC0gdGhpcy55O1xuXHRcdH0sXG5cdFx0aW5SYW5nZSA6IGZ1bmN0aW9uKGNoYXJ0WCxjaGFydFkpe1xuXHRcdFx0cmV0dXJuIChjaGFydFggPj0gdGhpcy54IC0gdGhpcy53aWR0aC8yICYmIGNoYXJ0WCA8PSB0aGlzLnggKyB0aGlzLndpZHRoLzIpICYmIChjaGFydFkgPj0gdGhpcy55ICYmIGNoYXJ0WSA8PSB0aGlzLmJhc2UpO1xuXHRcdH1cblx0fSk7XG5cblx0Q2hhcnQuQW5pbWF0aW9uID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGN1cnJlbnRTdGVwOiBudWxsLCAvLyB0aGUgY3VycmVudCBhbmltYXRpb24gc3RlcFxuXHRcdG51bVN0ZXBzOiA2MCwgLy8gZGVmYXVsdCBudW1iZXIgb2Ygc3RlcHNcblx0XHRlYXNpbmc6IFwiXCIsIC8vIHRoZSBlYXNpbmcgdG8gdXNlIGZvciB0aGlzIGFuaW1hdGlvblxuXHRcdHJlbmRlcjogbnVsbCwgLy8gcmVuZGVyIGZ1bmN0aW9uIHVzZWQgYnkgdGhlIGFuaW1hdGlvbiBzZXJ2aWNlXG5cdFx0XG5cdFx0b25BbmltYXRpb25Qcm9ncmVzczogbnVsbCwgLy8gdXNlciBzcGVjaWZpZWQgY2FsbGJhY2sgdG8gZmlyZSBvbiBlYWNoIHN0ZXAgb2YgdGhlIGFuaW1hdGlvbiBcblx0XHRvbkFuaW1hdGlvbkNvbXBsZXRlOiBudWxsLCAvLyB1c2VyIHNwZWNpZmllZCBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlc1xuXHR9KTtcblx0XG5cdENoYXJ0LlRvb2x0aXAgPSBDaGFydC5FbGVtZW50LmV4dGVuZCh7XG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cblx0XHRcdHZhciBjdHggPSB0aGlzLmNoYXJ0LmN0eDtcblxuXHRcdFx0Y3R4LmZvbnQgPSBmb250U3RyaW5nKHRoaXMuZm9udFNpemUsdGhpcy5mb250U3R5bGUsdGhpcy5mb250RmFtaWx5KTtcblxuXHRcdFx0dGhpcy54QWxpZ24gPSBcImNlbnRlclwiO1xuXHRcdFx0dGhpcy55QWxpZ24gPSBcImFib3ZlXCI7XG5cblx0XHRcdC8vRGlzdGFuY2UgYmV0d2VlbiB0aGUgYWN0dWFsIGVsZW1lbnQueSBwb3NpdGlvbiBhbmQgdGhlIHN0YXJ0IG9mIHRoZSB0b29sdGlwIGNhcmV0XG5cdFx0XHR2YXIgY2FyZXRQYWRkaW5nID0gdGhpcy5jYXJldFBhZGRpbmcgPSAyO1xuXG5cdFx0XHR2YXIgdG9vbHRpcFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMudGV4dCkud2lkdGggKyAyKnRoaXMueFBhZGRpbmcsXG5cdFx0XHRcdHRvb2x0aXBSZWN0SGVpZ2h0ID0gdGhpcy5mb250U2l6ZSArIDIqdGhpcy55UGFkZGluZyxcblx0XHRcdFx0dG9vbHRpcEhlaWdodCA9IHRvb2x0aXBSZWN0SGVpZ2h0ICsgdGhpcy5jYXJldEhlaWdodCArIGNhcmV0UGFkZGluZztcblxuXHRcdFx0aWYgKHRoaXMueCArIHRvb2x0aXBXaWR0aC8yID50aGlzLmNoYXJ0LndpZHRoKXtcblx0XHRcdFx0dGhpcy54QWxpZ24gPSBcImxlZnRcIjtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy54IC0gdG9vbHRpcFdpZHRoLzIgPCAwKXtcblx0XHRcdFx0dGhpcy54QWxpZ24gPSBcInJpZ2h0XCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLnkgLSB0b29sdGlwSGVpZ2h0IDwgMCl7XG5cdFx0XHRcdHRoaXMueUFsaWduID0gXCJiZWxvd1wiO1xuXHRcdFx0fVxuXG5cblx0XHRcdHZhciB0b29sdGlwWCA9IHRoaXMueCAtIHRvb2x0aXBXaWR0aC8yLFxuXHRcdFx0XHR0b29sdGlwWSA9IHRoaXMueSAtIHRvb2x0aXBIZWlnaHQ7XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxDb2xvcjtcblxuXHRcdFx0Ly8gQ3VzdG9tIFRvb2x0aXBzXG5cdFx0XHRpZih0aGlzLmN1c3RvbSl7XG5cdFx0XHRcdHRoaXMuY3VzdG9tKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZXtcblx0XHRcdFx0c3dpdGNoKHRoaXMueUFsaWduKVxuXHRcdFx0XHR7XG5cdFx0XHRcdGNhc2UgXCJhYm92ZVwiOlxuXHRcdFx0XHRcdC8vRHJhdyBhIGNhcmV0IGFib3ZlIHRoZSB4L3lcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLngsdGhpcy55IC0gY2FyZXRQYWRkaW5nKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHRoaXMueCArIHRoaXMuY2FyZXRIZWlnaHQsIHRoaXMueSAtIChjYXJldFBhZGRpbmcgKyB0aGlzLmNhcmV0SGVpZ2h0KSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh0aGlzLnggLSB0aGlzLmNhcmV0SGVpZ2h0LCB0aGlzLnkgLSAoY2FyZXRQYWRkaW5nICsgdGhpcy5jYXJldEhlaWdodCkpO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYmVsb3dcIjpcblx0XHRcdFx0XHR0b29sdGlwWSA9IHRoaXMueSArIGNhcmV0UGFkZGluZyArIHRoaXMuY2FyZXRIZWlnaHQ7XG5cdFx0XHRcdFx0Ly9EcmF3IGEgY2FyZXQgYmVsb3cgdGhlIHgveVxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKHRoaXMueCwgdGhpcy55ICsgY2FyZXRQYWRkaW5nKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHRoaXMueCArIHRoaXMuY2FyZXRIZWlnaHQsIHRoaXMueSArIGNhcmV0UGFkZGluZyArIHRoaXMuY2FyZXRIZWlnaHQpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8odGhpcy54IC0gdGhpcy5jYXJldEhlaWdodCwgdGhpcy55ICsgY2FyZXRQYWRkaW5nICsgdGhpcy5jYXJldEhlaWdodCk7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzd2l0Y2godGhpcy54QWxpZ24pXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBcImxlZnRcIjpcblx0XHRcdFx0XHR0b29sdGlwWCA9IHRoaXMueCAtIHRvb2x0aXBXaWR0aCArICh0aGlzLmNvcm5lclJhZGl1cyArIHRoaXMuY2FyZXRIZWlnaHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdFx0XHR0b29sdGlwWCA9IHRoaXMueCAtICh0aGlzLmNvcm5lclJhZGl1cyArIHRoaXMuY2FyZXRIZWlnaHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHJhd1JvdW5kZWRSZWN0YW5nbGUoY3R4LHRvb2x0aXBYLHRvb2x0aXBZLHRvb2x0aXBXaWR0aCx0b29sdGlwUmVjdEhlaWdodCx0aGlzLmNvcm5lclJhZGl1cyk7XG5cblx0XHRcdFx0Y3R4LmZpbGwoKTtcblxuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy50ZXh0Q29sb3I7XG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMudGV4dCwgdG9vbHRpcFggKyB0b29sdGlwV2lkdGgvMiwgdG9vbHRpcFkgKyB0b29sdGlwUmVjdEhlaWdodC8yKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0Lk11bHRpVG9vbHRpcCA9IENoYXJ0LkVsZW1lbnQuZXh0ZW5kKHtcblx0XHRpbml0aWFsaXplIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuZm9udCA9IGZvbnRTdHJpbmcodGhpcy5mb250U2l6ZSx0aGlzLmZvbnRTdHlsZSx0aGlzLmZvbnRGYW1pbHkpO1xuXG5cdFx0XHR0aGlzLnRpdGxlRm9udCA9IGZvbnRTdHJpbmcodGhpcy50aXRsZUZvbnRTaXplLHRoaXMudGl0bGVGb250U3R5bGUsdGhpcy50aXRsZUZvbnRGYW1pbHkpO1xuXG5cdFx0XHR0aGlzLnRpdGxlSGVpZ2h0ID0gdGhpcy50aXRsZSA/IHRoaXMudGl0bGVGb250U2l6ZSAqIDEuNSA6IDA7XG5cdFx0XHR0aGlzLmhlaWdodCA9ICh0aGlzLmxhYmVscy5sZW5ndGggKiB0aGlzLmZvbnRTaXplKSArICgodGhpcy5sYWJlbHMubGVuZ3RoLTEpICogKHRoaXMuZm9udFNpemUvMikpICsgKHRoaXMueVBhZGRpbmcqMikgKyB0aGlzLnRpdGxlSGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmN0eC5mb250ID0gdGhpcy50aXRsZUZvbnQ7XG5cblx0XHRcdHZhciB0aXRsZVdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGhpcy50aXRsZSkud2lkdGgsXG5cdFx0XHRcdC8vTGFiZWwgaGFzIGEgbGVnZW5kIHNxdWFyZSBhcyB3ZWxsIHNvIGFjY291bnQgZm9yIHRoaXMuXG5cdFx0XHRcdGxhYmVsV2lkdGggPSBsb25nZXN0VGV4dCh0aGlzLmN0eCx0aGlzLmZvbnQsdGhpcy5sYWJlbHMpICsgdGhpcy5mb250U2l6ZSArIDMsXG5cdFx0XHRcdGxvbmdlc3RUZXh0V2lkdGggPSBtYXgoW2xhYmVsV2lkdGgsdGl0bGVXaWR0aF0pO1xuXG5cdFx0XHR0aGlzLndpZHRoID0gbG9uZ2VzdFRleHRXaWR0aCArICh0aGlzLnhQYWRkaW5nKjIpO1xuXG5cblx0XHRcdHZhciBoYWxmSGVpZ2h0ID0gdGhpcy5oZWlnaHQvMjtcblxuXHRcdFx0Ly9DaGVjayB0byBlbnN1cmUgdGhlIGhlaWdodCB3aWxsIGZpdCBvbiB0aGUgY2FudmFzXG5cdFx0XHRpZiAodGhpcy55IC0gaGFsZkhlaWdodCA8IDAgKXtcblx0XHRcdFx0dGhpcy55ID0gaGFsZkhlaWdodDtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy55ICsgaGFsZkhlaWdodCA+IHRoaXMuY2hhcnQuaGVpZ2h0KXtcblx0XHRcdFx0dGhpcy55ID0gdGhpcy5jaGFydC5oZWlnaHQgLSBoYWxmSGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHQvL0RlY2lkZSB3aGV0aGVyIHRvIGFsaWduIGxlZnQgb3IgcmlnaHQgYmFzZWQgb24gcG9zaXRpb24gb24gY2FudmFzXG5cdFx0XHRpZiAodGhpcy54ID4gdGhpcy5jaGFydC53aWR0aC8yKXtcblx0XHRcdFx0dGhpcy54IC09IHRoaXMueE9mZnNldCArIHRoaXMud2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnggKz0gdGhpcy54T2Zmc2V0O1xuXHRcdFx0fVxuXG5cblx0XHR9LFxuXHRcdGdldExpbmVIZWlnaHQgOiBmdW5jdGlvbihpbmRleCl7XG5cdFx0XHR2YXIgYmFzZUxpbmVIZWlnaHQgPSB0aGlzLnkgLSAodGhpcy5oZWlnaHQvMikgKyB0aGlzLnlQYWRkaW5nLFxuXHRcdFx0XHRhZnRlclRpdGxlSW5kZXggPSBpbmRleC0xO1xuXG5cdFx0XHQvL0lmIHRoZSBpbmRleCBpcyB6ZXJvLCB3ZSdyZSBnZXR0aW5nIHRoZSB0aXRsZVxuXHRcdFx0aWYgKGluZGV4ID09PSAwKXtcblx0XHRcdFx0cmV0dXJuIGJhc2VMaW5lSGVpZ2h0ICsgdGhpcy50aXRsZUhlaWdodCAvIDM7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdHJldHVybiBiYXNlTGluZUhlaWdodCArICgodGhpcy5mb250U2l6ZSAqIDEuNSAqIGFmdGVyVGl0bGVJbmRleCkgKyB0aGlzLmZvbnRTaXplIC8gMikgKyB0aGlzLnRpdGxlSGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oKXtcblx0XHRcdC8vIEN1c3RvbSBUb29sdGlwc1xuXHRcdFx0aWYodGhpcy5jdXN0b20pe1xuXHRcdFx0XHR0aGlzLmN1c3RvbSh0aGlzKTtcblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdGRyYXdSb3VuZGVkUmVjdGFuZ2xlKHRoaXMuY3R4LHRoaXMueCx0aGlzLnkgLSB0aGlzLmhlaWdodC8yLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsdGhpcy5jb3JuZXJSYWRpdXMpO1xuXHRcdFx0XHR2YXIgY3R4ID0gdGhpcy5jdHg7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxDb2xvcjtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcblx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLnRpdGxlVGV4dENvbG9yO1xuXHRcdFx0XHRjdHguZm9udCA9IHRoaXMudGl0bGVGb250O1xuXG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLnRpdGxlLHRoaXMueCArIHRoaXMueFBhZGRpbmcsIHRoaXMuZ2V0TGluZUhlaWdodCgwKSk7XG5cblx0XHRcdFx0Y3R4LmZvbnQgPSB0aGlzLmZvbnQ7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmxhYmVscyxmdW5jdGlvbihsYWJlbCxpbmRleCl7XG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dENvbG9yO1xuXHRcdFx0XHRcdGN0eC5maWxsVGV4dChsYWJlbCx0aGlzLnggKyB0aGlzLnhQYWRkaW5nICsgdGhpcy5mb250U2l6ZSArIDMsIHRoaXMuZ2V0TGluZUhlaWdodChpbmRleCArIDEpKTtcblxuXHRcdFx0XHRcdC8vQSBiaXQgZ25hcmx5LCBidXQgY2xlYXJpbmcgdGhpcyByZWN0YW5nbGUgYnJlYWtzIHdoZW4gdXNpbmcgZXhwbG9yZXJjYW52YXMgKGNsZWFycyB3aG9sZSBjYW52YXMpXG5cdFx0XHRcdFx0Ly9jdHguY2xlYXJSZWN0KHRoaXMueCArIHRoaXMueFBhZGRpbmcsIHRoaXMuZ2V0TGluZUhlaWdodChpbmRleCArIDEpIC0gdGhpcy5mb250U2l6ZS8yLCB0aGlzLmZvbnRTaXplLCB0aGlzLmZvbnRTaXplKTtcblx0XHRcdFx0XHQvL0luc3RlYWQgd2UnbGwgbWFrZSBhIHdoaXRlIGZpbGxlZCBibG9jayB0byBwdXQgdGhlIGxlZ2VuZENvbG91ciBwYWxldHRlIG92ZXIuXG5cblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5sZWdlbmRDb2xvckJhY2tncm91bmQ7XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHRoaXMueCArIHRoaXMueFBhZGRpbmcsIHRoaXMuZ2V0TGluZUhlaWdodChpbmRleCArIDEpIC0gdGhpcy5mb250U2l6ZS8yLCB0aGlzLmZvbnRTaXplLCB0aGlzLmZvbnRTaXplKTtcblxuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmxlZ2VuZENvbG9yc1tpbmRleF0uZmlsbDtcblx0XHRcdFx0XHRjdHguZmlsbFJlY3QodGhpcy54ICsgdGhpcy54UGFkZGluZywgdGhpcy5nZXRMaW5lSGVpZ2h0KGluZGV4ICsgMSkgLSB0aGlzLmZvbnRTaXplLzIsIHRoaXMuZm9udFNpemUsIHRoaXMuZm9udFNpemUpO1xuXG5cblx0XHRcdFx0fSx0aGlzKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LlNjYWxlID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGluaXRpYWxpemUgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5maXQoKTtcblx0XHR9LFxuXHRcdGJ1aWxkWUxhYmVscyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnlMYWJlbHMgPSBbXTtcblxuXHRcdFx0dmFyIHN0ZXBEZWNpbWFsUGxhY2VzID0gZ2V0RGVjaW1hbFBsYWNlcyh0aGlzLnN0ZXBWYWx1ZSk7XG5cblx0XHRcdGZvciAodmFyIGk9MDsgaTw9dGhpcy5zdGVwczsgaSsrKXtcblx0XHRcdFx0dGhpcy55TGFiZWxzLnB1c2godGVtcGxhdGUodGhpcy50ZW1wbGF0ZVN0cmluZyx7dmFsdWU6KHRoaXMubWluICsgKGkgKiB0aGlzLnN0ZXBWYWx1ZSkpLnRvRml4ZWQoc3RlcERlY2ltYWxQbGFjZXMpfSkpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy55TGFiZWxXaWR0aCA9ICh0aGlzLmRpc3BsYXkgJiYgdGhpcy5zaG93TGFiZWxzKSA/IGxvbmdlc3RUZXh0KHRoaXMuY3R4LHRoaXMuZm9udCx0aGlzLnlMYWJlbHMpICsgMTAgOiAwO1xuXHRcdH0sXG5cdFx0YWRkWExhYmVsIDogZnVuY3Rpb24obGFiZWwpe1xuXHRcdFx0dGhpcy54TGFiZWxzLnB1c2gobGFiZWwpO1xuXHRcdFx0dGhpcy52YWx1ZXNDb3VudCsrO1xuXHRcdFx0dGhpcy5maXQoKTtcblx0XHR9LFxuXHRcdHJlbW92ZVhMYWJlbCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnhMYWJlbHMuc2hpZnQoKTtcblx0XHRcdHRoaXMudmFsdWVzQ291bnQtLTtcblx0XHRcdHRoaXMuZml0KCk7XG5cdFx0fSxcblx0XHQvLyBGaXR0aW5nIGxvb3AgdG8gcm90YXRlIHggTGFiZWxzIGFuZCBmaWd1cmUgb3V0IHdoYXQgZml0cyB0aGVyZSwgYW5kIGFsc28gY2FsY3VsYXRlIGhvdyBtYW55IFkgc3RlcHMgdG8gdXNlXG5cdFx0Zml0OiBmdW5jdGlvbigpe1xuXHRcdFx0Ly8gRmlyc3Qgd2UgbmVlZCB0aGUgd2lkdGggb2YgdGhlIHlMYWJlbHMsIGFzc3VtaW5nIHRoZSB4TGFiZWxzIGFyZW4ndCByb3RhdGVkXG5cblx0XHRcdC8vIFRvIGRvIHRoYXQgd2UgbmVlZCB0aGUgYmFzZSBsaW5lIGF0IHRoZSB0b3AgYW5kIGJhc2Ugb2YgdGhlIGNoYXJ0LCBhc3N1bWluZyB0aGVyZSBpcyBubyB4IGxhYmVsIHJvdGF0aW9uXG5cdFx0XHR0aGlzLnN0YXJ0UG9pbnQgPSAodGhpcy5kaXNwbGF5KSA/IHRoaXMuZm9udFNpemUgOiAwO1xuXHRcdFx0dGhpcy5lbmRQb2ludCA9ICh0aGlzLmRpc3BsYXkpID8gdGhpcy5oZWlnaHQgLSAodGhpcy5mb250U2l6ZSAqIDEuNSkgLSA1IDogdGhpcy5oZWlnaHQ7IC8vIC01IHRvIHBhZCBsYWJlbHNcblxuXHRcdFx0Ly8gQXBwbHkgcGFkZGluZyBzZXR0aW5ncyB0byB0aGUgc3RhcnQgYW5kIGVuZCBwb2ludC5cblx0XHRcdHRoaXMuc3RhcnRQb2ludCArPSB0aGlzLnBhZGRpbmc7XG5cdFx0XHR0aGlzLmVuZFBvaW50IC09IHRoaXMucGFkZGluZztcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHN0YXJ0aW5nIGVuZHBvaW50LCBleGNsdWRpbmcgdGhlIHNwYWNlIGZvciB4IGxhYmVsc1xuXHRcdFx0dmFyIGNhY2hlZEVuZFBvaW50ID0gdGhpcy5lbmRQb2ludDtcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHN0YXJ0aW5nIGhlaWdodCwgc28gY2FuIGRldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoZSBzY2FsZSB5QXhpc1xuXHRcdFx0dmFyIGNhY2hlZEhlaWdodCA9IHRoaXMuZW5kUG9pbnQgLSB0aGlzLnN0YXJ0UG9pbnQsXG5cdFx0XHRcdGNhY2hlZFlMYWJlbFdpZHRoO1xuXG5cdFx0XHQvLyBCdWlsZCB0aGUgY3VycmVudCB5TGFiZWxzIHNvIHdlIGhhdmUgYW4gaWRlYSBvZiB3aGF0IHNpemUgdGhleSdsbCBiZSB0byBzdGFydFxuXHRcdFx0Lypcblx0XHRcdCAqXHRUaGlzIHNldHMgd2hhdCBpcyByZXR1cm5lZCBmcm9tIGNhbGN1bGF0ZVNjYWxlUmFuZ2UgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhpcyBjbGFzczpcblx0XHRcdCAqXG5cdFx0XHRcdHRoaXMuc3RlcHM7XG5cdFx0XHRcdHRoaXMuc3RlcFZhbHVlO1xuXHRcdFx0XHR0aGlzLm1pbjtcblx0XHRcdFx0dGhpcy5tYXg7XG5cdFx0XHQgKlxuXHRcdFx0ICovXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZVlSYW5nZShjYWNoZWRIZWlnaHQpO1xuXG5cdFx0XHQvLyBXaXRoIHRoZXNlIHByb3BlcnRpZXMgc2V0IHdlIGNhbiBub3cgYnVpbGQgdGhlIGFycmF5IG9mIHlMYWJlbHNcblx0XHRcdC8vIGFuZCBhbHNvIHRoZSB3aWR0aCBvZiB0aGUgbGFyZ2VzdCB5TGFiZWxcblx0XHRcdHRoaXMuYnVpbGRZTGFiZWxzKCk7XG5cblx0XHRcdHRoaXMuY2FsY3VsYXRlWExhYmVsUm90YXRpb24oKTtcblxuXHRcdFx0d2hpbGUoKGNhY2hlZEhlaWdodCA+IHRoaXMuZW5kUG9pbnQgLSB0aGlzLnN0YXJ0UG9pbnQpKXtcblx0XHRcdFx0Y2FjaGVkSGVpZ2h0ID0gdGhpcy5lbmRQb2ludCAtIHRoaXMuc3RhcnRQb2ludDtcblx0XHRcdFx0Y2FjaGVkWUxhYmVsV2lkdGggPSB0aGlzLnlMYWJlbFdpZHRoO1xuXG5cdFx0XHRcdHRoaXMuY2FsY3VsYXRlWVJhbmdlKGNhY2hlZEhlaWdodCk7XG5cdFx0XHRcdHRoaXMuYnVpbGRZTGFiZWxzKCk7XG5cblx0XHRcdFx0Ly8gT25seSBnbyB0aHJvdWdoIHRoZSB4TGFiZWwgbG9vcCBhZ2FpbiBpZiB0aGUgeUxhYmVsIHdpZHRoIGhhcyBjaGFuZ2VkXG5cdFx0XHRcdGlmIChjYWNoZWRZTGFiZWxXaWR0aCA8IHRoaXMueUxhYmVsV2lkdGgpe1xuXHRcdFx0XHRcdHRoaXMuZW5kUG9pbnQgPSBjYWNoZWRFbmRQb2ludDtcblx0XHRcdFx0XHR0aGlzLmNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlWExhYmVsUm90YXRpb24gOiBmdW5jdGlvbigpe1xuXHRcdFx0Ly9HZXQgdGhlIHdpZHRoIG9mIGVhY2ggZ3JpZCBieSBjYWxjdWxhdGluZyB0aGUgZGlmZmVyZW5jZVxuXHRcdFx0Ly9iZXR3ZWVuIHggb2Zmc2V0cyBiZXR3ZWVuIDAgYW5kIDEuXG5cblx0XHRcdHRoaXMuY3R4LmZvbnQgPSB0aGlzLmZvbnQ7XG5cblx0XHRcdHZhciBmaXJzdFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGhpcy54TGFiZWxzWzBdKS53aWR0aCxcblx0XHRcdFx0bGFzdFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGhpcy54TGFiZWxzW3RoaXMueExhYmVscy5sZW5ndGggLSAxXSkud2lkdGgsXG5cdFx0XHRcdGZpcnN0Um90YXRlZCxcblx0XHRcdFx0bGFzdFJvdGF0ZWQ7XG5cblxuXHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nUmlnaHQgPSBsYXN0V2lkdGgvMiArIDM7XG5cdFx0XHR0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0ID0gKGZpcnN0V2lkdGgvMiA+IHRoaXMueUxhYmVsV2lkdGgpID8gZmlyc3RXaWR0aC8yIDogdGhpcy55TGFiZWxXaWR0aDtcblxuXHRcdFx0dGhpcy54TGFiZWxSb3RhdGlvbiA9IDA7XG5cdFx0XHRpZiAodGhpcy5kaXNwbGF5KXtcblx0XHRcdFx0dmFyIG9yaWdpbmFsTGFiZWxXaWR0aCA9IGxvbmdlc3RUZXh0KHRoaXMuY3R4LHRoaXMuZm9udCx0aGlzLnhMYWJlbHMpLFxuXHRcdFx0XHRcdGNvc1JvdGF0aW9uLFxuXHRcdFx0XHRcdGZpcnN0Um90YXRlZFdpZHRoO1xuXHRcdFx0XHR0aGlzLnhMYWJlbFdpZHRoID0gb3JpZ2luYWxMYWJlbFdpZHRoO1xuXHRcdFx0XHQvL0FsbG93IDMgcGl4ZWxzIHgyIHBhZGRpbmcgZWl0aGVyIHNpZGUgZm9yIGxhYmVsIHJlYWRhYmlsaXR5XG5cdFx0XHRcdHZhciB4R3JpZFdpZHRoID0gTWF0aC5mbG9vcih0aGlzLmNhbGN1bGF0ZVgoMSkgLSB0aGlzLmNhbGN1bGF0ZVgoMCkpIC0gNjtcblxuXHRcdFx0XHQvL01heCBsYWJlbCByb3RhdGUgc2hvdWxkIGJlIDkwIC0gYWxzbyBhY3QgYXMgYSBsb29wIGNvdW50ZXJcblx0XHRcdFx0d2hpbGUgKCh0aGlzLnhMYWJlbFdpZHRoID4geEdyaWRXaWR0aCAmJiB0aGlzLnhMYWJlbFJvdGF0aW9uID09PSAwKSB8fCAodGhpcy54TGFiZWxXaWR0aCA+IHhHcmlkV2lkdGggJiYgdGhpcy54TGFiZWxSb3RhdGlvbiA8PSA5MCAmJiB0aGlzLnhMYWJlbFJvdGF0aW9uID4gMCkpe1xuXHRcdFx0XHRcdGNvc1JvdGF0aW9uID0gTWF0aC5jb3ModG9SYWRpYW5zKHRoaXMueExhYmVsUm90YXRpb24pKTtcblxuXHRcdFx0XHRcdGZpcnN0Um90YXRlZCA9IGNvc1JvdGF0aW9uICogZmlyc3RXaWR0aDtcblx0XHRcdFx0XHRsYXN0Um90YXRlZCA9IGNvc1JvdGF0aW9uICogbGFzdFdpZHRoO1xuXG5cdFx0XHRcdFx0Ly8gV2UncmUgcmlnaHQgYWxpZ25pbmcgdGhlIHRleHQgbm93LlxuXHRcdFx0XHRcdGlmIChmaXJzdFJvdGF0ZWQgKyB0aGlzLmZvbnRTaXplIC8gMiA+IHRoaXMueUxhYmVsV2lkdGgpe1xuXHRcdFx0XHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nTGVmdCA9IGZpcnN0Um90YXRlZCArIHRoaXMuZm9udFNpemUgLyAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCA9IHRoaXMuZm9udFNpemUvMjtcblxuXG5cdFx0XHRcdFx0dGhpcy54TGFiZWxSb3RhdGlvbisrO1xuXHRcdFx0XHRcdHRoaXMueExhYmVsV2lkdGggPSBjb3NSb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aDtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnhMYWJlbFJvdGF0aW9uID4gMCl7XG5cdFx0XHRcdFx0dGhpcy5lbmRQb2ludCAtPSBNYXRoLnNpbih0b1JhZGlhbnModGhpcy54TGFiZWxSb3RhdGlvbikpKm9yaWdpbmFsTGFiZWxXaWR0aCArIDM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdHRoaXMueExhYmVsV2lkdGggPSAwO1xuXHRcdFx0XHR0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCA9IHRoaXMucGFkZGluZztcblx0XHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nTGVmdCA9IHRoaXMucGFkZGluZztcblx0XHRcdH1cblxuXHRcdH0sXG5cdFx0Ly8gTmVlZHMgdG8gYmUgb3ZlcmlkZGVuIGluIGVhY2ggQ2hhcnQgdHlwZVxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIHBhc3MgYWxsIHRoZSBkYXRhIGludG8gdGhlIHNjYWxlIGNsYXNzXG5cdFx0Y2FsY3VsYXRlWVJhbmdlOiBub29wLFxuXHRcdGRyYXdpbmdBcmVhOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhcnRQb2ludCAtIHRoaXMuZW5kUG9pbnQ7XG5cdFx0fSxcblx0XHRjYWxjdWxhdGVZIDogZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0dmFyIHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhKCkgLyAodGhpcy5taW4gLSB0aGlzLm1heCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbmRQb2ludCAtIChzY2FsaW5nRmFjdG9yICogKHZhbHVlIC0gdGhpcy5taW4pKTtcblx0XHR9LFxuXHRcdGNhbGN1bGF0ZVggOiBmdW5jdGlvbihpbmRleCl7XG5cdFx0XHR2YXIgaXNSb3RhdGVkID0gKHRoaXMueExhYmVsUm90YXRpb24gPiAwKSxcblx0XHRcdFx0Ly8gaW5uZXJXaWR0aCA9ICh0aGlzLm9mZnNldEdyaWRMaW5lcykgPyB0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCAtIHRoaXMucGFkZGluZyA6IHRoaXMud2lkdGggLSAob2Zmc2V0TGVmdCArIGhhbGZMYWJlbFdpZHRoICogMikgLSB0aGlzLnBhZGRpbmcsXG5cdFx0XHRcdGlubmVyV2lkdGggPSB0aGlzLndpZHRoIC0gKHRoaXMueFNjYWxlUGFkZGluZ0xlZnQgKyB0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCksXG5cdFx0XHRcdHZhbHVlV2lkdGggPSBpbm5lcldpZHRoL01hdGgubWF4KCh0aGlzLnZhbHVlc0NvdW50IC0gKCh0aGlzLm9mZnNldEdyaWRMaW5lcykgPyAwIDogMSkpLCAxKSxcblx0XHRcdFx0dmFsdWVPZmZzZXQgPSAodmFsdWVXaWR0aCAqIGluZGV4KSArIHRoaXMueFNjYWxlUGFkZGluZ0xlZnQ7XG5cblx0XHRcdGlmICh0aGlzLm9mZnNldEdyaWRMaW5lcyl7XG5cdFx0XHRcdHZhbHVlT2Zmc2V0ICs9ICh2YWx1ZVdpZHRoLzIpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZU9mZnNldCk7XG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbihuZXdQcm9wcyl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLCBuZXdQcm9wcyk7XG5cdFx0XHR0aGlzLmZpdCgpO1xuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jdHgsXG5cdFx0XHRcdHlMYWJlbEdhcCA9ICh0aGlzLmVuZFBvaW50IC0gdGhpcy5zdGFydFBvaW50KSAvIHRoaXMuc3RlcHMsXG5cdFx0XHRcdHhTdGFydCA9IE1hdGgucm91bmQodGhpcy54U2NhbGVQYWRkaW5nTGVmdCk7XG5cdFx0XHRpZiAodGhpcy5kaXNwbGF5KXtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dENvbG9yO1xuXHRcdFx0XHRjdHguZm9udCA9IHRoaXMuZm9udDtcblx0XHRcdFx0ZWFjaCh0aGlzLnlMYWJlbHMsZnVuY3Rpb24obGFiZWxTdHJpbmcsaW5kZXgpe1xuXHRcdFx0XHRcdHZhciB5TGFiZWxDZW50ZXIgPSB0aGlzLmVuZFBvaW50IC0gKHlMYWJlbEdhcCAqIGluZGV4KSxcblx0XHRcdFx0XHRcdGxpbmVQb3NpdGlvblkgPSBNYXRoLnJvdW5kKHlMYWJlbENlbnRlciksXG5cdFx0XHRcdFx0XHRkcmF3SG9yaXpvbnRhbExpbmUgPSB0aGlzLnNob3dIb3Jpem9udGFsTGluZXM7XG5cblx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gXCJyaWdodFwiO1xuXHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuXHRcdFx0XHRcdGlmICh0aGlzLnNob3dMYWJlbHMpe1xuXHRcdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsU3RyaW5nLHhTdGFydCAtIDEwLHlMYWJlbENlbnRlcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBYIGF4aXMsIHNvIGRyYXcgaXRcblx0XHRcdFx0XHRpZiAoaW5kZXggPT09IDAgJiYgIWRyYXdIb3Jpem9udGFsTGluZSl7XG5cdFx0XHRcdFx0XHRkcmF3SG9yaXpvbnRhbExpbmUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkcmF3SG9yaXpvbnRhbExpbmUpe1xuXHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChpbmRleCA+IDApe1xuXHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIGdyaWQgbGluZSBpbiB0aGUgY2VudHJlLCBzbyBkcm9wIHRoYXRcblx0XHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmdyaWRMaW5lV2lkdGg7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmdyaWRMaW5lQ29sb3I7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgdGhlIGZpcnN0IGxpbmUgb24gdGhlIHNjYWxlXG5cdFx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmxpbmVDb2xvcjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsaW5lUG9zaXRpb25ZICs9IGhlbHBlcnMuYWxpYXNQaXhlbChjdHgubGluZVdpZHRoKTtcblxuXHRcdFx0XHRcdGlmKGRyYXdIb3Jpem9udGFsTGluZSl7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHhTdGFydCwgbGluZVBvc2l0aW9uWSk7XG5cdFx0XHRcdFx0XHRjdHgubGluZVRvKHRoaXMud2lkdGgsIGxpbmVQb3NpdGlvblkpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDtcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmxpbmVDb2xvcjtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4U3RhcnQgLSA1LCBsaW5lUG9zaXRpb25ZKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHhTdGFydCwgbGluZVBvc2l0aW9uWSk7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblxuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHRcdGVhY2godGhpcy54TGFiZWxzLGZ1bmN0aW9uKGxhYmVsLGluZGV4KXtcblx0XHRcdFx0XHR2YXIgeFBvcyA9IHRoaXMuY2FsY3VsYXRlWChpbmRleCkgKyBhbGlhc1BpeGVsKHRoaXMubGluZVdpZHRoKSxcblx0XHRcdFx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBsaW5lL2JhciBoZXJlIGFuZCBkZWNpZGUgd2hlcmUgdG8gcGxhY2UgdGhlIGxpbmVcblx0XHRcdFx0XHRcdGxpbmVQb3MgPSB0aGlzLmNhbGN1bGF0ZVgoaW5kZXggLSAodGhpcy5vZmZzZXRHcmlkTGluZXMgPyAwLjUgOiAwKSkgKyBhbGlhc1BpeGVsKHRoaXMubGluZVdpZHRoKSxcblx0XHRcdFx0XHRcdGlzUm90YXRlZCA9ICh0aGlzLnhMYWJlbFJvdGF0aW9uID4gMCksXG5cdFx0XHRcdFx0XHRkcmF3VmVydGljYWxMaW5lID0gdGhpcy5zaG93VmVydGljYWxMaW5lcztcblxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgWSBheGlzLCBzbyBkcmF3IGl0XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSAwICYmICFkcmF3VmVydGljYWxMaW5lKXtcblx0XHRcdFx0XHRcdGRyYXdWZXJ0aWNhbExpbmUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkcmF3VmVydGljYWxMaW5lKXtcblx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoaW5kZXggPiAwKXtcblx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBncmlkIGxpbmUgaW4gdGhlIGNlbnRyZSwgc28gZHJvcCB0aGF0XG5cdFx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5ncmlkTGluZVdpZHRoO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5ncmlkTGluZUNvbG9yO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIHRoZSBmaXJzdCBsaW5lIG9uIHRoZSBzY2FsZVxuXHRcdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5saW5lQ29sb3I7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRyYXdWZXJ0aWNhbExpbmUpe1xuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyhsaW5lUG9zLHRoaXMuZW5kUG9pbnQpO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhsaW5lUG9zLHRoaXMuc3RhcnRQb2ludCAtIDMpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuXHRcdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMubGluZUNvbG9yO1xuXG5cblx0XHRcdFx0XHQvLyBTbWFsbCBsaW5lcyBhdCB0aGUgYm90dG9tIG9mIHRoZSBiYXNlIGdyaWQgbGluZVxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGxpbmVQb3MsdGhpcy5lbmRQb2ludCk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhsaW5lUG9zLHRoaXMuZW5kUG9pbnQgKyA1KTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXG5cdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0XHRjdHgudHJhbnNsYXRlKHhQb3MsKGlzUm90YXRlZCkgPyB0aGlzLmVuZFBvaW50ICsgMTIgOiB0aGlzLmVuZFBvaW50ICsgOCk7XG5cdFx0XHRcdFx0Y3R4LnJvdGF0ZSh0b1JhZGlhbnModGhpcy54TGFiZWxSb3RhdGlvbikqLTEpO1xuXHRcdFx0XHRcdGN0eC5mb250ID0gdGhpcy5mb250O1xuXHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAoaXNSb3RhdGVkKSA/IFwicmlnaHRcIiA6IFwiY2VudGVyXCI7XG5cdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9IChpc1JvdGF0ZWQpID8gXCJtaWRkbGVcIiA6IFwidG9wXCI7XG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCAwLCAwKTtcblx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0pO1xuXG5cdENoYXJ0LlJhZGlhbFNjYWxlID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnNpemUgPSBtaW4oW3RoaXMuaGVpZ2h0LCB0aGlzLndpZHRoXSk7XG5cdFx0XHR0aGlzLmRyYXdpbmdBcmVhID0gKHRoaXMuZGlzcGxheSkgPyAodGhpcy5zaXplLzIpIC0gKHRoaXMuZm9udFNpemUvMiArIHRoaXMuYmFja2Ryb3BQYWRkaW5nWSkgOiAodGhpcy5zaXplLzIpO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlQ2VudGVyT2Zmc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHQvLyBUYWtlIGludG8gYWNjb3VudCBoYWxmIGZvbnQgc2l6ZSArIHRoZSB5UGFkZGluZyBvZiB0aGUgdG9wIHZhbHVlXG5cdFx0XHR2YXIgc2NhbGluZ0ZhY3RvciA9IHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG5cblx0XHRcdHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdGlmICghdGhpcy5saW5lQXJjKXtcblx0XHRcdFx0dGhpcy5zZXRTY2FsZVNpemUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZHJhd2luZ0FyZWEgPSAodGhpcy5kaXNwbGF5KSA/ICh0aGlzLnNpemUvMikgLSAodGhpcy5mb250U2l6ZS8yICsgdGhpcy5iYWNrZHJvcFBhZGRpbmdZKSA6ICh0aGlzLnNpemUvMik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmJ1aWxkWUxhYmVscygpO1xuXHRcdH0sXG5cdFx0YnVpbGRZTGFiZWxzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy55TGFiZWxzID0gW107XG5cblx0XHRcdHZhciBzdGVwRGVjaW1hbFBsYWNlcyA9IGdldERlY2ltYWxQbGFjZXModGhpcy5zdGVwVmFsdWUpO1xuXG5cdFx0XHRmb3IgKHZhciBpPTA7IGk8PXRoaXMuc3RlcHM7IGkrKyl7XG5cdFx0XHRcdHRoaXMueUxhYmVscy5wdXNoKHRlbXBsYXRlKHRoaXMudGVtcGxhdGVTdHJpbmcse3ZhbHVlOih0aGlzLm1pbiArIChpICogdGhpcy5zdGVwVmFsdWUpKS50b0ZpeGVkKHN0ZXBEZWNpbWFsUGxhY2VzKX0pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGdldENpcmN1bWZlcmVuY2UgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuICgoTWF0aC5QSSoyKSAvIHRoaXMudmFsdWVzQ291bnQpO1xuXHRcdH0sXG5cdFx0c2V0U2NhbGVTaXplOiBmdW5jdGlvbigpe1xuXHRcdFx0Lypcblx0XHRcdCAqIFJpZ2h0LCB0aGlzIGlzIHJlYWxseSBjb25mdXNpbmcgYW5kIHRoZXJlIGlzIGEgbG90IG9mIG1hdGhzIGdvaW5nIG9uIGhlcmVcblx0XHRcdCAqIFRoZSBnaXN0IG9mIHRoZSBwcm9ibGVtIGlzIGhlcmU6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25ubmljay82OTZjYzljNTVmNGIwYmViOGZlOVxuXHRcdFx0ICpcblx0XHRcdCAqIFJlYWN0aW9uOiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My90b29tdWNoc2NpZW5jZS5naWZcblx0XHRcdCAqXG5cdFx0XHQgKiBTb2x1dGlvbjpcblx0XHRcdCAqXG5cdFx0XHQgKiBXZSBhc3N1bWUgdGhlIHJhZGl1cyBvZiB0aGUgcG9seWdvbiBpcyBoYWxmIHRoZSBzaXplIG9mIHRoZSBjYW52YXMgYXQgZmlyc3Rcblx0XHRcdCAqIGF0IGVhY2ggaW5kZXggd2UgY2hlY2sgaWYgdGhlIHRleHQgb3ZlcmxhcHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogV2hlcmUgaXQgZG9lcywgd2Ugc3RvcmUgdGhhdCBhbmdsZSBhbmQgdGhhdCBpbmRleC5cblx0XHRcdCAqXG5cdFx0XHQgKiBBZnRlciBmaW5kaW5nIHRoZSBsYXJnZXN0IGluZGV4IGFuZCBhbmdsZSB3ZSBjYWxjdWxhdGUgaG93IG11Y2ggd2UgbmVlZCB0byByZW1vdmVcblx0XHRcdCAqIGZyb20gdGhlIHNoYXBlIHJhZGl1cyB0byBtb3ZlIHRoZSBwb2ludCBpbndhcmRzIGJ5IHRoYXQgeC5cblx0XHRcdCAqXG5cdFx0XHQgKiBXZSBhdmVyYWdlIHRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZXMgdG8gZ2V0IHRoZSBtYXhpbXVtIHNoYXBlIHJhZGl1cyB0aGF0IGNhbiBmaXQgaW4gdGhlIGJveFxuXHRcdFx0ICogYWxvbmcgd2l0aCBsYWJlbHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogT25jZSB3ZSBoYXZlIHRoYXQsIHdlIGNhbiBmaW5kIHRoZSBjZW50cmUgcG9pbnQgZm9yIHRoZSBjaGFydCwgYnkgdGFraW5nIHRoZSB4IHRleHQgcHJvdHJ1c2lvblxuXHRcdFx0ICogb24gZWFjaCBzaWRlLCByZW1vdmluZyB0aGF0IGZyb20gdGhlIHNpemUsIGhhbHZpbmcgaXQgYW5kIGFkZGluZyB0aGUgbGVmdCB4IHByb3RydXNpb24gd2lkdGguXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhpcyB3aWxsIG1lYW4gd2UgaGF2ZSBhIHNoYXBlIGZpdHRlZCB0byB0aGUgY2FudmFzLCBhcyBsYXJnZSBhcyBpdCBjYW4gYmUgd2l0aCB0aGUgbGFiZWxzXG5cdFx0XHQgKiBhbmQgcG9zaXRpb24gaXQgaW4gdGhlIG1vc3Qgc3BhY2UgZWZmaWNpZW50IG1hbm5lclxuXHRcdFx0ICpcblx0XHRcdCAqIGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM0NjAxMzYzL3llYWhzY2llbmNlLmdpZlxuXHRcdFx0ICovXG5cblxuXHRcdFx0Ly8gR2V0IG1heGltdW0gcmFkaXVzIG9mIHRoZSBwb2x5Z29uLiBFaXRoZXIgaGFsZiB0aGUgaGVpZ2h0IChtaW51cyB0aGUgdGV4dCB3aWR0aCkgb3IgaGFsZiB0aGUgd2lkdGguXG5cdFx0XHQvLyBVc2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCArIGNoYW5nZS4gLSBNYWtlIHN1cmUgTC9SIHByb3RydXNpb24gaXMgYXQgbGVhc3QgMCB0byBzdG9wIGlzc3VlcyB3aXRoIGNlbnRyZSBwb2ludHNcblx0XHRcdHZhciBsYXJnZXN0UG9zc2libGVSYWRpdXMgPSBtaW4oWyh0aGlzLmhlaWdodC8yIC0gdGhpcy5wb2ludExhYmVsRm9udFNpemUgLSA1KSwgdGhpcy53aWR0aC8yXSksXG5cdFx0XHRcdHBvaW50UG9zaXRpb24sXG5cdFx0XHRcdGksXG5cdFx0XHRcdHRleHRXaWR0aCxcblx0XHRcdFx0aGFsZlRleHRXaWR0aCxcblx0XHRcdFx0ZnVydGhlc3RSaWdodCA9IHRoaXMud2lkdGgsXG5cdFx0XHRcdGZ1cnRoZXN0UmlnaHRJbmRleCxcblx0XHRcdFx0ZnVydGhlc3RSaWdodEFuZ2xlLFxuXHRcdFx0XHRmdXJ0aGVzdExlZnQgPSAwLFxuXHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCxcblx0XHRcdFx0ZnVydGhlc3RMZWZ0QW5nbGUsXG5cdFx0XHRcdHhQcm90cnVzaW9uTGVmdCxcblx0XHRcdFx0eFByb3RydXNpb25SaWdodCxcblx0XHRcdFx0cmFkaXVzUmVkdWN0aW9uUmlnaHQsXG5cdFx0XHRcdHJhZGl1c1JlZHVjdGlvbkxlZnQsXG5cdFx0XHRcdG1heFdpZHRoUmFkaXVzO1xuXHRcdFx0dGhpcy5jdHguZm9udCA9IGZvbnRTdHJpbmcodGhpcy5wb2ludExhYmVsRm9udFNpemUsdGhpcy5wb2ludExhYmVsRm9udFN0eWxlLHRoaXMucG9pbnRMYWJlbEZvbnRGYW1pbHkpO1xuXHRcdFx0Zm9yIChpPTA7aTx0aGlzLnZhbHVlc0NvdW50O2krKyl7XG5cdFx0XHRcdC8vIDVweCB0byBzcGFjZSB0aGUgdGV4dCBzbGlnaHRseSBvdXQgLSBzaW1pbGFyIHRvIHdoYXQgd2UgZG8gaW4gdGhlIGRyYXcgZnVuY3Rpb24uXG5cdFx0XHRcdHBvaW50UG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgbGFyZ2VzdFBvc3NpYmxlUmFkaXVzKTtcblx0XHRcdFx0dGV4dFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGVtcGxhdGUodGhpcy50ZW1wbGF0ZVN0cmluZywgeyB2YWx1ZTogdGhpcy5sYWJlbHNbaV0gfSkpLndpZHRoICsgNTtcblx0XHRcdFx0aWYgKGkgPT09IDAgfHwgaSA9PT0gdGhpcy52YWx1ZXNDb3VudC8yKXtcblx0XHRcdFx0XHQvLyBJZiB3ZSdyZSBhdCBpbmRleCB6ZXJvLCBvciBleGFjdGx5IHRoZSBtaWRkbGUsIHdlJ3JlIGF0IGV4YWN0bHkgdGhlIHRvcC9ib3R0b21cblx0XHRcdFx0XHQvLyBvZiB0aGUgcmFkYXIgY2hhcnQsIHNvIHRleHQgd2lsbCBiZSBhbGlnbmVkIGNlbnRyYWxseSwgc28gd2UnbGwgaGFsZiBpdCBhbmQgY29tcGFyZVxuXHRcdFx0XHRcdC8vIHcvbGVmdCBhbmQgcmlnaHQgdGV4dCBzaXplc1xuXHRcdFx0XHRcdGhhbGZUZXh0V2lkdGggPSB0ZXh0V2lkdGgvMjtcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54ICsgaGFsZlRleHRXaWR0aCA+IGZ1cnRoZXN0UmlnaHQpIHtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0UmlnaHQgPSBwb2ludFBvc2l0aW9uLnggKyBoYWxmVGV4dFdpZHRoO1xuXHRcdFx0XHRcdFx0ZnVydGhlc3RSaWdodEluZGV4ID0gaTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBvaW50UG9zaXRpb24ueCAtIGhhbGZUZXh0V2lkdGggPCBmdXJ0aGVzdExlZnQpIHtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0TGVmdCA9IHBvaW50UG9zaXRpb24ueCAtIGhhbGZUZXh0V2lkdGg7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGkgPCB0aGlzLnZhbHVlc0NvdW50LzIpIHtcblx0XHRcdFx0XHQvLyBMZXNzIHRoYW4gaGFsZiB0aGUgdmFsdWVzIG1lYW5zIHdlJ2xsIGxlZnQgYWxpZ24gdGhlIHRleHRcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54ICsgdGV4dFdpZHRoID4gZnVydGhlc3RSaWdodCkge1xuXHRcdFx0XHRcdFx0ZnVydGhlc3RSaWdodCA9IHBvaW50UG9zaXRpb24ueCArIHRleHRXaWR0aDtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0UmlnaHRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGkgPiB0aGlzLnZhbHVlc0NvdW50LzIpe1xuXHRcdFx0XHRcdC8vIE1vcmUgdGhhbiBoYWxmIHRoZSB2YWx1ZXMgbWVhbnMgd2UnbGwgcmlnaHQgYWxpZ24gdGhlIHRleHRcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54IC0gdGV4dFdpZHRoIDwgZnVydGhlc3RMZWZ0KSB7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnQgPSBwb2ludFBvc2l0aW9uLnggLSB0ZXh0V2lkdGg7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHhQcm90cnVzaW9uTGVmdCA9IGZ1cnRoZXN0TGVmdDtcblxuXHRcdFx0eFByb3RydXNpb25SaWdodCA9IE1hdGguY2VpbChmdXJ0aGVzdFJpZ2h0IC0gdGhpcy53aWR0aCk7XG5cblx0XHRcdGZ1cnRoZXN0UmlnaHRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShmdXJ0aGVzdFJpZ2h0SW5kZXgpO1xuXG5cdFx0XHRmdXJ0aGVzdExlZnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShmdXJ0aGVzdExlZnRJbmRleCk7XG5cblx0XHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0geFByb3RydXNpb25SaWdodCAvIE1hdGguc2luKGZ1cnRoZXN0UmlnaHRBbmdsZSArIE1hdGguUEkvMik7XG5cblx0XHRcdHJhZGl1c1JlZHVjdGlvbkxlZnQgPSB4UHJvdHJ1c2lvbkxlZnQgLyBNYXRoLnNpbihmdXJ0aGVzdExlZnRBbmdsZSArIE1hdGguUEkvMik7XG5cblx0XHRcdC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiB0aGUgY2hhcnRcblx0XHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0gKGlzTnVtYmVyKHJhZGl1c1JlZHVjdGlvblJpZ2h0KSkgPyByYWRpdXNSZWR1Y3Rpb25SaWdodCA6IDA7XG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gKGlzTnVtYmVyKHJhZGl1c1JlZHVjdGlvbkxlZnQpKSA/IHJhZGl1c1JlZHVjdGlvbkxlZnQgOiAwO1xuXG5cdFx0XHR0aGlzLmRyYXdpbmdBcmVhID0gbGFyZ2VzdFBvc3NpYmxlUmFkaXVzIC0gKHJhZGl1c1JlZHVjdGlvbkxlZnQgKyByYWRpdXNSZWR1Y3Rpb25SaWdodCkvMjtcblxuXHRcdFx0Ly90aGlzLmRyYXdpbmdBcmVhID0gbWluKFttYXhXaWR0aFJhZGl1cywgKHRoaXMuaGVpZ2h0IC0gKDIgKiAodGhpcy5wb2ludExhYmVsRm9udFNpemUgKyA1KSkpLzJdKVxuXHRcdFx0dGhpcy5zZXRDZW50ZXJQb2ludChyYWRpdXNSZWR1Y3Rpb25MZWZ0LCByYWRpdXNSZWR1Y3Rpb25SaWdodCk7XG5cblx0XHR9LFxuXHRcdHNldENlbnRlclBvaW50OiBmdW5jdGlvbihsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQpe1xuXG5cdFx0XHR2YXIgbWF4UmlnaHQgPSB0aGlzLndpZHRoIC0gcmlnaHRNb3ZlbWVudCAtIHRoaXMuZHJhd2luZ0FyZWEsXG5cdFx0XHRcdG1heExlZnQgPSBsZWZ0TW92ZW1lbnQgKyB0aGlzLmRyYXdpbmdBcmVhO1xuXG5cdFx0XHR0aGlzLnhDZW50ZXIgPSAobWF4TGVmdCArIG1heFJpZ2h0KS8yO1xuXHRcdFx0Ly8gQWx3YXlzIHZlcnRpY2FsbHkgaW4gdGhlIGNlbnRyZSBhcyB0aGUgdGV4dCBoZWlnaHQgZG9lc24ndCBjaGFuZ2Vcblx0XHRcdHRoaXMueUNlbnRlciA9ICh0aGlzLmhlaWdodC8yKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW5kZXhBbmdsZSA6IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdHZhciBhbmdsZU11bHRpcGxpZXIgPSAoTWF0aC5QSSAqIDIpIC8gdGhpcy52YWx1ZXNDb3VudDtcblx0XHRcdC8vIFN0YXJ0IGZyb20gdGhlIHRvcCBpbnN0ZWFkIG9mIHJpZ2h0LCBzbyByZW1vdmUgYSBxdWFydGVyIG9mIHRoZSBjaXJjbGVcblxuXHRcdFx0cmV0dXJuIGluZGV4ICogYW5nbGVNdWx0aXBsaWVyIC0gKE1hdGguUEkvMik7XG5cdFx0fSxcblx0XHRnZXRQb2ludFBvc2l0aW9uIDogZnVuY3Rpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlcil7XG5cdFx0XHR2YXIgdGhpc0FuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHggOiAoTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyB0aGlzLnhDZW50ZXIsXG5cdFx0XHRcdHkgOiAoTWF0aC5zaW4odGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyB0aGlzLnlDZW50ZXJcblx0XHRcdH07XG5cdFx0fSxcblx0XHRkcmF3OiBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKHRoaXMuZGlzcGxheSl7XG5cdFx0XHRcdHZhciBjdHggPSB0aGlzLmN0eDtcblx0XHRcdFx0ZWFjaCh0aGlzLnlMYWJlbHMsIGZ1bmN0aW9uKGxhYmVsLCBpbmRleCl7XG5cdFx0XHRcdFx0Ly8gRG9uJ3QgZHJhdyBhIGNlbnRyZSB2YWx1ZVxuXHRcdFx0XHRcdGlmIChpbmRleCA+IDApe1xuXHRcdFx0XHRcdFx0dmFyIHlDZW50ZXJPZmZzZXQgPSBpbmRleCAqICh0aGlzLmRyYXdpbmdBcmVhL3RoaXMuc3RlcHMpLFxuXHRcdFx0XHRcdFx0XHR5SGVpZ2h0ID0gdGhpcy55Q2VudGVyIC0geUNlbnRlck9mZnNldCxcblx0XHRcdFx0XHRcdFx0cG9pbnRQb3NpdGlvbjtcblxuXHRcdFx0XHRcdFx0Ly8gRHJhdyBjaXJjdWxhciBsaW5lcyBhcm91bmQgdGhlIHNjYWxlXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5saW5lV2lkdGggPiAwKXtcblx0XHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5saW5lQ29sb3I7XG5cdFx0XHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDtcblxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLmxpbmVBcmMpe1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRcdFx0XHRjdHguYXJjKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyLCB5Q2VudGVyT2Zmc2V0LCAwLCBNYXRoLlBJKjIpO1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yICh2YXIgaT0wO2k8dGhpcy52YWx1ZXNDb3VudDtpKyspXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9pbnRQb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCB0aGlzLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0aGlzLm1pbiArIChpbmRleCAqIHRoaXMuc3RlcFZhbHVlKSkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IDApe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZih0aGlzLnNob3dMYWJlbHMpe1xuXHRcdFx0XHRcdFx0XHRjdHguZm9udCA9IGZvbnRTdHJpbmcodGhpcy5mb250U2l6ZSx0aGlzLmZvbnRTdHlsZSx0aGlzLmZvbnRGYW1pbHkpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5zaG93TGFiZWxCYWNrZHJvcCl7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGxhYmVsV2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmJhY2tkcm9wQ29sb3I7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KFxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy54Q2VudGVyIC0gbGFiZWxXaWR0aC8yIC0gdGhpcy5iYWNrZHJvcFBhZGRpbmdYLFxuXHRcdFx0XHRcdFx0XHRcdFx0eUhlaWdodCAtIHRoaXMuZm9udFNpemUvMiAtIHRoaXMuYmFja2Ryb3BQYWRkaW5nWSxcblx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsV2lkdGggKyB0aGlzLmJhY2tkcm9wUGFkZGluZ1gqMixcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZm9udFNpemUgKyB0aGlzLmJhY2tkcm9wUGFkZGluZ1kqMlxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcblx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuZm9udENvbG9yO1xuXHRcdFx0XHRcdFx0XHRjdHguZmlsbFRleHQobGFiZWwsIHRoaXMueENlbnRlciwgeUhlaWdodCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCB0aGlzKTtcblxuXHRcdFx0XHRpZiAoIXRoaXMubGluZUFyYyl7XG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuYW5nbGVMaW5lV2lkdGg7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5hbmdsZUxpbmVDb2xvcjtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gdGhpcy52YWx1ZXNDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0XHR2YXIgY2VudGVyT2Zmc2V0ID0gbnVsbCwgb3V0ZXJQb3NpdGlvbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGlmICh0aGlzLmFuZ2xlTGluZVdpZHRoID4gMCAmJiAoaSAlIHRoaXMuYW5nbGVMaW5lSW50ZXJ2YWwgPT09IDApKXtcblx0XHRcdFx0XHRcdFx0Y2VudGVyT2Zmc2V0ID0gdGhpcy5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodGhpcy5tYXgpO1xuXHRcdFx0XHRcdFx0XHRvdXRlclBvc2l0aW9uID0gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGksIGNlbnRlck9mZnNldCk7XG5cdFx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG5cdFx0XHRcdFx0XHRcdGN0eC5saW5lVG8ob3V0ZXJQb3NpdGlvbi54LCBvdXRlclBvc2l0aW9uLnkpO1xuXHRcdFx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuYmFja2dyb3VuZENvbG9ycyAmJiB0aGlzLmJhY2tncm91bmRDb2xvcnMubGVuZ3RoID09IHRoaXMudmFsdWVzQ291bnQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGNlbnRlck9mZnNldCA9PSBudWxsKVxuXHRcdFx0XHRcdFx0XHRcdGNlbnRlck9mZnNldCA9IHRoaXMuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHRoaXMubWF4KTtcblxuXHRcdFx0XHRcdFx0XHRpZiAob3V0ZXJQb3NpdGlvbiA9PSBudWxsKVxuXHRcdFx0XHRcdFx0XHRcdG91dGVyUG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgY2VudGVyT2Zmc2V0KTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgcHJldmlvdXNPdXRlclBvc2l0aW9uID0gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGkgPT09IDAgPyB0aGlzLnZhbHVlc0NvdW50IC0gMSA6IGkgLSAxLCBjZW50ZXJPZmZzZXQpO1xuXHRcdFx0XHRcdFx0XHR2YXIgbmV4dE91dGVyUG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSA9PT0gdGhpcy52YWx1ZXNDb3VudCAtIDEgPyAwIDogaSArIDEsIGNlbnRlck9mZnNldCk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHByZXZpb3VzT3V0ZXJIYWxmd2F5ID0geyB4OiAocHJldmlvdXNPdXRlclBvc2l0aW9uLnggKyBvdXRlclBvc2l0aW9uLngpIC8gMiwgeTogKHByZXZpb3VzT3V0ZXJQb3NpdGlvbi55ICsgb3V0ZXJQb3NpdGlvbi55KSAvIDIgfTtcblx0XHRcdFx0XHRcdFx0dmFyIG5leHRPdXRlckhhbGZ3YXkgPSB7IHg6IChvdXRlclBvc2l0aW9uLnggKyBuZXh0T3V0ZXJQb3NpdGlvbi54KSAvIDIsIHk6IChvdXRlclBvc2l0aW9uLnkgKyBuZXh0T3V0ZXJQb3NpdGlvbi55KSAvIDIgfTtcblxuXHRcdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8odGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuXHRcdFx0XHRcdFx0XHRjdHgubGluZVRvKHByZXZpb3VzT3V0ZXJIYWxmd2F5LngsIHByZXZpb3VzT3V0ZXJIYWxmd2F5LnkpO1xuXHRcdFx0XHRcdFx0XHRjdHgubGluZVRvKG91dGVyUG9zaXRpb24ueCwgb3V0ZXJQb3NpdGlvbi55KTtcblx0XHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhuZXh0T3V0ZXJIYWxmd2F5LngsIG5leHRPdXRlckhhbGZ3YXkueSk7XG5cdFx0XHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmJhY2tncm91bmRDb2xvcnNbaV07XG5cdFx0XHRcdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIEV4dHJhIDNweCBvdXQgZm9yIHNvbWUgbGFiZWwgc3BhY2luZ1xuXHRcdFx0XHRcdFx0dmFyIHBvaW50TGFiZWxQb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCB0aGlzLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0aGlzLm1heCkgKyA1KTtcblx0XHRcdFx0XHRcdGN0eC5mb250ID0gZm9udFN0cmluZyh0aGlzLnBvaW50TGFiZWxGb250U2l6ZSx0aGlzLnBvaW50TGFiZWxGb250U3R5bGUsdGhpcy5wb2ludExhYmVsRm9udEZhbWlseSk7XG5cdFx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5wb2ludExhYmVsRm9udENvbG9yO1xuXG5cdFx0XHRcdFx0XHR2YXIgbGFiZWxzQ291bnQgPSB0aGlzLmxhYmVscy5sZW5ndGgsXG5cdFx0XHRcdFx0XHRcdGhhbGZMYWJlbHNDb3VudCA9IHRoaXMubGFiZWxzLmxlbmd0aC8yLFxuXHRcdFx0XHRcdFx0XHRxdWFydGVyTGFiZWxzQ291bnQgPSBoYWxmTGFiZWxzQ291bnQvMixcblx0XHRcdFx0XHRcdFx0dXBwZXJIYWxmID0gKGkgPCBxdWFydGVyTGFiZWxzQ291bnQgfHwgaSA+IGxhYmVsc0NvdW50IC0gcXVhcnRlckxhYmVsc0NvdW50KSxcblx0XHRcdFx0XHRcdFx0ZXhhY3RRdWFydGVyID0gKGkgPT09IHF1YXJ0ZXJMYWJlbHNDb3VudCB8fCBpID09PSBsYWJlbHNDb3VudCAtIHF1YXJ0ZXJMYWJlbHNDb3VudCk7XG5cdFx0XHRcdFx0XHRpZiAoaSA9PT0gMCl7XG5cdFx0XHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihpID09PSBoYWxmTGFiZWxzQ291bnQpe1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPCBoYWxmTGFiZWxzQ291bnQpe1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdyaWdodCc7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFNldCB0aGUgY29ycmVjdCB0ZXh0IGJhc2VsaW5lIGJhc2VkIG9uIG91dGVyIHBvc2l0aW9uaW5nXG5cdFx0XHRcdFx0XHRpZiAoZXhhY3RRdWFydGVyKXtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh1cHBlckhhbGYpe1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLmxhYmVsc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uLngsIHBvaW50TGFiZWxQb3NpdGlvbi55KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LmFuaW1hdGlvblNlcnZpY2UgPSB7XG5cdFx0ZnJhbWVEdXJhdGlvbjogMTcsXG5cdFx0YW5pbWF0aW9uczogW10sXG5cdFx0ZHJvcEZyYW1lczogMCxcblx0XHRhZGRBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0SW5zdGFuY2UsIGFuaW1hdGlvbk9iamVjdCkge1xuXHRcdFx0Zm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg7ICsrIGluZGV4KXtcblx0XHRcdFx0aWYgKHRoaXMuYW5pbWF0aW9uc1tpbmRleF0uY2hhcnRJbnN0YW5jZSA9PT0gY2hhcnRJbnN0YW5jZSl7XG5cdFx0XHRcdFx0Ly8gcmVwbGFjaW5nIGFuIGluIHByb2dyZXNzIGFuaW1hdGlvblxuXHRcdFx0XHRcdHRoaXMuYW5pbWF0aW9uc1tpbmRleF0uYW5pbWF0aW9uT2JqZWN0ID0gYW5pbWF0aW9uT2JqZWN0O1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMucHVzaCh7XG5cdFx0XHRcdGNoYXJ0SW5zdGFuY2U6IGNoYXJ0SW5zdGFuY2UsXG5cdFx0XHRcdGFuaW1hdGlvbk9iamVjdDogYW5pbWF0aW9uT2JqZWN0XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnMgcXVldWVkLCBtYW51YWxseSBraWNrc3RhcnQgYSBkaWdlc3QsIGZvciBsYWNrIG9mIGEgYmV0dGVyIHdvcmRcblx0XHRcdGlmICh0aGlzLmFuaW1hdGlvbnMubGVuZ3RoID09IDEpIHtcblx0XHRcdFx0aGVscGVycy5yZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCB0aGlzLmRpZ2VzdFdyYXBwZXIpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gQ2FuY2VsIHRoZSBhbmltYXRpb24gZm9yIGEgZ2l2ZW4gY2hhcnQgaW5zdGFuY2Vcblx0XHRjYW5jZWxBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0SW5zdGFuY2UpIHtcblx0XHRcdHZhciBpbmRleCA9IGhlbHBlcnMuZmluZE5leHRXaGVyZSh0aGlzLmFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbldyYXBwZXIpIHtcblx0XHRcdFx0cmV0dXJuIGFuaW1hdGlvbldyYXBwZXIuY2hhcnRJbnN0YW5jZSA9PT0gY2hhcnRJbnN0YW5jZTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZiAoaW5kZXgpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gY2FsbHMgc3RhcnREaWdlc3Qgd2l0aCB0aGUgcHJvcGVyIGNvbnRleHRcblx0XHRkaWdlc3RXcmFwcGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdENoYXJ0LmFuaW1hdGlvblNlcnZpY2Uuc3RhcnREaWdlc3QuY2FsbChDaGFydC5hbmltYXRpb25TZXJ2aWNlKTtcblx0XHR9LFxuXHRcdHN0YXJ0RGlnZXN0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cdFx0XHR2YXIgZnJhbWVzVG9Ecm9wID0gMDtcblxuXHRcdFx0aWYodGhpcy5kcm9wRnJhbWVzID4gMSl7XG5cdFx0XHRcdGZyYW1lc1RvRHJvcCA9IE1hdGguZmxvb3IodGhpcy5kcm9wRnJhbWVzKTtcblx0XHRcdFx0dGhpcy5kcm9wRnJhbWVzIC09IGZyYW1lc1RvRHJvcDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0XHRpZiAodGhpcy5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCA9PT0gbnVsbCl7XG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwICs9IDEgKyBmcmFtZXNUb0Ryb3A7XG5cdFx0XHRcdGlmKHRoaXMuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgPiB0aGlzLmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm51bVN0ZXBzKXtcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwID0gdGhpcy5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5udW1TdGVwcztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5yZW5kZXIodGhpcy5hbmltYXRpb25zW2ldLmNoYXJ0SW5zdGFuY2UsIHRoaXMuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgZXhlY3V0ZWQgdGhlIGxhc3QgZnJhbWUuXG5cdFx0XHRcdGlmICh0aGlzLmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwID09IHRoaXMuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QubnVtU3RlcHMpe1xuXHRcdFx0XHRcdC8vIENhbGwgb25BbmltYXRpb25Db21wbGV0ZVxuXHRcdFx0XHRcdHRoaXMuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3Qub25BbmltYXRpb25Db21wbGV0ZS5jYWxsKHRoaXMuYW5pbWF0aW9uc1tpXS5jaGFydEluc3RhbmNlKTtcblx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIGFuaW1hdGlvbi5cblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdC8vIEtlZXAgdGhlIGluZGV4IGluIHBsYWNlIHRvIG9mZnNldCB0aGUgc3BsaWNlXG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbmRUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdHZhciBkZWxheSA9IGVuZFRpbWUgLSBzdGFydFRpbWUgLSB0aGlzLmZyYW1lRHVyYXRpb247XG5cdFx0XHR2YXIgZnJhbWVEZWxheSA9IGRlbGF5IC8gdGhpcy5mcmFtZUR1cmF0aW9uO1xuXG5cdFx0XHRpZihmcmFtZURlbGF5ID4gMSl7XG5cdFx0XHRcdHRoaXMuZHJvcEZyYW1lcyArPSBmcmFtZURlbGF5O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEbyB3ZSBoYXZlIG1vcmUgc3R1ZmYgdG8gYW5pbWF0ZT9cblx0XHRcdGlmICh0aGlzLmFuaW1hdGlvbnMubGVuZ3RoID4gMCl7XG5cdFx0XHRcdGhlbHBlcnMucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgdGhpcy5kaWdlc3RXcmFwcGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gQXR0YWNoIGdsb2JhbCBldmVudCB0byByZXNpemUgZWFjaCBjaGFydCBpbnN0YW5jZSB3aGVuIHRoZSBicm93c2VyIHJlc2l6ZXNcblx0aGVscGVycy5hZGRFdmVudCh3aW5kb3csIFwicmVzaXplXCIsIChmdW5jdGlvbigpe1xuXHRcdC8vIEJhc2ljIGRlYm91bmNlIG9mIHJlc2l6ZSBmdW5jdGlvbiBzbyBpdCBkb2Vzbid0IGh1cnQgcGVyZm9ybWFuY2Ugd2hlbiByZXNpemluZyBicm93c2VyLlxuXHRcdHZhciB0aW1lb3V0O1xuXHRcdHJldHVybiBmdW5jdGlvbigpe1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0dGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0ZWFjaChDaGFydC5pbnN0YW5jZXMsZnVuY3Rpb24oaW5zdGFuY2Upe1xuXHRcdFx0XHRcdC8vIElmIHRoZSByZXNwb25zaXZlIGZsYWcgaXMgc2V0IGluIHRoZSBjaGFydCBpbnN0YW5jZSBjb25maWdcblx0XHRcdFx0XHQvLyBDYXNjYWRlIHRoZSByZXNpemUgZXZlbnQgZG93biB0byB0aGUgY2hhcnQuXG5cdFx0XHRcdFx0aWYgKGluc3RhbmNlLm9wdGlvbnMucmVzcG9uc2l2ZSl7XG5cdFx0XHRcdFx0XHRpbnN0YW5jZS5yZXNpemUoaW5zdGFuY2UucmVuZGVyLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSwgNTApO1xuXHRcdH07XG5cdH0pKCkpO1xuXG5cblx0aWYgKGFtZCkge1xuXHRcdGRlZmluZSgnQ2hhcnQnLCBbXSwgZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiBDaGFydDtcblx0XHR9KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gQ2hhcnQ7XG5cdH1cblxuXHRyb290LkNoYXJ0ID0gQ2hhcnQ7XG5cblx0Q2hhcnQubm9Db25mbGljdCA9IGZ1bmN0aW9uKCl7XG5cdFx0cm9vdC5DaGFydCA9IHByZXZpb3VzO1xuXHRcdHJldHVybiBDaGFydDtcblx0fTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCl7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciByb290ID0gdGhpcyxcblx0XHRDaGFydCA9IHJvb3QuQ2hhcnQsXG5cdFx0aGVscGVycyA9IENoYXJ0LmhlbHBlcnM7XG5cblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2FsZSBzaG91bGQgc3RhcnQgYXQgemVybywgb3IgYW4gb3JkZXIgb2YgbWFnbml0dWRlIGRvd24gZnJvbSB0aGUgbG93ZXN0IHZhbHVlXG5cdFx0c2NhbGVCZWdpbkF0WmVybyA6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcblx0XHRzY2FsZVNob3dHcmlkTGluZXMgOiB0cnVlLFxuXG5cdFx0Ly9TdHJpbmcgLSBDb2xvdXIgb2YgdGhlIGdyaWQgbGluZXNcblx0XHRzY2FsZUdyaWRMaW5lQ29sb3IgOiBcInJnYmEoMCwwLDAsLjA1KVwiLFxuXG5cdFx0Ly9OdW1iZXIgLSBXaWR0aCBvZiB0aGUgZ3JpZCBsaW5lc1xuXHRcdHNjYWxlR3JpZExpbmVXaWR0aCA6IDEsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgaG9yaXpvbnRhbCBsaW5lcyAoZXhjZXB0IFggYXhpcylcblx0XHRzY2FsZVNob3dIb3Jpem9udGFsTGluZXM6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgdmVydGljYWwgbGluZXMgKGV4Y2VwdCBZIGF4aXMpXG5cdFx0c2NhbGVTaG93VmVydGljYWxMaW5lczogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIElmIHRoZXJlIGlzIGEgc3Ryb2tlIG9uIGVhY2ggYmFyXG5cdFx0YmFyU2hvd1N0cm9rZSA6IHRydWUsXG5cblx0XHQvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHRoZSBiYXIgc3Ryb2tlXG5cdFx0YmFyU3Ryb2tlV2lkdGggOiAyLFxuXG5cdFx0Ly9OdW1iZXIgLSBTcGFjaW5nIGJldHdlZW4gZWFjaCBvZiB0aGUgWCB2YWx1ZSBzZXRzXG5cdFx0YmFyVmFsdWVTcGFjaW5nIDogNSxcblxuXHRcdC8vTnVtYmVyIC0gU3BhY2luZyBiZXR3ZWVuIGRhdGEgc2V0cyB3aXRoaW4gWCB2YWx1ZXNcblx0XHRiYXJEYXRhc2V0U3BhY2luZyA6IDEsXG5cblx0XHQvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXG5cdFx0bGVnZW5kVGVtcGxhdGUgOiBcIjx1bCBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXFxcIj48JSBmb3IgKHZhciBpPTA7IGk8ZGF0YXNldHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmQtaWNvblxcXCIgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6PCU9ZGF0YXNldHNbaV0uZmlsbENvbG9yJT5cXFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kLXRleHRcXFwiPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9zcGFuPjwvbGk+PCV9JT48L3VsPlwiXG5cblx0fTtcblxuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHRuYW1lOiBcIkJhclwiLFxuXHRcdGRlZmF1bHRzIDogZGVmYXVsdENvbmZpZyxcblx0XHRpbml0aWFsaXplOiAgZnVuY3Rpb24oZGF0YSl7XG5cblx0XHRcdC8vRXhwb3NlIG9wdGlvbnMgYXMgYSBzY29wZSB2YXJpYWJsZSBoZXJlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgaW4gdGhlIFNjYWxlQ2xhc3Ncblx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0XHR0aGlzLlNjYWxlQ2xhc3MgPSBDaGFydC5TY2FsZS5leHRlbmQoe1xuXHRcdFx0XHRvZmZzZXRHcmlkTGluZXMgOiB0cnVlLFxuXHRcdFx0XHRjYWxjdWxhdGVCYXJYIDogZnVuY3Rpb24oZGF0YXNldENvdW50LCBkYXRhc2V0SW5kZXgsIGJhckluZGV4KXtcblx0XHRcdFx0XHQvL1JldXNhYmxlIG1ldGhvZCBmb3IgY2FsY3VsYXRpbmcgdGhlIHhQb3NpdGlvbiBvZiBhIGdpdmVuIGJhciBiYXNlZCBvbiBkYXRhc2V0SW5kZXggJiB3aWR0aCBvZiB0aGUgYmFyXG5cdFx0XHRcdFx0dmFyIHhXaWR0aCA9IHRoaXMuY2FsY3VsYXRlQmFzZVdpZHRoKCksXG5cdFx0XHRcdFx0XHR4QWJzb2x1dGUgPSB0aGlzLmNhbGN1bGF0ZVgoYmFySW5kZXgpIC0gKHhXaWR0aC8yKSxcblx0XHRcdFx0XHRcdGJhcldpZHRoID0gdGhpcy5jYWxjdWxhdGVCYXJXaWR0aChkYXRhc2V0Q291bnQpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHhBYnNvbHV0ZSArIChiYXJXaWR0aCAqIGRhdGFzZXRJbmRleCkgKyAoZGF0YXNldEluZGV4ICogb3B0aW9ucy5iYXJEYXRhc2V0U3BhY2luZykgKyBiYXJXaWR0aC8yO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjYWxjdWxhdGVCYXNlV2lkdGggOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHJldHVybiAodGhpcy5jYWxjdWxhdGVYKDEpIC0gdGhpcy5jYWxjdWxhdGVYKDApKSAtICgyKm9wdGlvbnMuYmFyVmFsdWVTcGFjaW5nKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2FsY3VsYXRlQmFyV2lkdGggOiBmdW5jdGlvbihkYXRhc2V0Q291bnQpe1xuXHRcdFx0XHRcdC8vVGhlIHBhZGRpbmcgYmV0d2VlbiBkYXRhc2V0cyBpcyB0byB0aGUgcmlnaHQgb2YgZWFjaCBiYXIsIHByb3ZpZGluZyB0aGF0IHRoZXJlIGFyZSBtb3JlIHRoYW4gMSBkYXRhc2V0XG5cdFx0XHRcdFx0dmFyIGJhc2VXaWR0aCA9IHRoaXMuY2FsY3VsYXRlQmFzZVdpZHRoKCkgLSAoKGRhdGFzZXRDb3VudCAtIDEpICogb3B0aW9ucy5iYXJEYXRhc2V0U3BhY2luZyk7XG5cblx0XHRcdFx0XHRyZXR1cm4gKGJhc2VXaWR0aCAvIGRhdGFzZXRDb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmRhdGFzZXRzID0gW107XG5cblx0XHRcdC8vU2V0IHVwIHRvb2x0aXAgZXZlbnRzIG9uIHRoZSBjaGFydFxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMpe1xuXHRcdFx0XHRoZWxwZXJzLmJpbmRFdmVudHModGhpcywgdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsIGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRcdFx0dmFyIGFjdGl2ZUJhcnMgPSAoZXZ0LnR5cGUgIT09ICdtb3VzZW91dCcpID8gdGhpcy5nZXRCYXJzQXRFdmVudChldnQpIDogW107XG5cblx0XHRcdFx0XHR0aGlzLmVhY2hCYXJzKGZ1bmN0aW9uKGJhcil7XG5cdFx0XHRcdFx0XHRiYXIucmVzdG9yZShbJ2ZpbGxDb2xvcicsICdzdHJva2VDb2xvciddKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYWN0aXZlQmFycywgZnVuY3Rpb24oYWN0aXZlQmFyKXtcblx0XHRcdFx0XHRcdGlmIChhY3RpdmVCYXIpIHtcblx0XHRcdFx0XHRcdFx0YWN0aXZlQmFyLmZpbGxDb2xvciA9IGFjdGl2ZUJhci5oaWdobGlnaHRGaWxsO1xuXHRcdFx0XHRcdFx0XHRhY3RpdmVCYXIuc3Ryb2tlQ29sb3IgPSBhY3RpdmVCYXIuaGlnaGxpZ2h0U3Ryb2tlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuc2hvd1Rvb2x0aXAoYWN0aXZlQmFycyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvL0RlY2xhcmUgdGhlIGV4dGVuc2lvbiBvZiB0aGUgZGVmYXVsdCBwb2ludCwgdG8gY2F0ZXIgZm9yIHRoZSBvcHRpb25zIHBhc3NlZCBpbiB0byB0aGUgY29uc3RydWN0b3Jcblx0XHRcdHRoaXMuQmFyQ2xhc3MgPSBDaGFydC5SZWN0YW5nbGUuZXh0ZW5kKHtcblx0XHRcdFx0c3Ryb2tlV2lkdGggOiB0aGlzLm9wdGlvbnMuYmFyU3Ryb2tlV2lkdGgsXG5cdFx0XHRcdHNob3dTdHJva2UgOiB0aGlzLm9wdGlvbnMuYmFyU2hvd1N0cm9rZSxcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHhcblx0XHRcdH0pO1xuXG5cdFx0XHQvL0l0ZXJhdGUgdGhyb3VnaCBlYWNoIG9mIHRoZSBkYXRhc2V0cywgYW5kIGJ1aWxkIHRoaXMgaW50byBhIHByb3BlcnR5IG9mIHRoZSBjaGFydFxuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCxkYXRhc2V0SW5kZXgpe1xuXG5cdFx0XHRcdHZhciBkYXRhc2V0T2JqZWN0ID0ge1xuXHRcdFx0XHRcdGxhYmVsIDogZGF0YXNldC5sYWJlbCB8fCBudWxsLFxuXHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRiYXJzIDogW11cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldE9iamVjdCk7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSxmdW5jdGlvbihkYXRhUG9pbnQsaW5kZXgpe1xuXHRcdFx0XHRcdC8vQWRkIGEgbmV3IHBvaW50IGZvciBlYWNoIHBpZWNlIG9mIGRhdGEsIHBhc3NpbmcgYW55IHJlcXVpcmVkIGRhdGEgdG8gZHJhdy5cblx0XHRcdFx0XHRkYXRhc2V0T2JqZWN0LmJhcnMucHVzaChuZXcgdGhpcy5CYXJDbGFzcyh7XG5cdFx0XHRcdFx0XHR2YWx1ZSA6IGRhdGFQb2ludCxcblx0XHRcdFx0XHRcdGxhYmVsIDogZGF0YS5sYWJlbHNbaW5kZXhdLFxuXHRcdFx0XHRcdFx0ZGF0YXNldExhYmVsOiBkYXRhc2V0LmxhYmVsLFxuXHRcdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiAodHlwZW9mIGRhdGFzZXQuc3Ryb2tlQ29sb3IgPT0gJ29iamVjdCcpID8gZGF0YXNldC5zdHJva2VDb2xvcltpbmRleF0gOiBkYXRhc2V0LnN0cm9rZUNvbG9yLFxuXHRcdFx0XHRcdFx0ZmlsbENvbG9yIDogKHR5cGVvZiBkYXRhc2V0LmZpbGxDb2xvciA9PSAnb2JqZWN0JykgPyBkYXRhc2V0LmZpbGxDb2xvcltpbmRleF0gOiBkYXRhc2V0LmZpbGxDb2xvcixcblx0XHRcdFx0XHRcdGhpZ2hsaWdodEZpbGwgOiAoZGF0YXNldC5oaWdobGlnaHRGaWxsKSA/ICh0eXBlb2YgZGF0YXNldC5oaWdobGlnaHRGaWxsID09ICdvYmplY3QnKSA/IGRhdGFzZXQuaGlnaGxpZ2h0RmlsbFtpbmRleF0gOiBkYXRhc2V0LmhpZ2hsaWdodEZpbGwgOiAodHlwZW9mIGRhdGFzZXQuZmlsbENvbG9yID09ICdvYmplY3QnKSA/IGRhdGFzZXQuZmlsbENvbG9yW2luZGV4XSA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdFx0aGlnaGxpZ2h0U3Ryb2tlIDogKGRhdGFzZXQuaGlnaGxpZ2h0U3Ryb2tlKSA/ICh0eXBlb2YgZGF0YXNldC5oaWdobGlnaHRTdHJva2UgPT0gJ29iamVjdCcpID8gZGF0YXNldC5oaWdobGlnaHRTdHJva2VbaW5kZXhdIDogZGF0YXNldC5oaWdobGlnaHRTdHJva2UgOiAodHlwZW9mIGRhdGFzZXQuc3Ryb2tlQ29sb3IgPT0gJ29iamVjdCcpID8gZGF0YXNldC5zdHJva2VDb2xvcltpbmRleF0gOiBkYXRhc2V0LnN0cm9rZUNvbG9yXG5cdFx0XHRcdFx0fSkpO1xuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR0aGlzLmJ1aWxkU2NhbGUoZGF0YS5sYWJlbHMpO1xuXG5cdFx0XHR0aGlzLkJhckNsYXNzLnByb3RvdHlwZS5iYXNlID0gdGhpcy5zY2FsZS5lbmRQb2ludDtcblxuXHRcdFx0dGhpcy5lYWNoQmFycyhmdW5jdGlvbihiYXIsIGluZGV4LCBkYXRhc2V0SW5kZXgpe1xuXHRcdFx0XHRoZWxwZXJzLmV4dGVuZChiYXIsIHtcblx0XHRcdFx0XHR3aWR0aCA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyV2lkdGgodGhpcy5kYXRhc2V0cy5sZW5ndGgpLFxuXHRcdFx0XHRcdHg6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyWCh0aGlzLmRhdGFzZXRzLmxlbmd0aCwgZGF0YXNldEluZGV4LCBpbmRleCksXG5cdFx0XHRcdFx0eTogdGhpcy5zY2FsZS5lbmRQb2ludFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YmFyLnNhdmUoKTtcblx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuc2NhbGUudXBkYXRlKCk7XG5cdFx0XHQvLyBSZXNldCBhbnkgaGlnaGxpZ2h0IGNvbG91cnMgYmVmb3JlIHVwZGF0aW5nLlxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuYWN0aXZlRWxlbWVudHMsIGZ1bmN0aW9uKGFjdGl2ZUVsZW1lbnQpe1xuXHRcdFx0XHRhY3RpdmVFbGVtZW50LnJlc3RvcmUoWydmaWxsQ29sb3InLCAnc3Ryb2tlQ29sb3InXSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5lYWNoQmFycyhmdW5jdGlvbihiYXIpe1xuXHRcdFx0XHRiYXIuc2F2ZSgpO1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0ZWFjaEJhcnMgOiBmdW5jdGlvbihjYWxsYmFjayl7XG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpe1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5iYXJzLCBjYWxsYmFjaywgdGhpcywgZGF0YXNldEluZGV4KTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0fSxcblx0XHRnZXRCYXJzQXRFdmVudCA6IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGJhcnNBcnJheSA9IFtdLFxuXHRcdFx0XHRldmVudFBvc2l0aW9uID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uKGUpLFxuXHRcdFx0XHRkYXRhc2V0SXRlcmF0b3IgPSBmdW5jdGlvbihkYXRhc2V0KXtcblx0XHRcdFx0XHRiYXJzQXJyYXkucHVzaChkYXRhc2V0LmJhcnNbYmFySW5kZXhdKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YmFySW5kZXg7XG5cblx0XHRcdGZvciAodmFyIGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IHRoaXMuZGF0YXNldHMubGVuZ3RoOyBkYXRhc2V0SW5kZXgrKykge1xuXHRcdFx0XHRmb3IgKGJhckluZGV4ID0gMDsgYmFySW5kZXggPCB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uYmFycy5sZW5ndGg7IGJhckluZGV4KyspIHtcblx0XHRcdFx0XHRpZiAodGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmJhcnNbYmFySW5kZXhdLmluUmFuZ2UoZXZlbnRQb3NpdGlvbi54LGV2ZW50UG9zaXRpb24ueSkpe1xuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsIGRhdGFzZXRJdGVyYXRvcik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYmFyc0FycmF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYmFyc0FycmF5O1xuXHRcdH0sXG5cdFx0YnVpbGRTY2FsZSA6IGZ1bmN0aW9uKGxhYmVscyl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdHZhciBkYXRhVG90YWwgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRcdHNlbGYuZWFjaEJhcnMoZnVuY3Rpb24oYmFyKXtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaChiYXIudmFsdWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH07XG5cblx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSB7XG5cdFx0XHRcdHRlbXBsYXRlU3RyaW5nIDogdGhpcy5vcHRpb25zLnNjYWxlTGFiZWwsXG5cdFx0XHRcdGhlaWdodCA6IHRoaXMuY2hhcnQuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aCA6IHRoaXMuY2hhcnQud2lkdGgsXG5cdFx0XHRcdGN0eCA6IHRoaXMuY2hhcnQuY3R4LFxuXHRcdFx0XHR0ZXh0Q29sb3IgOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3IsXG5cdFx0XHRcdGZvbnRTaXplIDogdGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsXG5cdFx0XHRcdGZvbnRTdHlsZSA6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSxcblx0XHRcdFx0Zm9udEZhbWlseSA6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHksXG5cdFx0XHRcdHZhbHVlc0NvdW50IDogbGFiZWxzLmxlbmd0aCxcblx0XHRcdFx0YmVnaW5BdFplcm8gOiB0aGlzLm9wdGlvbnMuc2NhbGVCZWdpbkF0WmVybyxcblx0XHRcdFx0aW50ZWdlcnNPbmx5IDogdGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5LFxuXHRcdFx0XHRjYWxjdWxhdGVZUmFuZ2U6IGZ1bmN0aW9uKGN1cnJlbnRIZWlnaHQpe1xuXHRcdFx0XHRcdHZhciB1cGRhdGVkUmFuZ2VzID0gaGVscGVycy5jYWxjdWxhdGVTY2FsZVJhbmdlKFxuXHRcdFx0XHRcdFx0ZGF0YVRvdGFsKCksXG5cdFx0XHRcdFx0XHRjdXJyZW50SGVpZ2h0LFxuXHRcdFx0XHRcdFx0dGhpcy5mb250U2l6ZSxcblx0XHRcdFx0XHRcdHRoaXMuYmVnaW5BdFplcm8sXG5cdFx0XHRcdFx0XHR0aGlzLmludGVnZXJzT25seVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aGVscGVycy5leHRlbmQodGhpcywgdXBkYXRlZFJhbmdlcyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHhMYWJlbHMgOiBsYWJlbHMsXG5cdFx0XHRcdGZvbnQgOiBoZWxwZXJzLmZvbnRTdHJpbmcodGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsIHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSwgdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSksXG5cdFx0XHRcdGxpbmVXaWR0aCA6IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCxcblx0XHRcdFx0bGluZUNvbG9yIDogdGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLFxuXHRcdFx0XHRzaG93SG9yaXpvbnRhbExpbmVzIDogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0hvcml6b250YWxMaW5lcyxcblx0XHRcdFx0c2hvd1ZlcnRpY2FsTGluZXMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93VmVydGljYWxMaW5lcyxcblx0XHRcdFx0Z3JpZExpbmVXaWR0aCA6ICh0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzKSA/IHRoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lV2lkdGggOiAwLFxuXHRcdFx0XHRncmlkTGluZUNvbG9yIDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXMpID8gdGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVDb2xvciA6IFwicmdiYSgwLDAsMCwwKVwiLFxuXHRcdFx0XHRwYWRkaW5nIDogKHRoaXMub3B0aW9ucy5zaG93U2NhbGUpID8gMCA6ICh0aGlzLm9wdGlvbnMuYmFyU2hvd1N0cm9rZSkgPyB0aGlzLm9wdGlvbnMuYmFyU3Ryb2tlV2lkdGggOiAwLFxuXHRcdFx0XHRzaG93TGFiZWxzIDogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0xhYmVscyxcblx0XHRcdFx0ZGlzcGxheSA6IHRoaXMub3B0aW9ucy5zaG93U2NhbGVcblx0XHRcdH07XG5cblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuc2NhbGVPdmVycmlkZSl7XG5cdFx0XHRcdGhlbHBlcnMuZXh0ZW5kKHNjYWxlT3B0aW9ucywge1xuXHRcdFx0XHRcdGNhbGN1bGF0ZVlSYW5nZTogaGVscGVycy5ub29wLFxuXHRcdFx0XHRcdHN0ZXBzOiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxcblx0XHRcdFx0XHRzdGVwVmFsdWU6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxcblx0XHRcdFx0XHRtaW46IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUsXG5cdFx0XHRcdFx0bWF4OiB0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlICsgKHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzICogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoKVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zY2FsZSA9IG5ldyB0aGlzLlNjYWxlQ2xhc3Moc2NhbGVPcHRpb25zKTtcblx0XHR9LFxuXHRcdGFkZERhdGEgOiBmdW5jdGlvbih2YWx1ZXNBcnJheSxsYWJlbCl7XG5cdFx0XHQvL01hcCB0aGUgdmFsdWVzIGFycmF5IGZvciBlYWNoIG9mIHRoZSBkYXRhc2V0c1xuXHRcdFx0aGVscGVycy5lYWNoKHZhbHVlc0FycmF5LGZ1bmN0aW9uKHZhbHVlLGRhdGFzZXRJbmRleCl7XG5cdFx0XHRcdC8vQWRkIGEgbmV3IHBvaW50IGZvciBlYWNoIHBpZWNlIG9mIGRhdGEsIHBhc3NpbmcgYW55IHJlcXVpcmVkIGRhdGEgdG8gZHJhdy5cblx0XHRcdFx0dGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmJhcnMucHVzaChuZXcgdGhpcy5CYXJDbGFzcyh7XG5cdFx0XHRcdFx0dmFsdWUgOiB2YWx1ZSxcblx0XHRcdFx0XHRsYWJlbCA6IGxhYmVsLFxuXHRcdFx0XHRcdGRhdGFzZXRMYWJlbDogdGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmxhYmVsLFxuXHRcdFx0XHRcdHg6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyWCh0aGlzLmRhdGFzZXRzLmxlbmd0aCwgZGF0YXNldEluZGV4LCB0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLFxuXHRcdFx0XHRcdHk6IHRoaXMuc2NhbGUuZW5kUG9pbnQsXG5cdFx0XHRcdFx0d2lkdGggOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZUJhcldpZHRoKHRoaXMuZGF0YXNldHMubGVuZ3RoKSxcblx0XHRcdFx0XHRiYXNlIDogdGhpcy5zY2FsZS5lbmRQb2ludCxcblx0XHRcdFx0XHRzdHJva2VDb2xvciA6IHRoaXMuZGF0YXNldHNbZGF0YXNldEluZGV4XS5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZmlsbENvbG9yXG5cdFx0XHRcdH0pKTtcblx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdHRoaXMuc2NhbGUuYWRkWExhYmVsKGxhYmVsKTtcblx0XHRcdC8vVGhlbiByZS1yZW5kZXIgdGhlIGNoYXJ0LlxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXHRcdHJlbW92ZURhdGEgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5zY2FsZS5yZW1vdmVYTGFiZWwoKTtcblx0XHRcdC8vVGhlbiByZS1yZW5kZXIgdGhlIGNoYXJ0LlxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdGRhdGFzZXQuYmFycy5zaGlmdCgpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZWZsb3cgOiBmdW5jdGlvbigpe1xuXHRcdFx0aGVscGVycy5leHRlbmQodGhpcy5CYXJDbGFzcy5wcm90b3R5cGUse1xuXHRcdFx0XHR5OiB0aGlzLnNjYWxlLmVuZFBvaW50LFxuXHRcdFx0XHRiYXNlIDogdGhpcy5zY2FsZS5lbmRQb2ludFxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgbmV3U2NhbGVQcm9wcyA9IGhlbHBlcnMuZXh0ZW5kKHtcblx0XHRcdFx0aGVpZ2h0IDogdGhpcy5jaGFydC5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoIDogdGhpcy5jaGFydC53aWR0aFxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLnNjYWxlLnVwZGF0ZShuZXdTY2FsZVByb3BzKTtcblx0XHR9LFxuXHRcdGRyYXcgOiBmdW5jdGlvbihlYXNlKXtcblx0XHRcdHZhciBlYXNpbmdEZWNpbWFsID0gZWFzZSB8fCAxO1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jaGFydC5jdHg7XG5cblx0XHRcdHRoaXMuc2NhbGUuZHJhdyhlYXNpbmdEZWNpbWFsKTtcblxuXHRcdFx0Ly9EcmF3IGFsbCB0aGUgYmFycyBmb3IgZWFjaCBkYXRhc2V0XG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0LGRhdGFzZXRJbmRleCl7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmJhcnMsZnVuY3Rpb24oYmFyLGluZGV4KXtcblx0XHRcdFx0XHRpZiAoYmFyLmhhc1ZhbHVlKCkpe1xuXHRcdFx0XHRcdFx0YmFyLmJhc2UgPSB0aGlzLnNjYWxlLmVuZFBvaW50O1xuXHRcdFx0XHRcdFx0Ly9UcmFuc2l0aW9uIHRoZW4gZHJhd1xuXHRcdFx0XHRcdFx0YmFyLnRyYW5zaXRpb24oe1xuXHRcdFx0XHRcdFx0XHR4IDogdGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLCBkYXRhc2V0SW5kZXgsIGluZGV4KSxcblx0XHRcdFx0XHRcdFx0eSA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlWShiYXIudmFsdWUpLFxuXHRcdFx0XHRcdFx0XHR3aWR0aCA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyV2lkdGgodGhpcy5kYXRhc2V0cy5sZW5ndGgpXG5cdFx0XHRcdFx0XHR9LCBlYXNpbmdEZWNpbWFsKS5kcmF3KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR9LHRoaXMpO1xuXHRcdH1cblx0fSk7XG5cblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCl7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciByb290ID0gdGhpcyxcblx0XHRDaGFydCA9IHJvb3QuQ2hhcnQsXG5cdFx0Ly9DYWNoZSBhIGxvY2FsIHJlZmVyZW5jZSB0byBDaGFydC5oZWxwZXJzXG5cdFx0aGVscGVycyA9IENoYXJ0LmhlbHBlcnM7XG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB3ZSBzaG91bGQgc2hvdyBhIHN0cm9rZSBvbiBlYWNoIHNlZ21lbnRcblx0XHRzZWdtZW50U2hvd1N0cm9rZSA6IHRydWUsXG5cblx0XHQvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuXHRcdHNlZ21lbnRTdHJva2VDb2xvciA6IFwiI2ZmZlwiLFxuXG5cdFx0Ly9OdW1iZXIgLSBUaGUgd2lkdGggb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuXHRcdHNlZ21lbnRTdHJva2VXaWR0aCA6IDIsXG5cblx0XHQvL1RoZSBwZXJjZW50YWdlIG9mIHRoZSBjaGFydCB0aGF0IHdlIGN1dCBvdXQgb2YgdGhlIG1pZGRsZS5cblx0XHRwZXJjZW50YWdlSW5uZXJDdXRvdXQgOiA1MCxcblxuXHRcdC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xuXHRcdGFuaW1hdGlvblN0ZXBzIDogMTAwLFxuXG5cdFx0Ly9TdHJpbmcgLSBBbmltYXRpb24gZWFzaW5nIGVmZmVjdFxuXHRcdGFuaW1hdGlvbkVhc2luZyA6IFwiZWFzZU91dEJvdW5jZVwiLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcblx0XHRhbmltYXRlUm90YXRlIDogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGUgOiBmYWxzZSxcblxuXHRcdC8vU3RyaW5nIC0gQSBsZWdlbmQgdGVtcGxhdGVcblx0XHRsZWdlbmRUZW1wbGF0ZSA6IFwiPHVsIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcXFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZC1pY29uXFxcIiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlxcXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmQtdGV4dFxcXCI+PCVpZihzZWdtZW50c1tpXS5sYWJlbCl7JT48JT1zZWdtZW50c1tpXS5sYWJlbCU+PCV9JT48L3NwYW4+PC9saT48JX0lPjwvdWw+XCJcblxuXHR9O1xuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHQvL1Bhc3NpbmcgaW4gYSBuYW1lIHJlZ2lzdGVycyB0aGlzIGNoYXJ0IGluIHRoZSBDaGFydCBuYW1lc3BhY2Vcblx0XHRuYW1lOiBcIkRvdWdobnV0XCIsXG5cdFx0Ly9Qcm92aWRpbmcgYSBkZWZhdWx0cyB3aWxsIGFsc28gcmVnaXN0ZXIgdGhlIGRlZmF1bHRzIGluIHRoZSBjaGFydCBuYW1lc3BhY2Vcblx0XHRkZWZhdWx0cyA6IGRlZmF1bHRDb25maWcsXG5cdFx0Ly9Jbml0aWFsaXplIGlzIGZpcmVkIHdoZW4gdGhlIGNoYXJ0IGlzIGluaXRpYWxpemVkIC0gRGF0YSBpcyBwYXNzZWQgaW4gYXMgYSBwYXJhbWV0ZXJcblx0XHQvL0NvbmZpZyBpcyBhdXRvbWF0aWNhbGx5IG1lcmdlZCBieSB0aGUgY29yZSBvZiBDaGFydC5qcywgYW5kIGlzIGF2YWlsYWJsZSBhdCB0aGlzLm9wdGlvbnNcblx0XHRpbml0aWFsaXplOiAgZnVuY3Rpb24oZGF0YSl7XG5cblx0XHRcdC8vRGVjbGFyZSBzZWdtZW50cyBhcyBhIHN0YXRpYyBwcm9wZXJ0eSB0byBwcmV2ZW50IGluaGVyaXRpbmcgYWNyb3NzIHRoZSBDaGFydCB0eXBlIHByb3RvdHlwZVxuXHRcdFx0dGhpcy5zZWdtZW50cyA9IFtdO1xuXHRcdFx0dGhpcy5vdXRlclJhZGl1cyA9IChoZWxwZXJzLm1pbihbdGhpcy5jaGFydC53aWR0aCx0aGlzLmNoYXJ0LmhlaWdodF0pIC1cdHRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlV2lkdGgvMikvMjtcblxuXHRcdFx0dGhpcy5TZWdtZW50QXJjID0gQ2hhcnQuQXJjLmV4dGVuZCh7XG5cdFx0XHRcdGN0eCA6IHRoaXMuY2hhcnQuY3R4LFxuXHRcdFx0XHR4IDogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5IDogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0fSk7XG5cblx0XHRcdC8vU2V0IHVwIHRvb2x0aXAgZXZlbnRzIG9uIHRoZSBjaGFydFxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMpe1xuXHRcdFx0XHRoZWxwZXJzLmJpbmRFdmVudHModGhpcywgdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsIGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRcdFx0dmFyIGFjdGl2ZVNlZ21lbnRzID0gKGV2dC50eXBlICE9PSAnbW91c2VvdXQnKSA/IHRoaXMuZ2V0U2VnbWVudHNBdEV2ZW50KGV2dCkgOiBbXTtcblxuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRcdFx0c2VnbWVudC5yZXN0b3JlKFtcImZpbGxDb2xvclwiXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKGFjdGl2ZVNlZ21lbnRzLGZ1bmN0aW9uKGFjdGl2ZVNlZ21lbnQpe1xuXHRcdFx0XHRcdFx0YWN0aXZlU2VnbWVudC5maWxsQ29sb3IgPSBhY3RpdmVTZWdtZW50LmhpZ2hsaWdodENvbG9yO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuc2hvd1Rvb2x0aXAoYWN0aXZlU2VnbWVudHMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuY2FsY3VsYXRlVG90YWwoZGF0YSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChkYXRhLGZ1bmN0aW9uKGRhdGFwb2ludCwgaW5kZXgpe1xuXHRcdFx0XHRpZiAoIWRhdGFwb2ludC5jb2xvcikge1xuXHRcdFx0XHRcdGRhdGFwb2ludC5jb2xvciA9ICdoc2woJyArICgzNjAgKiBpbmRleCAvIGRhdGEubGVuZ3RoKSArICcsIDEwMCUsIDUwJSknO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWRkRGF0YShkYXRhcG9pbnQsIGluZGV4LCB0cnVlKTtcblx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRnZXRTZWdtZW50c0F0RXZlbnQgOiBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBzZWdtZW50c0FycmF5ID0gW107XG5cblx0XHRcdHZhciBsb2NhdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdGlmIChzZWdtZW50LmluUmFuZ2UobG9jYXRpb24ueCxsb2NhdGlvbi55KSkgc2VnbWVudHNBcnJheS5wdXNoKHNlZ21lbnQpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHJldHVybiBzZWdtZW50c0FycmF5O1xuXHRcdH0sXG5cdFx0YWRkRGF0YSA6IGZ1bmN0aW9uKHNlZ21lbnQsIGF0SW5kZXgsIHNpbGVudCl7XG5cdFx0XHR2YXIgaW5kZXggPSBhdEluZGV4ICE9PSB1bmRlZmluZWQgPyBhdEluZGV4IDogdGhpcy5zZWdtZW50cy5sZW5ndGg7XG5cdFx0XHRpZiAoIHR5cGVvZihzZWdtZW50LmNvbG9yKSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0c2VnbWVudC5jb2xvciA9IENoYXJ0LmRlZmF1bHRzLmdsb2JhbC5zZWdtZW50Q29sb3JEZWZhdWx0W2luZGV4ICUgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnNlZ21lbnRDb2xvckRlZmF1bHQubGVuZ3RoXTtcblx0XHRcdFx0c2VnbWVudC5oaWdobGlnaHQgPSBDaGFydC5kZWZhdWx0cy5nbG9iYWwuc2VnbWVudEhpZ2hsaWdodENvbG9yRGVmYXVsdHNbaW5kZXggJSBDaGFydC5kZWZhdWx0cy5nbG9iYWwuc2VnbWVudEhpZ2hsaWdodENvbG9yRGVmYXVsdHMubGVuZ3RoXTtcdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0dGhpcy5zZWdtZW50cy5zcGxpY2UoaW5kZXgsIDAsIG5ldyB0aGlzLlNlZ21lbnRBcmMoe1xuXHRcdFx0XHR2YWx1ZSA6IHNlZ21lbnQudmFsdWUsXG5cdFx0XHRcdG91dGVyUmFkaXVzIDogKHRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGUpID8gMCA6IHRoaXMub3V0ZXJSYWRpdXMsXG5cdFx0XHRcdGlubmVyUmFkaXVzIDogKHRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGUpID8gMCA6ICh0aGlzLm91dGVyUmFkaXVzLzEwMCkgKiB0aGlzLm9wdGlvbnMucGVyY2VudGFnZUlubmVyQ3V0b3V0LFxuXHRcdFx0XHRmaWxsQ29sb3IgOiBzZWdtZW50LmNvbG9yLFxuXHRcdFx0XHRoaWdobGlnaHRDb2xvciA6IHNlZ21lbnQuaGlnaGxpZ2h0IHx8IHNlZ21lbnQuY29sb3IsXG5cdFx0XHRcdHNob3dTdHJva2UgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFNob3dTdHJva2UsXG5cdFx0XHRcdHN0cm9rZVdpZHRoIDogdGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aCxcblx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZUNvbG9yLFxuXHRcdFx0XHRzdGFydEFuZ2xlIDogTWF0aC5QSSAqIDEuNSxcblx0XHRcdFx0Y2lyY3VtZmVyZW5jZSA6ICh0aGlzLm9wdGlvbnMuYW5pbWF0ZVJvdGF0ZSkgPyAwIDogdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHNlZ21lbnQudmFsdWUpLFxuXHRcdFx0XHRsYWJlbCA6IHNlZ21lbnQubGFiZWxcblx0XHRcdH0pKTtcblx0XHRcdGlmICghc2lsZW50KXtcblx0XHRcdFx0dGhpcy5yZWZsb3coKTtcblx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UgOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCB0aGlzLnRvdGFsID4gMCApIHtcblx0XHRcdFx0cmV0dXJuIChNYXRoLlBJKjIpKih2YWx1ZSAvIHRoaXMudG90YWwpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjYWxjdWxhdGVUb3RhbCA6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dGhpcy50b3RhbCA9IDA7XG5cdFx0XHRoZWxwZXJzLmVhY2goZGF0YSxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0dGhpcy50b3RhbCArPSBNYXRoLmFicyhzZWdtZW50LnZhbHVlKTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5jYWxjdWxhdGVUb3RhbCh0aGlzLnNlZ21lbnRzKTtcblxuXHRcdFx0Ly8gUmVzZXQgYW55IGhpZ2hsaWdodCBjb2xvdXJzIGJlZm9yZSB1cGRhdGluZy5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmFjdGl2ZUVsZW1lbnRzLCBmdW5jdGlvbihhY3RpdmVFbGVtZW50KXtcblx0XHRcdFx0YWN0aXZlRWxlbWVudC5yZXN0b3JlKFsnZmlsbENvbG9yJ10pO1xuXHRcdFx0fSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRzZWdtZW50LnNhdmUoKTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oYXRJbmRleCl7XG5cdFx0XHR2YXIgaW5kZXhUb0RlbGV0ZSA9IChoZWxwZXJzLmlzTnVtYmVyKGF0SW5kZXgpKSA/IGF0SW5kZXggOiB0aGlzLnNlZ21lbnRzLmxlbmd0aC0xO1xuXHRcdFx0dGhpcy5zZWdtZW50cy5zcGxpY2UoaW5kZXhUb0RlbGV0ZSwgMSk7XG5cdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXG5cdFx0cmVmbG93IDogZnVuY3Rpb24oKXtcblx0XHRcdGhlbHBlcnMuZXh0ZW5kKHRoaXMuU2VnbWVudEFyYy5wcm90b3R5cGUse1xuXHRcdFx0XHR4IDogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5IDogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLm91dGVyUmFkaXVzID0gKGhlbHBlcnMubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSkgLVx0dGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aC8yKS8yO1xuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsIGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRzZWdtZW50LnVwZGF0ZSh7XG5cdFx0XHRcdFx0b3V0ZXJSYWRpdXMgOiB0aGlzLm91dGVyUmFkaXVzLFxuXHRcdFx0XHRcdGlubmVyUmFkaXVzIDogKHRoaXMub3V0ZXJSYWRpdXMvMTAwKSAqIHRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LCB0aGlzKTtcblx0XHR9LFxuXHRcdGRyYXcgOiBmdW5jdGlvbihlYXNlRGVjaW1hbCl7XG5cdFx0XHR2YXIgYW5pbURlY2ltYWwgPSAoZWFzZURlY2ltYWwpID8gZWFzZURlY2ltYWwgOiAxO1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCxpbmRleCl7XG5cdFx0XHRcdHNlZ21lbnQudHJhbnNpdGlvbih7XG5cdFx0XHRcdFx0Y2lyY3VtZmVyZW5jZSA6IHRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShzZWdtZW50LnZhbHVlKSxcblx0XHRcdFx0XHRvdXRlclJhZGl1cyA6IHRoaXMub3V0ZXJSYWRpdXMsXG5cdFx0XHRcdFx0aW5uZXJSYWRpdXMgOiAodGhpcy5vdXRlclJhZGl1cy8xMDApICogdGhpcy5vcHRpb25zLnBlcmNlbnRhZ2VJbm5lckN1dG91dFxuXHRcdFx0XHR9LGFuaW1EZWNpbWFsKTtcblxuXHRcdFx0XHRzZWdtZW50LmVuZEFuZ2xlID0gc2VnbWVudC5zdGFydEFuZ2xlICsgc2VnbWVudC5jaXJjdW1mZXJlbmNlO1xuXG5cdFx0XHRcdHNlZ21lbnQuZHJhdygpO1xuXHRcdFx0XHRpZiAoaW5kZXggPT09IDApe1xuXHRcdFx0XHRcdHNlZ21lbnQuc3RhcnRBbmdsZSA9IE1hdGguUEkgKiAxLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9DaGVjayB0byBzZWUgaWYgaXQncyB0aGUgbGFzdCBzZWdtZW50LCBpZiBub3QgZ2V0IHRoZSBuZXh0IGFuZCB1cGRhdGUgdGhlIHN0YXJ0IGFuZ2xlXG5cdFx0XHRcdGlmIChpbmRleCA8IHRoaXMuc2VnbWVudHMubGVuZ3RoLTEpe1xuXHRcdFx0XHRcdHRoaXMuc2VnbWVudHNbaW5kZXgrMV0uc3RhcnRBbmdsZSA9IHNlZ21lbnQuZW5kQW5nbGU7XG5cdFx0XHRcdH1cblx0XHRcdH0sdGhpcyk7XG5cblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LnR5cGVzLkRvdWdobnV0LmV4dGVuZCh7XG5cdFx0bmFtZSA6IFwiUGllXCIsXG5cdFx0ZGVmYXVsdHMgOiBoZWxwZXJzLm1lcmdlKGRlZmF1bHRDb25maWcse3BlcmNlbnRhZ2VJbm5lckN1dG91dCA6IDB9KVxuXHR9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCl7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciByb290ID0gdGhpcyxcblx0XHRDaGFydCA9IHJvb3QuQ2hhcnQsXG5cdFx0aGVscGVycyA9IENoYXJ0LmhlbHBlcnM7XG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cblx0XHQvLy9Cb29sZWFuIC0gV2hldGhlciBncmlkIGxpbmVzIGFyZSBzaG93biBhY3Jvc3MgdGhlIGNoYXJ0XG5cdFx0c2NhbGVTaG93R3JpZExpbmVzIDogdHJ1ZSxcblxuXHRcdC8vU3RyaW5nIC0gQ29sb3VyIG9mIHRoZSBncmlkIGxpbmVzXG5cdFx0c2NhbGVHcmlkTGluZUNvbG9yIDogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuXHRcdC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcblx0XHRzY2FsZUdyaWRMaW5lV2lkdGggOiAxLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IGhvcml6b250YWwgbGluZXMgKGV4Y2VwdCBYIGF4aXMpXG5cdFx0c2NhbGVTaG93SG9yaXpvbnRhbExpbmVzOiB0cnVlLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IHZlcnRpY2FsIGxpbmVzIChleGNlcHQgWSBheGlzKVxuXHRcdHNjYWxlU2hvd1ZlcnRpY2FsTGluZXM6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRoZSBsaW5lIGlzIGN1cnZlZCBiZXR3ZWVuIHBvaW50c1xuXHRcdGJlemllckN1cnZlIDogdHJ1ZSxcblxuXHRcdC8vTnVtYmVyIC0gVGVuc2lvbiBvZiB0aGUgYmV6aWVyIGN1cnZlIGJldHdlZW4gcG9pbnRzXG5cdFx0YmV6aWVyQ3VydmVUZW5zaW9uIDogMC40LFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IGEgZG90IGZvciBlYWNoIHBvaW50XG5cdFx0cG9pbnREb3QgOiB0cnVlLFxuXG5cdFx0Ly9OdW1iZXIgLSBSYWRpdXMgb2YgZWFjaCBwb2ludCBkb3QgaW4gcGl4ZWxzXG5cdFx0cG9pbnREb3RSYWRpdXMgOiA0LFxuXG5cdFx0Ly9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiBwb2ludCBkb3Qgc3Ryb2tlXG5cdFx0cG9pbnREb3RTdHJva2VXaWR0aCA6IDEsXG5cblx0XHQvL051bWJlciAtIGFtb3VudCBleHRyYSB0byBhZGQgdG8gdGhlIHJhZGl1cyB0byBjYXRlciBmb3IgaGl0IGRldGVjdGlvbiBvdXRzaWRlIHRoZSBkcmF3biBwb2ludFxuXHRcdHBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzIDogMjAsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgYSBzdHJva2UgZm9yIGRhdGFzZXRzXG5cdFx0ZGF0YXNldFN0cm9rZSA6IHRydWUsXG5cblx0XHQvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIGRhdGFzZXQgc3Ryb2tlXG5cdFx0ZGF0YXNldFN0cm9rZVdpZHRoIDogMixcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gZmlsbCB0aGUgZGF0YXNldCB3aXRoIGEgY29sb3VyXG5cdFx0ZGF0YXNldEZpbGwgOiB0cnVlLFxuXG5cdFx0Ly9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxuXHRcdGxlZ2VuZFRlbXBsYXRlIDogXCI8dWwgY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFxcXCI+PCUgZm9yICh2YXIgaT0wOyBpPGRhdGFzZXRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kLWljb25cXFwiIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLnN0cm9rZUNvbG9yJT5cXFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kLXRleHRcXFwiPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9zcGFuPjwvbGk+PCV9JT48L3VsPlwiLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBob3Jpem9udGFsbHkgY2VudGVyIHRoZSBsYWJlbCBhbmQgcG9pbnQgZG90IGluc2lkZSB0aGUgZ3JpZFxuXHRcdG9mZnNldEdyaWRMaW5lcyA6IGZhbHNlXG5cblx0fTtcblxuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHRuYW1lOiBcIkxpbmVcIixcblx0XHRkZWZhdWx0cyA6IGRlZmF1bHRDb25maWcsXG5cdFx0aW5pdGlhbGl6ZTogIGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0Ly9EZWNsYXJlIHRoZSBleHRlbnNpb24gb2YgdGhlIGRlZmF1bHQgcG9pbnQsIHRvIGNhdGVyIGZvciB0aGUgb3B0aW9ucyBwYXNzZWQgaW4gdG8gdGhlIGNvbnN0cnVjdG9yXG5cdFx0XHR0aGlzLlBvaW50Q2xhc3MgPSBDaGFydC5Qb2ludC5leHRlbmQoe1xuXHRcdFx0XHRvZmZzZXRHcmlkTGluZXMgOiB0aGlzLm9wdGlvbnMub2Zmc2V0R3JpZExpbmVzLFxuXHRcdFx0XHRzdHJva2VXaWR0aCA6IHRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLFxuXHRcdFx0XHRyYWRpdXMgOiB0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsXG5cdFx0XHRcdGRpc3BsYXk6IHRoaXMub3B0aW9ucy5wb2ludERvdCxcblx0XHRcdFx0aGl0RGV0ZWN0aW9uUmFkaXVzIDogdGhpcy5vcHRpb25zLnBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eCxcblx0XHRcdFx0aW5SYW5nZSA6IGZ1bmN0aW9uKG1vdXNlWCl7XG5cdFx0XHRcdFx0cmV0dXJuIChNYXRoLnBvdyhtb3VzZVgtdGhpcy54LCAyKSA8IE1hdGgucG93KHRoaXMucmFkaXVzICsgdGhpcy5oaXREZXRlY3Rpb25SYWRpdXMsMikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kYXRhc2V0cyA9IFtdO1xuXG5cdFx0XHQvL1NldCB1cCB0b29sdGlwIGV2ZW50cyBvbiB0aGUgY2hhcnRcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzKXtcblx0XHRcdFx0aGVscGVycy5iaW5kRXZlbnRzKHRoaXMsIHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLCBmdW5jdGlvbihldnQpe1xuXHRcdFx0XHRcdHZhciBhY3RpdmVQb2ludHMgPSAoZXZ0LnR5cGUgIT09ICdtb3VzZW91dCcpID8gdGhpcy5nZXRQb2ludHNBdEV2ZW50KGV2dCkgOiBbXTtcblx0XHRcdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdFx0cG9pbnQucmVzdG9yZShbJ2ZpbGxDb2xvcicsICdzdHJva2VDb2xvciddKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYWN0aXZlUG9pbnRzLCBmdW5jdGlvbihhY3RpdmVQb2ludCl7XG5cdFx0XHRcdFx0XHRhY3RpdmVQb2ludC5maWxsQ29sb3IgPSBhY3RpdmVQb2ludC5oaWdobGlnaHRGaWxsO1xuXHRcdFx0XHRcdFx0YWN0aXZlUG9pbnQuc3Ryb2tlQ29sb3IgPSBhY3RpdmVQb2ludC5oaWdobGlnaHRTdHJva2U7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5zaG93VG9vbHRpcChhY3RpdmVQb2ludHMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9JdGVyYXRlIHRocm91Z2ggZWFjaCBvZiB0aGUgZGF0YXNldHMsIGFuZCBidWlsZCB0aGlzIGludG8gYSBwcm9wZXJ0eSBvZiB0aGUgY2hhcnRcblx0XHRcdGhlbHBlcnMuZWFjaChkYXRhLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXG5cdFx0XHRcdHZhciBkYXRhc2V0T2JqZWN0ID0ge1xuXHRcdFx0XHRcdGxhYmVsIDogZGF0YXNldC5sYWJlbCB8fCBudWxsLFxuXHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRwb2ludENvbG9yIDogZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdHBvaW50U3Ryb2tlQ29sb3IgOiBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0cG9pbnRzIDogW11cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldE9iamVjdCk7XG5cblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5kYXRhLGZ1bmN0aW9uKGRhdGFQb2ludCxpbmRleCl7XG5cdFx0XHRcdFx0Ly9BZGQgYSBuZXcgcG9pbnQgZm9yIGVhY2ggcGllY2Ugb2YgZGF0YSwgcGFzc2luZyBhbnkgcmVxdWlyZWQgZGF0YSB0byBkcmF3LlxuXHRcdFx0XHRcdGRhdGFzZXRPYmplY3QucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7XG5cdFx0XHRcdFx0XHR2YWx1ZSA6IGRhdGFQb2ludCxcblx0XHRcdFx0XHRcdGxhYmVsIDogZGF0YS5sYWJlbHNbaW5kZXhdLFxuXHRcdFx0XHRcdFx0ZGF0YXNldExhYmVsOiBkYXRhc2V0LmxhYmVsLFxuXHRcdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0XHRmaWxsQ29sb3IgOiBkYXRhc2V0LnBvaW50Q29sb3IsXG5cdFx0XHRcdFx0XHRoaWdobGlnaHRGaWxsIDogZGF0YXNldC5wb2ludEhpZ2hsaWdodEZpbGwgfHwgZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdFx0aGlnaGxpZ2h0U3Ryb2tlIDogZGF0YXNldC5wb2ludEhpZ2hsaWdodFN0cm9rZSB8fCBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3Jcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdFx0dGhpcy5idWlsZFNjYWxlKGRhdGEubGFiZWxzKTtcblxuXG5cdFx0XHRcdHRoaXMuZWFjaFBvaW50cyhmdW5jdGlvbihwb2ludCwgaW5kZXgpe1xuXHRcdFx0XHRcdGhlbHBlcnMuZXh0ZW5kKHBvaW50LCB7XG5cdFx0XHRcdFx0XHR4OiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVgoaW5kZXgpLFxuXHRcdFx0XHRcdFx0eTogdGhpcy5zY2FsZS5lbmRQb2ludFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHBvaW50LnNhdmUoKTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdH0sdGhpcyk7XG5cblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnNjYWxlLnVwZGF0ZSgpO1xuXHRcdFx0Ly8gUmVzZXQgYW55IGhpZ2hsaWdodCBjb2xvdXJzIGJlZm9yZSB1cGRhdGluZy5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmFjdGl2ZUVsZW1lbnRzLCBmdW5jdGlvbihhY3RpdmVFbGVtZW50KXtcblx0XHRcdFx0YWN0aXZlRWxlbWVudC5yZXN0b3JlKFsnZmlsbENvbG9yJywgJ3N0cm9rZUNvbG9yJ10pO1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRwb2ludC5zYXZlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRlYWNoUG9pbnRzIDogZnVuY3Rpb24oY2FsbGJhY2spe1xuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cyxjYWxsYmFjayx0aGlzKTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0fSxcblx0XHRnZXRQb2ludHNBdEV2ZW50IDogZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgcG9pbnRzQXJyYXkgPSBbXSxcblx0XHRcdFx0ZXZlbnRQb3NpdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlKTtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdGlmIChwb2ludC5pblJhbmdlKGV2ZW50UG9zaXRpb24ueCxldmVudFBvc2l0aW9uLnkpKSBwb2ludHNBcnJheS5wdXNoKHBvaW50KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdFx0cmV0dXJuIHBvaW50c0FycmF5O1xuXHRcdH0sXG5cdFx0YnVpbGRTY2FsZSA6IGZ1bmN0aW9uKGxhYmVscyl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdHZhciBkYXRhVG90YWwgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRcdHNlbGYuZWFjaFBvaW50cyhmdW5jdGlvbihwb2ludCl7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2gocG9pbnQudmFsdWUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHNjYWxlT3B0aW9ucyA9IHtcblx0XHRcdFx0dGVtcGxhdGVTdHJpbmcgOiB0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxcblx0XHRcdFx0aGVpZ2h0IDogdGhpcy5jaGFydC5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoIDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdHRleHRDb2xvciA6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixcblx0XHRcdFx0b2Zmc2V0R3JpZExpbmVzIDogdGhpcy5vcHRpb25zLm9mZnNldEdyaWRMaW5lcyxcblx0XHRcdFx0Zm9udFNpemUgOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0Zm9udFN0eWxlIDogdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLFxuXHRcdFx0XHRmb250RmFtaWx5IDogdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSxcblx0XHRcdFx0dmFsdWVzQ291bnQgOiBsYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRiZWdpbkF0WmVybyA6IHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLFxuXHRcdFx0XHRpbnRlZ2Vyc09ubHkgOiB0aGlzLm9wdGlvbnMuc2NhbGVJbnRlZ2Vyc09ubHksXG5cdFx0XHRcdGNhbGN1bGF0ZVlSYW5nZSA6IGZ1bmN0aW9uKGN1cnJlbnRIZWlnaHQpe1xuXHRcdFx0XHRcdHZhciB1cGRhdGVkUmFuZ2VzID0gaGVscGVycy5jYWxjdWxhdGVTY2FsZVJhbmdlKFxuXHRcdFx0XHRcdFx0ZGF0YVRvdGFsKCksXG5cdFx0XHRcdFx0XHRjdXJyZW50SGVpZ2h0LFxuXHRcdFx0XHRcdFx0dGhpcy5mb250U2l6ZSxcblx0XHRcdFx0XHRcdHRoaXMuYmVnaW5BdFplcm8sXG5cdFx0XHRcdFx0XHR0aGlzLmludGVnZXJzT25seVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aGVscGVycy5leHRlbmQodGhpcywgdXBkYXRlZFJhbmdlcyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHhMYWJlbHMgOiBsYWJlbHMsXG5cdFx0XHRcdGZvbnQgOiBoZWxwZXJzLmZvbnRTdHJpbmcodGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsIHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSwgdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSksXG5cdFx0XHRcdGxpbmVXaWR0aCA6IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCxcblx0XHRcdFx0bGluZUNvbG9yIDogdGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLFxuXHRcdFx0XHRzaG93SG9yaXpvbnRhbExpbmVzIDogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0hvcml6b250YWxMaW5lcyxcblx0XHRcdFx0c2hvd1ZlcnRpY2FsTGluZXMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93VmVydGljYWxMaW5lcyxcblx0XHRcdFx0Z3JpZExpbmVXaWR0aCA6ICh0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzKSA/IHRoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lV2lkdGggOiAwLFxuXHRcdFx0XHRncmlkTGluZUNvbG9yIDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXMpID8gdGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVDb2xvciA6IFwicmdiYSgwLDAsMCwwKVwiLFxuXHRcdFx0XHRwYWRkaW5nOiAodGhpcy5vcHRpb25zLnNob3dTY2FsZSkgPyAwIDogdGhpcy5vcHRpb25zLnBvaW50RG90UmFkaXVzICsgdGhpcy5vcHRpb25zLnBvaW50RG90U3Ryb2tlV2lkdGgsXG5cdFx0XHRcdHNob3dMYWJlbHMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLFxuXHRcdFx0XHRkaXNwbGF5IDogdGhpcy5vcHRpb25zLnNob3dTY2FsZVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlKXtcblx0XHRcdFx0aGVscGVycy5leHRlbmQoc2NhbGVPcHRpb25zLCB7XG5cdFx0XHRcdFx0Y2FsY3VsYXRlWVJhbmdlOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRcdFx0c3RlcHM6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLFxuXHRcdFx0XHRcdHN0ZXBWYWx1ZTogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLFxuXHRcdFx0XHRcdG1pbjogdGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxcblx0XHRcdFx0XHRtYXg6IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUgKyAodGhpcy5vcHRpb25zLnNjYWxlU3RlcHMgKiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdHRoaXMuc2NhbGUgPSBuZXcgQ2hhcnQuU2NhbGUoc2NhbGVPcHRpb25zKTtcblx0XHR9LFxuXHRcdGFkZERhdGEgOiBmdW5jdGlvbih2YWx1ZXNBcnJheSxsYWJlbCl7XG5cdFx0XHQvL01hcCB0aGUgdmFsdWVzIGFycmF5IGZvciBlYWNoIG9mIHRoZSBkYXRhc2V0c1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godmFsdWVzQXJyYXksZnVuY3Rpb24odmFsdWUsZGF0YXNldEluZGV4KXtcblx0XHRcdFx0Ly9BZGQgYSBuZXcgcG9pbnQgZm9yIGVhY2ggcGllY2Ugb2YgZGF0YSwgcGFzc2luZyBhbnkgcmVxdWlyZWQgZGF0YSB0byBkcmF3LlxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7XG5cdFx0XHRcdFx0dmFsdWUgOiB2YWx1ZSxcblx0XHRcdFx0XHRsYWJlbCA6IGxhYmVsLFxuXHRcdFx0XHRcdGRhdGFzZXRMYWJlbDogdGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmxhYmVsLFxuXHRcdFx0XHRcdHg6IHRoaXMuc2NhbGUuY2FsY3VsYXRlWCh0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLFxuXHRcdFx0XHRcdHk6IHRoaXMuc2NhbGUuZW5kUG9pbnQsXG5cdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRTdHJva2VDb2xvcixcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRDb2xvclxuXHRcdFx0XHR9KSk7XG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR0aGlzLnNjYWxlLmFkZFhMYWJlbChsYWJlbCk7XG5cdFx0XHQvL1RoZW4gcmUtcmVuZGVyIHRoZSBjaGFydC5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZW1vdmVEYXRhIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuc2NhbGUucmVtb3ZlWExhYmVsKCk7XG5cdFx0XHQvL1RoZW4gcmUtcmVuZGVyIHRoZSBjaGFydC5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50cy5zaGlmdCgpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZWZsb3cgOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIG5ld1NjYWxlUHJvcHMgPSBoZWxwZXJzLmV4dGVuZCh7XG5cdFx0XHRcdGhlaWdodCA6IHRoaXMuY2hhcnQuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aCA6IHRoaXMuY2hhcnQud2lkdGhcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5zY2FsZS51cGRhdGUobmV3U2NhbGVQcm9wcyk7XG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oZWFzZSl7XG5cdFx0XHR2YXIgZWFzaW5nRGVjaW1hbCA9IGVhc2UgfHwgMTtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblxuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY2hhcnQuY3R4O1xuXG5cdFx0XHQvLyBTb21lIGhlbHBlciBtZXRob2RzIGZvciBnZXR0aW5nIHRoZSBuZXh0L3ByZXYgcG9pbnRzXG5cdFx0XHR2YXIgaGFzVmFsdWUgPSBmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0cmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XG5cdFx0XHR9LFxuXHRcdFx0bmV4dFBvaW50ID0gZnVuY3Rpb24ocG9pbnQsIGNvbGxlY3Rpb24sIGluZGV4KXtcblx0XHRcdFx0cmV0dXJuIGhlbHBlcnMuZmluZE5leHRXaGVyZShjb2xsZWN0aW9uLCBoYXNWYWx1ZSwgaW5kZXgpIHx8IHBvaW50O1xuXHRcdFx0fSxcblx0XHRcdHByZXZpb3VzUG9pbnQgPSBmdW5jdGlvbihwb2ludCwgY29sbGVjdGlvbiwgaW5kZXgpe1xuXHRcdFx0XHRyZXR1cm4gaGVscGVycy5maW5kUHJldmlvdXNXaGVyZShjb2xsZWN0aW9uLCBoYXNWYWx1ZSwgaW5kZXgpIHx8IHBvaW50O1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKCF0aGlzLnNjYWxlKSByZXR1cm47XG5cdFx0XHR0aGlzLnNjYWxlLmRyYXcoZWFzaW5nRGVjaW1hbCk7XG5cblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdHZhciBwb2ludHNXaXRoVmFsdWVzID0gaGVscGVycy53aGVyZShkYXRhc2V0LnBvaW50cywgaGFzVmFsdWUpO1xuXG5cdFx0XHRcdC8vVHJhbnNpdGlvbiBlYWNoIHBvaW50IGZpcnN0IHNvIHRoYXQgdGhlIGxpbmUgYW5kIHBvaW50IGRyYXdpbmcgaXNuJ3Qgb3V0IG9mIHN5bmNcblx0XHRcdFx0Ly9XZSBjYW4gdXNlIHRoaXMgZXh0cmEgbG9vcCB0byBjYWxjdWxhdGUgdGhlIGNvbnRyb2wgcG9pbnRzIG9mIHRoaXMgZGF0YXNldCBhbHNvIGluIHRoaXMgbG9vcFxuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KXtcblx0XHRcdFx0XHRpZiAocG9pbnQuaGFzVmFsdWUoKSl7XG5cdFx0XHRcdFx0XHRwb2ludC50cmFuc2l0aW9uKHtcblx0XHRcdFx0XHRcdFx0eSA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlWShwb2ludC52YWx1ZSksXG5cdFx0XHRcdFx0XHRcdHggOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVgoaW5kZXgpXG5cdFx0XHRcdFx0XHR9LCBlYXNpbmdEZWNpbWFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sdGhpcyk7XG5cblxuXHRcdFx0XHQvLyBDb250cm9sIHBvaW50cyBuZWVkIHRvIGJlIGNhbGN1bGF0ZWQgaW4gYSBzZXBhcmF0ZSBsb29wLCBiZWNhdXNlIHdlIG5lZWQgdG8ga25vdyB0aGUgY3VycmVudCB4L3kgb2YgdGhlIHBvaW50XG5cdFx0XHRcdC8vIFRoaXMgd291bGQgY2F1c2UgaXNzdWVzIHdoZW4gdGhlcmUgaXMgbm8gYW5pbWF0aW9uLCBiZWNhdXNlIHRoZSB5IG9mIHRoZSBuZXh0IHBvaW50IHdvdWxkIGJlIDAsIHNvIGJlemllcnMgd291bGQgYmUgc2tld2VkXG5cdFx0XHRcdGlmICh0aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmUpe1xuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChwb2ludHNXaXRoVmFsdWVzLCBmdW5jdGlvbihwb2ludCwgaW5kZXgpe1xuXHRcdFx0XHRcdFx0dmFyIHRlbnNpb24gPSAoaW5kZXggPiAwICYmIGluZGV4IDwgcG9pbnRzV2l0aFZhbHVlcy5sZW5ndGggLSAxKSA/IHRoaXMub3B0aW9ucy5iZXppZXJDdXJ2ZVRlbnNpb24gOiAwO1xuXHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cyA9IGhlbHBlcnMuc3BsaW5lQ3VydmUoXG5cdFx0XHRcdFx0XHRcdHByZXZpb3VzUG9pbnQocG9pbnQsIHBvaW50c1dpdGhWYWx1ZXMsIGluZGV4KSxcblx0XHRcdFx0XHRcdFx0cG9pbnQsXG5cdFx0XHRcdFx0XHRcdG5leHRQb2ludChwb2ludCwgcG9pbnRzV2l0aFZhbHVlcywgaW5kZXgpLFxuXHRcdFx0XHRcdFx0XHR0ZW5zaW9uXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBQcmV2ZW50IHRoZSBiZXppZXIgZ29pbmcgb3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHRoZSBncmFwaFxuXG5cdFx0XHRcdFx0XHQvLyBDYXAgcHV0ZXIgYmV6aWVyIGhhbmRsZXMgdG8gdGhlIHVwcGVyL2xvd2VyIHNjYWxlIGJvdW5kc1xuXHRcdFx0XHRcdFx0aWYgKHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA+IHRoaXMuc2NhbGUuZW5kUG9pbnQpe1xuXHRcdFx0XHRcdFx0XHRwb2ludC5jb250cm9sUG9pbnRzLm91dGVyLnkgPSB0aGlzLnNjYWxlLmVuZFBvaW50O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAocG9pbnQuY29udHJvbFBvaW50cy5vdXRlci55IDwgdGhpcy5zY2FsZS5zdGFydFBvaW50KXtcblx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5vdXRlci55ID0gdGhpcy5zY2FsZS5zdGFydFBvaW50O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDYXAgaW5uZXIgYmV6aWVyIGhhbmRsZXMgdG8gdGhlIHVwcGVyL2xvd2VyIHNjYWxlIGJvdW5kc1xuXHRcdFx0XHRcdFx0aWYgKHBvaW50LmNvbnRyb2xQb2ludHMuaW5uZXIueSA+IHRoaXMuc2NhbGUuZW5kUG9pbnQpe1xuXHRcdFx0XHRcdFx0XHRwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLnkgPSB0aGlzLnNjYWxlLmVuZFBvaW50O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAocG9pbnQuY29udHJvbFBvaW50cy5pbm5lci55IDwgdGhpcy5zY2FsZS5zdGFydFBvaW50KXtcblx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5pbm5lci55ID0gdGhpcy5zY2FsZS5zdGFydFBvaW50O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sdGhpcyk7XG5cdFx0XHRcdH1cblxuXG5cdFx0XHRcdC8vRHJhdyB0aGUgbGluZSBiZXR3ZWVuIGFsbCB0aGUgcG9pbnRzXG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLm9wdGlvbnMuZGF0YXNldFN0cm9rZVdpZHRoO1xuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBkYXRhc2V0LnN0cm9rZUNvbG9yO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKHBvaW50c1dpdGhWYWx1ZXMsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCl7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSAwKXtcblx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0XHRpZih0aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmUpe1xuXHRcdFx0XHRcdFx0XHR2YXIgcHJldmlvdXMgPSBwcmV2aW91c1BvaW50KHBvaW50LCBwb2ludHNXaXRoVmFsdWVzLCBpbmRleCk7XG5cblx0XHRcdFx0XHRcdFx0Y3R4LmJlemllckN1cnZlVG8oXG5cdFx0XHRcdFx0XHRcdFx0cHJldmlvdXMuY29udHJvbFBvaW50cy5vdXRlci54LFxuXHRcdFx0XHRcdFx0XHRcdHByZXZpb3VzLmNvbnRyb2xQb2ludHMub3V0ZXIueSxcblx0XHRcdFx0XHRcdFx0XHRwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLngsXG5cdFx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5pbm5lci55LFxuXHRcdFx0XHRcdFx0XHRcdHBvaW50LngsXG5cdFx0XHRcdFx0XHRcdFx0cG9pbnQueVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhwb2ludC54LHBvaW50LnkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kYXRhc2V0U3Ryb2tlKSB7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kYXRhc2V0RmlsbCAmJiBwb2ludHNXaXRoVmFsdWVzLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRcdC8vUm91bmQgb2ZmIHRoZSBsaW5lIGJ5IGdvaW5nIHRvIHRoZSBiYXNlIG9mIHRoZSBjaGFydCwgYmFjayB0byB0aGUgc3RhcnQsIHRoZW4gZmlsbC5cblx0XHRcdFx0XHRjdHgubGluZVRvKHBvaW50c1dpdGhWYWx1ZXNbcG9pbnRzV2l0aFZhbHVlcy5sZW5ndGggLSAxXS54LCB0aGlzLnNjYWxlLmVuZFBvaW50KTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHBvaW50c1dpdGhWYWx1ZXNbMF0ueCwgdGhpcy5zY2FsZS5lbmRQb2ludCk7XG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGRhdGFzZXQuZmlsbENvbG9yO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9Ob3cgZHJhdyB0aGUgcG9pbnRzIG92ZXIgdGhlIGxpbmVcblx0XHRcdFx0Ly9BIGxpdHRsZSBpbmVmZmljaWVudCBkb3VibGUgbG9vcGluZywgYnV0IGJldHRlciB0aGFuIHRoZSBsaW5lXG5cdFx0XHRcdC8vbGFnZ2luZyBiZWhpbmQgdGhlIHBvaW50IHBvc2l0aW9uc1xuXHRcdFx0XHRoZWxwZXJzLmVhY2gocG9pbnRzV2l0aFZhbHVlcyxmdW5jdGlvbihwb2ludCl7XG5cdFx0XHRcdFx0cG9pbnQuZHJhdygpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0fVxuXHR9KTtcblxuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKXtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHJvb3QgPSB0aGlzLFxuXHRcdENoYXJ0ID0gcm9vdC5DaGFydCxcblx0XHQvL0NhY2hlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIENoYXJ0LmhlbHBlcnNcblx0XHRoZWxwZXJzID0gQ2hhcnQuaGVscGVycztcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHQvL0Jvb2xlYW4gLSBTaG93IGEgYmFja2Ryb3AgdG8gdGhlIHNjYWxlIGxhYmVsXG5cdFx0c2NhbGVTaG93TGFiZWxCYWNrZHJvcCA6IHRydWUsXG5cblx0XHQvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgdGhlIGxhYmVsIGJhY2tkcm9wXG5cdFx0c2NhbGVCYWNrZHJvcENvbG9yIDogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuNzUpXCIsXG5cblx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIGJlZ2luIGF0IHplcm9cblx0XHRzY2FsZUJlZ2luQXRaZXJvIDogdHJ1ZSxcblxuXHRcdC8vTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgYWJvdmUgJiBiZWxvdyB0aGUgbGFiZWwgaW4gcGl4ZWxzXG5cdFx0c2NhbGVCYWNrZHJvcFBhZGRpbmdZIDogMixcblxuXHRcdC8vTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgdG8gdGhlIHNpZGUgb2YgdGhlIGxhYmVsIGluIHBpeGVsc1xuXHRcdHNjYWxlQmFja2Ryb3BQYWRkaW5nWCA6IDIsXG5cblx0XHQvL0Jvb2xlYW4gLSBTaG93IGxpbmUgZm9yIGVhY2ggdmFsdWUgaW4gdGhlIHNjYWxlXG5cdFx0c2NhbGVTaG93TGluZSA6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBTdHJva2UgYSBsaW5lIGFyb3VuZCBlYWNoIHNlZ21lbnQgaW4gdGhlIGNoYXJ0XG5cdFx0c2VnbWVudFNob3dTdHJva2UgOiB0cnVlLFxuXG5cdFx0Ly9TdHJpbmcgLSBUaGUgY29sb3VyIG9mIHRoZSBzdHJva2Ugb24gZWFjaCBzZWdtZW50LlxuXHRcdHNlZ21lbnRTdHJva2VDb2xvciA6IFwiI2ZmZlwiLFxuXG5cdFx0Ly9OdW1iZXIgLSBUaGUgd2lkdGggb2YgdGhlIHN0cm9rZSB2YWx1ZSBpbiBwaXhlbHNcblx0XHRzZWdtZW50U3Ryb2tlV2lkdGggOiAyLFxuXG5cdFx0Ly9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXG5cdFx0YW5pbWF0aW9uU3RlcHMgOiAxMDAsXG5cblx0XHQvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0LlxuXHRcdGFuaW1hdGlvbkVhc2luZyA6IFwiZWFzZU91dEJvdW5jZVwiLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgY2hhcnRcblx0XHRhbmltYXRlUm90YXRlIDogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSBzY2FsaW5nIHRoZSBjaGFydCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGUgOiBmYWxzZSxcblxuXHRcdC8vU3RyaW5nIC0gQSBsZWdlbmQgdGVtcGxhdGVcblx0XHRsZWdlbmRUZW1wbGF0ZSA6IFwiPHVsIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcXFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZC1pY29uXFxcIiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlxcXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmQtdGV4dFxcXCI+PCVpZihzZWdtZW50c1tpXS5sYWJlbCl7JT48JT1zZWdtZW50c1tpXS5sYWJlbCU+PCV9JT48L3NwYW4+PC9saT48JX0lPjwvdWw+XCJcblx0fTtcblxuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHQvL1Bhc3NpbmcgaW4gYSBuYW1lIHJlZ2lzdGVycyB0aGlzIGNoYXJ0IGluIHRoZSBDaGFydCBuYW1lc3BhY2Vcblx0XHRuYW1lOiBcIlBvbGFyQXJlYVwiLFxuXHRcdC8vUHJvdmlkaW5nIGEgZGVmYXVsdHMgd2lsbCBhbHNvIHJlZ2lzdGVyIHRoZSBkZWZhdWx0cyBpbiB0aGUgY2hhcnQgbmFtZXNwYWNlXG5cdFx0ZGVmYXVsdHMgOiBkZWZhdWx0Q29uZmlnLFxuXHRcdC8vSW5pdGlhbGl6ZSBpcyBmaXJlZCB3aGVuIHRoZSBjaGFydCBpcyBpbml0aWFsaXplZCAtIERhdGEgaXMgcGFzc2VkIGluIGFzIGEgcGFyYW1ldGVyXG5cdFx0Ly9Db25maWcgaXMgYXV0b21hdGljYWxseSBtZXJnZWQgYnkgdGhlIGNvcmUgb2YgQ2hhcnQuanMsIGFuZCBpcyBhdmFpbGFibGUgYXQgdGhpcy5vcHRpb25zXG5cdFx0aW5pdGlhbGl6ZTogIGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dGhpcy5zZWdtZW50cyA9IFtdO1xuXHRcdFx0Ly9EZWNsYXJlIHNlZ21lbnQgY2xhc3MgYXMgYSBjaGFydCBpbnN0YW5jZSBzcGVjaWZpYyBjbGFzcywgc28gaXQgY2FuIHNoYXJlIHByb3BzIGZvciB0aGlzIGluc3RhbmNlXG5cdFx0XHR0aGlzLlNlZ21lbnRBcmMgPSBDaGFydC5BcmMuZXh0ZW5kKHtcblx0XHRcdFx0c2hvd1N0cm9rZSA6IHRoaXMub3B0aW9ucy5zZWdtZW50U2hvd1N0cm9rZSxcblx0XHRcdFx0c3Ryb2tlV2lkdGggOiB0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZVdpZHRoLFxuXHRcdFx0XHRzdHJva2VDb2xvciA6IHRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdGN0eCA6IHRoaXMuY2hhcnQuY3R4LFxuXHRcdFx0XHRpbm5lclJhZGl1cyA6IDAsXG5cdFx0XHRcdHggOiB0aGlzLmNoYXJ0LndpZHRoLzIsXG5cdFx0XHRcdHkgOiB0aGlzLmNoYXJ0LmhlaWdodC8yXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuc2NhbGUgPSBuZXcgQ2hhcnQuUmFkaWFsU2NhbGUoe1xuXHRcdFx0XHRkaXNwbGF5OiB0aGlzLm9wdGlvbnMuc2hvd1NjYWxlLFxuXHRcdFx0XHRmb250U3R5bGU6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSxcblx0XHRcdFx0Zm9udFNpemU6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLFxuXHRcdFx0XHRmb250RmFtaWx5OiB0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5LFxuXHRcdFx0XHRmb250Q29sb3I6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixcblx0XHRcdFx0c2hvd0xhYmVsczogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0xhYmVscyxcblx0XHRcdFx0c2hvd0xhYmVsQmFja2Ryb3A6IHRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbEJhY2tkcm9wLFxuXHRcdFx0XHRiYWNrZHJvcENvbG9yOiB0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcENvbG9yLFxuXHRcdFx0XHRiYWNrZHJvcFBhZGRpbmdZIDogdGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BQYWRkaW5nWSxcblx0XHRcdFx0YmFja2Ryb3BQYWRkaW5nWDogdGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BQYWRkaW5nWCxcblx0XHRcdFx0bGluZVdpZHRoOiAodGhpcy5vcHRpb25zLnNjYWxlU2hvd0xpbmUpID8gdGhpcy5vcHRpb25zLnNjYWxlTGluZVdpZHRoIDogMCxcblx0XHRcdFx0bGluZUNvbG9yOiB0aGlzLm9wdGlvbnMuc2NhbGVMaW5lQ29sb3IsXG5cdFx0XHRcdGxpbmVBcmM6IHRydWUsXG5cdFx0XHRcdHdpZHRoOiB0aGlzLmNoYXJ0LndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuY2hhcnQuaGVpZ2h0LFxuXHRcdFx0XHR4Q2VudGVyOiB0aGlzLmNoYXJ0LndpZHRoLzIsXG5cdFx0XHRcdHlDZW50ZXI6IHRoaXMuY2hhcnQuaGVpZ2h0LzIsXG5cdFx0XHRcdGN0eCA6IHRoaXMuY2hhcnQuY3R4LFxuXHRcdFx0XHR0ZW1wbGF0ZVN0cmluZzogdGhpcy5vcHRpb25zLnNjYWxlTGFiZWwsXG5cdFx0XHRcdHZhbHVlc0NvdW50OiBkYXRhLmxlbmd0aFxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMudXBkYXRlU2NhbGVSYW5nZShkYXRhKTtcblxuXHRcdFx0dGhpcy5zY2FsZS51cGRhdGUoKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEsZnVuY3Rpb24oc2VnbWVudCxpbmRleCl7XG5cdFx0XHRcdHRoaXMuYWRkRGF0YShzZWdtZW50LGluZGV4LHRydWUpO1xuXHRcdFx0fSx0aGlzKTtcblxuXHRcdFx0Ly9TZXQgdXAgdG9vbHRpcCBldmVudHMgb24gdGhlIGNoYXJ0XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyl7XG5cdFx0XHRcdGhlbHBlcnMuYmluZEV2ZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cywgZnVuY3Rpb24oZXZ0KXtcblx0XHRcdFx0XHR2YXIgYWN0aXZlU2VnbWVudHMgPSAoZXZ0LnR5cGUgIT09ICdtb3VzZW91dCcpID8gdGhpcy5nZXRTZWdtZW50c0F0RXZlbnQoZXZ0KSA6IFtdO1xuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRcdFx0c2VnbWVudC5yZXN0b3JlKFtcImZpbGxDb2xvclwiXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKGFjdGl2ZVNlZ21lbnRzLGZ1bmN0aW9uKGFjdGl2ZVNlZ21lbnQpe1xuXHRcdFx0XHRcdFx0YWN0aXZlU2VnbWVudC5maWxsQ29sb3IgPSBhY3RpdmVTZWdtZW50LmhpZ2hsaWdodENvbG9yO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuc2hvd1Rvb2x0aXAoYWN0aXZlU2VnbWVudHMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXHRcdGdldFNlZ21lbnRzQXRFdmVudCA6IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIHNlZ21lbnRzQXJyYXkgPSBbXTtcblxuXHRcdFx0dmFyIGxvY2F0aW9uID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uKGUpO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0aWYgKHNlZ21lbnQuaW5SYW5nZShsb2NhdGlvbi54LGxvY2F0aW9uLnkpKSBzZWdtZW50c0FycmF5LnB1c2goc2VnbWVudCk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdFx0cmV0dXJuIHNlZ21lbnRzQXJyYXk7XG5cdFx0fSxcblx0XHRhZGREYXRhIDogZnVuY3Rpb24oc2VnbWVudCwgYXRJbmRleCwgc2lsZW50KXtcblx0XHRcdHZhciBpbmRleCA9IGF0SW5kZXggfHwgdGhpcy5zZWdtZW50cy5sZW5ndGg7XG5cblx0XHRcdHRoaXMuc2VnbWVudHMuc3BsaWNlKGluZGV4LCAwLCBuZXcgdGhpcy5TZWdtZW50QXJjKHtcblx0XHRcdFx0ZmlsbENvbG9yOiBzZWdtZW50LmNvbG9yLFxuXHRcdFx0XHRoaWdobGlnaHRDb2xvcjogc2VnbWVudC5oaWdobGlnaHQgfHwgc2VnbWVudC5jb2xvcixcblx0XHRcdFx0bGFiZWw6IHNlZ21lbnQubGFiZWwsXG5cdFx0XHRcdHZhbHVlOiBzZWdtZW50LnZhbHVlLFxuXHRcdFx0XHRvdXRlclJhZGl1czogKHRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGUpID8gMCA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHNlZ21lbnQudmFsdWUpLFxuXHRcdFx0XHRjaXJjdW1mZXJlbmNlOiAodGhpcy5vcHRpb25zLmFuaW1hdGVSb3RhdGUpID8gMCA6IHRoaXMuc2NhbGUuZ2V0Q2lyY3VtZmVyZW5jZSgpLFxuXHRcdFx0XHRzdGFydEFuZ2xlOiBNYXRoLlBJICogMS41XG5cdFx0XHR9KSk7XG5cdFx0XHRpZiAoIXNpbGVudCl7XG5cdFx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZW1vdmVEYXRhOiBmdW5jdGlvbihhdEluZGV4KXtcblx0XHRcdHZhciBpbmRleFRvRGVsZXRlID0gKGhlbHBlcnMuaXNOdW1iZXIoYXRJbmRleCkpID8gYXRJbmRleCA6IHRoaXMuc2VnbWVudHMubGVuZ3RoLTE7XG5cdFx0XHR0aGlzLnNlZ21lbnRzLnNwbGljZShpbmRleFRvRGVsZXRlLCAxKTtcblx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlVG90YWw6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dGhpcy50b3RhbCA9IDA7XG5cdFx0XHRoZWxwZXJzLmVhY2goZGF0YSxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0dGhpcy50b3RhbCArPSBzZWdtZW50LnZhbHVlO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHRoaXMuc2NhbGUudmFsdWVzQ291bnQgPSB0aGlzLnNlZ21lbnRzLmxlbmd0aDtcblx0XHR9LFxuXHRcdHVwZGF0ZVNjYWxlUmFuZ2U6IGZ1bmN0aW9uKGRhdGFwb2ludHMpe1xuXHRcdFx0dmFyIHZhbHVlc0FycmF5ID0gW107XG5cdFx0XHRoZWxwZXJzLmVhY2goZGF0YXBvaW50cyxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0dmFsdWVzQXJyYXkucHVzaChzZWdtZW50LnZhbHVlKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgc2NhbGVTaXplcyA9ICh0aGlzLm9wdGlvbnMuc2NhbGVPdmVycmlkZSkgP1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3RlcHM6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLFxuXHRcdFx0XHRcdHN0ZXBWYWx1ZTogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLFxuXHRcdFx0XHRcdG1pbjogdGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxcblx0XHRcdFx0XHRtYXg6IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUgKyAodGhpcy5vcHRpb25zLnNjYWxlU3RlcHMgKiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgpXG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRoZWxwZXJzLmNhbGN1bGF0ZVNjYWxlUmFuZ2UoXG5cdFx0XHRcdFx0dmFsdWVzQXJyYXksXG5cdFx0XHRcdFx0aGVscGVycy5taW4oW3RoaXMuY2hhcnQud2lkdGgsIHRoaXMuY2hhcnQuaGVpZ2h0XSkvMixcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuc2NhbGVCZWdpbkF0WmVybyxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuc2NhbGVJbnRlZ2Vyc09ubHlcblx0XHRcdFx0KTtcblxuXHRcdFx0aGVscGVycy5leHRlbmQoXG5cdFx0XHRcdHRoaXMuc2NhbGUsXG5cdFx0XHRcdHNjYWxlU2l6ZXMsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzaXplOiBoZWxwZXJzLm1pbihbdGhpcy5jaGFydC53aWR0aCwgdGhpcy5jaGFydC5oZWlnaHRdKSxcblx0XHRcdFx0XHR4Q2VudGVyOiB0aGlzLmNoYXJ0LndpZHRoLzIsXG5cdFx0XHRcdFx0eUNlbnRlcjogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5jYWxjdWxhdGVUb3RhbCh0aGlzLnNlZ21lbnRzKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdHNlZ21lbnQuc2F2ZSgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0cmVmbG93IDogZnVuY3Rpb24oKXtcblx0XHRcdGhlbHBlcnMuZXh0ZW5kKHRoaXMuU2VnbWVudEFyYy5wcm90b3R5cGUse1xuXHRcdFx0XHR4IDogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5IDogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLnVwZGF0ZVNjYWxlUmFuZ2UodGhpcy5zZWdtZW50cyk7XG5cdFx0XHR0aGlzLnNjYWxlLnVwZGF0ZSgpO1xuXG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLnNjYWxlLHtcblx0XHRcdFx0eENlbnRlcjogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5Q2VudGVyOiB0aGlzLmNoYXJ0LmhlaWdodC8yXG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsIGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRzZWdtZW50LnVwZGF0ZSh7XG5cdFx0XHRcdFx0b3V0ZXJSYWRpdXMgOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldChzZWdtZW50LnZhbHVlKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oZWFzZSl7XG5cdFx0XHR2YXIgZWFzaW5nRGVjaW1hbCA9IGVhc2UgfHwgMTtcblx0XHRcdC8vQ2xlYXIgJiBkcmF3IHRoZSBjYW52YXNcblx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQsIGluZGV4KXtcblx0XHRcdFx0c2VnbWVudC50cmFuc2l0aW9uKHtcblx0XHRcdFx0XHRjaXJjdW1mZXJlbmNlIDogdGhpcy5zY2FsZS5nZXRDaXJjdW1mZXJlbmNlKCksXG5cdFx0XHRcdFx0b3V0ZXJSYWRpdXMgOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldChzZWdtZW50LnZhbHVlKVxuXHRcdFx0XHR9LGVhc2luZ0RlY2ltYWwpO1xuXG5cdFx0XHRcdHNlZ21lbnQuZW5kQW5nbGUgPSBzZWdtZW50LnN0YXJ0QW5nbGUgKyBzZWdtZW50LmNpcmN1bWZlcmVuY2U7XG5cblx0XHRcdFx0Ly8gSWYgd2UndmUgcmVtb3ZlZCB0aGUgZmlyc3Qgc2VnbWVudCB3ZSBuZWVkIHRvIHNldCB0aGUgZmlyc3Qgb25lIHRvXG5cdFx0XHRcdC8vIHN0YXJ0IGF0IHRoZSB0b3AuXG5cdFx0XHRcdGlmIChpbmRleCA9PT0gMCl7XG5cdFx0XHRcdFx0c2VnbWVudC5zdGFydEFuZ2xlID0gTWF0aC5QSSAqIDEuNTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vQ2hlY2sgdG8gc2VlIGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudCwgaWYgbm90IGdldCB0aGUgbmV4dCBhbmQgdXBkYXRlIHRoZSBzdGFydCBhbmdsZVxuXHRcdFx0XHRpZiAoaW5kZXggPCB0aGlzLnNlZ21lbnRzLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRcdHRoaXMuc2VnbWVudHNbaW5kZXgrMV0uc3RhcnRBbmdsZSA9IHNlZ21lbnQuZW5kQW5nbGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VnbWVudC5kcmF3KCk7XG5cdFx0XHR9LCB0aGlzKTtcblx0XHRcdHRoaXMuc2NhbGUuZHJhdygpO1xuXHRcdH1cblx0fSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpe1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgcm9vdCA9IHRoaXMsXG5cdFx0Q2hhcnQgPSByb290LkNoYXJ0LFxuXHRcdGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzO1xuXG5cblxuXHRDaGFydC5UeXBlLmV4dGVuZCh7XG5cdFx0bmFtZTogXCJSYWRhclwiLFxuXHRcdGRlZmF1bHRzOntcblx0XHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBsaW5lcyBmb3IgZWFjaCBzY2FsZSBwb2ludFxuXHRcdFx0c2NhbGVTaG93TGluZSA6IHRydWUsXG5cblx0XHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgd2Ugc2hvdyB0aGUgYW5nbGUgbGluZXMgb3V0IG9mIHRoZSByYWRhclxuXHRcdFx0YW5nbGVTaG93TGluZU91dCA6IHRydWUsXG5cblx0XHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBsYWJlbHMgb24gdGhlIHNjYWxlXG5cdFx0XHRzY2FsZVNob3dMYWJlbHMgOiBmYWxzZSxcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdGhlIHNjYWxlIHNob3VsZCBiZWdpbiBhdCB6ZXJvXG5cdFx0XHRzY2FsZUJlZ2luQXRaZXJvIDogdHJ1ZSxcblxuXHRcdFx0Ly9TdHJpbmcgLSBDb2xvdXIgb2YgdGhlIGFuZ2xlIGxpbmVcblx0XHRcdGFuZ2xlTGluZUNvbG9yIDogXCJyZ2JhKDAsMCwwLC4xKVwiLFxuXG5cdFx0XHQvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHRoZSBhbmdsZSBsaW5lXG5cdFx0XHRhbmdsZUxpbmVXaWR0aCA6IDEsXG5cblx0XHRcdC8vTnVtYmVyIC0gSW50ZXJ2YWwgYXQgd2hpY2ggdG8gZHJhdyBhbmdsZSBsaW5lcyAoXCJldmVyeSBOdGggcG9pbnRcIilcblx0XHRcdGFuZ2xlTGluZUludGVydmFsOiAxLFxuXG5cdFx0XHQvL1N0cmluZyAtIFBvaW50IGxhYmVsIGZvbnQgZGVjbGFyYXRpb25cblx0XHRcdHBvaW50TGFiZWxGb250RmFtaWx5IDogXCInQXJpYWwnXCIsXG5cblx0XHRcdC8vU3RyaW5nIC0gUG9pbnQgbGFiZWwgZm9udCB3ZWlnaHRcblx0XHRcdHBvaW50TGFiZWxGb250U3R5bGUgOiBcIm5vcm1hbFwiLFxuXG5cdFx0XHQvL051bWJlciAtIFBvaW50IGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHBvaW50TGFiZWxGb250U2l6ZSA6IDEwLFxuXG5cdFx0XHQvL1N0cmluZyAtIFBvaW50IGxhYmVsIGZvbnQgY29sb3VyXG5cdFx0XHRwb2ludExhYmVsRm9udENvbG9yIDogXCIjNjY2XCIsXG5cblx0XHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIGRvdCBmb3IgZWFjaCBwb2ludFxuXHRcdFx0cG9pbnREb3QgOiB0cnVlLFxuXG5cdFx0XHQvL051bWJlciAtIFJhZGl1cyBvZiBlYWNoIHBvaW50IGRvdCBpbiBwaXhlbHNcblx0XHRcdHBvaW50RG90UmFkaXVzIDogMyxcblxuXHRcdFx0Ly9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiBwb2ludCBkb3Qgc3Ryb2tlXG5cdFx0XHRwb2ludERvdFN0cm9rZVdpZHRoIDogMSxcblxuXHRcdFx0Ly9OdW1iZXIgLSBhbW91bnQgZXh0cmEgdG8gYWRkIHRvIHRoZSByYWRpdXMgdG8gY2F0ZXIgZm9yIGhpdCBkZXRlY3Rpb24gb3V0c2lkZSB0aGUgZHJhd24gcG9pbnRcblx0XHRcdHBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzIDogMjAsXG5cblx0XHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIHN0cm9rZSBmb3IgZGF0YXNldHNcblx0XHRcdGRhdGFzZXRTdHJva2UgOiB0cnVlLFxuXG5cdFx0XHQvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIGRhdGFzZXQgc3Ryb2tlXG5cdFx0XHRkYXRhc2V0U3Ryb2tlV2lkdGggOiAyLFxuXG5cdFx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIGZpbGwgdGhlIGRhdGFzZXQgd2l0aCBhIGNvbG91clxuXHRcdFx0ZGF0YXNldEZpbGwgOiB0cnVlLFxuXG5cdFx0XHQvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXG5cdFx0XHRsZWdlbmRUZW1wbGF0ZSA6IFwiPHVsIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcXFwiPjwlIGZvciAodmFyIGk9MDsgaTxkYXRhc2V0cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZC1pY29uXFxcIiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjo8JT1kYXRhc2V0c1tpXS5zdHJva2VDb2xvciU+XFxcIj48L3NwYW4+PHNwYW4gY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZC10ZXh0XFxcIj48JWlmKGRhdGFzZXRzW2ldLmxhYmVsKXslPjwlPWRhdGFzZXRzW2ldLmxhYmVsJT48JX0lPjwvc3Bhbj48L2xpPjwlfSU+PC91bD5cIlxuXG5cdFx0fSxcblxuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dGhpcy5Qb2ludENsYXNzID0gQ2hhcnQuUG9pbnQuZXh0ZW5kKHtcblx0XHRcdFx0c3Ryb2tlV2lkdGggOiB0aGlzLm9wdGlvbnMucG9pbnREb3RTdHJva2VXaWR0aCxcblx0XHRcdFx0cmFkaXVzIDogdGhpcy5vcHRpb25zLnBvaW50RG90UmFkaXVzLFxuXHRcdFx0XHRkaXNwbGF5OiB0aGlzLm9wdGlvbnMucG9pbnREb3QsXG5cdFx0XHRcdGhpdERldGVjdGlvblJhZGl1cyA6IHRoaXMub3B0aW9ucy5wb2ludEhpdERldGVjdGlvblJhZGl1cyxcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHhcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmRhdGFzZXRzID0gW107XG5cblx0XHRcdHRoaXMuYnVpbGRTY2FsZShkYXRhKTtcblxuXHRcdFx0Ly9TZXQgdXAgdG9vbHRpcCBldmVudHMgb24gdGhlIGNoYXJ0XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyl7XG5cdFx0XHRcdGhlbHBlcnMuYmluZEV2ZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cywgZnVuY3Rpb24oZXZ0KXtcblx0XHRcdFx0XHR2YXIgYWN0aXZlUG9pbnRzQ29sbGVjdGlvbiA9IChldnQudHlwZSAhPT0gJ21vdXNlb3V0JykgPyB0aGlzLmdldFBvaW50c0F0RXZlbnQoZXZ0KSA6IFtdO1xuXG5cdFx0XHRcdFx0dGhpcy5lYWNoUG9pbnRzKGZ1bmN0aW9uKHBvaW50KXtcblx0XHRcdFx0XHRcdHBvaW50LnJlc3RvcmUoWydmaWxsQ29sb3InLCAnc3Ryb2tlQ29sb3InXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKGFjdGl2ZVBvaW50c0NvbGxlY3Rpb24sIGZ1bmN0aW9uKGFjdGl2ZVBvaW50KXtcblx0XHRcdFx0XHRcdGFjdGl2ZVBvaW50LmZpbGxDb2xvciA9IGFjdGl2ZVBvaW50LmhpZ2hsaWdodEZpbGw7XG5cdFx0XHRcdFx0XHRhY3RpdmVQb2ludC5zdHJva2VDb2xvciA9IGFjdGl2ZVBvaW50LmhpZ2hsaWdodFN0cm9rZTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHRoaXMuc2hvd1Rvb2x0aXAoYWN0aXZlUG9pbnRzQ29sbGVjdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvL0l0ZXJhdGUgdGhyb3VnaCBlYWNoIG9mIHRoZSBkYXRhc2V0cywgYW5kIGJ1aWxkIHRoaXMgaW50byBhIHByb3BlcnR5IG9mIHRoZSBjaGFydFxuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cblx0XHRcdFx0dmFyIGRhdGFzZXRPYmplY3QgPSB7XG5cdFx0XHRcdFx0bGFiZWw6IGRhdGFzZXQubGFiZWwgfHwgbnVsbCxcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiBkYXRhc2V0LmZpbGxDb2xvcixcblx0XHRcdFx0XHRzdHJva2VDb2xvciA6IGRhdGFzZXQuc3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0cG9pbnRDb2xvciA6IGRhdGFzZXQucG9pbnRDb2xvcixcblx0XHRcdFx0XHRwb2ludFN0cm9rZUNvbG9yIDogZGF0YXNldC5wb2ludFN0cm9rZUNvbG9yLFxuXHRcdFx0XHRcdHBvaW50cyA6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5kYXRhc2V0cy5wdXNoKGRhdGFzZXRPYmplY3QpO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsZnVuY3Rpb24oZGF0YVBvaW50LGluZGV4KXtcblx0XHRcdFx0XHQvL0FkZCBhIG5ldyBwb2ludCBmb3IgZWFjaCBwaWVjZSBvZiBkYXRhLCBwYXNzaW5nIGFueSByZXF1aXJlZCBkYXRhIHRvIGRyYXcuXG5cdFx0XHRcdFx0dmFyIHBvaW50UG9zaXRpb247XG5cdFx0XHRcdFx0aWYgKCF0aGlzLnNjYWxlLmFuaW1hdGlvbil7XG5cdFx0XHRcdFx0XHRwb2ludFBvc2l0aW9uID0gdGhpcy5zY2FsZS5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldChkYXRhUG9pbnQpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YXNldE9iamVjdC5wb2ludHMucHVzaChuZXcgdGhpcy5Qb2ludENsYXNzKHtcblx0XHRcdFx0XHRcdHZhbHVlIDogZGF0YVBvaW50LFxuXHRcdFx0XHRcdFx0bGFiZWwgOiBkYXRhLmxhYmVsc1tpbmRleF0sXG5cdFx0XHRcdFx0XHRkYXRhc2V0TGFiZWw6IGRhdGFzZXQubGFiZWwsXG5cdFx0XHRcdFx0XHR4OiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgPyB0aGlzLnNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLngsXG5cdFx0XHRcdFx0XHR5OiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgPyB0aGlzLnNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnksXG5cdFx0XHRcdFx0XHRzdHJva2VDb2xvciA6IGRhdGFzZXQucG9pbnRTdHJva2VDb2xvcixcblx0XHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQucG9pbnRDb2xvcixcblx0XHRcdFx0XHRcdGhpZ2hsaWdodEZpbGwgOiBkYXRhc2V0LnBvaW50SGlnaGxpZ2h0RmlsbCB8fCBkYXRhc2V0LnBvaW50Q29sb3IsXG5cdFx0XHRcdFx0XHRoaWdobGlnaHRTdHJva2UgOiBkYXRhc2V0LnBvaW50SGlnaGxpZ2h0U3Ryb2tlIHx8IGRhdGFzZXQucG9pbnRTdHJva2VDb2xvclxuXHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0fSx0aGlzKTtcblxuXHRcdFx0fSx0aGlzKTtcblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXHRcdGVhY2hQb2ludHMgOiBmdW5jdGlvbihjYWxsYmFjayl7XG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQucG9pbnRzLGNhbGxiYWNrLHRoaXMpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHR9LFxuXG5cdFx0Z2V0UG9pbnRzQXRFdmVudCA6IGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHR2YXIgbW91c2VQb3NpdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihldnQpLFxuXHRcdFx0XHRmcm9tQ2VudGVyID0gaGVscGVycy5nZXRBbmdsZUZyb21Qb2ludCh7XG5cdFx0XHRcdFx0eDogdGhpcy5zY2FsZS54Q2VudGVyLFxuXHRcdFx0XHRcdHk6IHRoaXMuc2NhbGUueUNlbnRlclxuXHRcdFx0XHR9LCBtb3VzZVBvc2l0aW9uKTtcblxuXHRcdFx0dmFyIGFuZ2xlUGVySW5kZXggPSAoTWF0aC5QSSAqIDIpIC90aGlzLnNjYWxlLnZhbHVlc0NvdW50LFxuXHRcdFx0XHRwb2ludEluZGV4ID0gTWF0aC5yb3VuZCgoZnJvbUNlbnRlci5hbmdsZSAtIE1hdGguUEkgKiAxLjUpIC8gYW5nbGVQZXJJbmRleCksXG5cdFx0XHRcdGFjdGl2ZVBvaW50c0NvbGxlY3Rpb24gPSBbXTtcblxuXHRcdFx0Ly8gSWYgd2UncmUgYXQgdGhlIHRvcCwgbWFrZSB0aGUgcG9pbnRJbmRleCAwIHRvIGdldCB0aGUgZmlyc3Qgb2YgdGhlIGFycmF5LlxuXHRcdFx0aWYgKHBvaW50SW5kZXggPj0gdGhpcy5zY2FsZS52YWx1ZXNDb3VudCB8fCBwb2ludEluZGV4IDwgMCl7XG5cdFx0XHRcdHBvaW50SW5kZXggPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZnJvbUNlbnRlci5kaXN0YW5jZSA8PSB0aGlzLnNjYWxlLmRyYXdpbmdBcmVhKXtcblx0XHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRcdGFjdGl2ZVBvaW50c0NvbGxlY3Rpb24ucHVzaChkYXRhc2V0LnBvaW50c1twb2ludEluZGV4XSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYWN0aXZlUG9pbnRzQ29sbGVjdGlvbjtcblx0XHR9LFxuXG5cdFx0YnVpbGRTY2FsZSA6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0dGhpcy5zY2FsZSA9IG5ldyBDaGFydC5SYWRpYWxTY2FsZSh7XG5cdFx0XHRcdGRpc3BsYXk6IHRoaXMub3B0aW9ucy5zaG93U2NhbGUsXG5cdFx0XHRcdGZvbnRTdHlsZTogdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLFxuXHRcdFx0XHRmb250U2l6ZTogdGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsXG5cdFx0XHRcdGZvbnRGYW1pbHk6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHksXG5cdFx0XHRcdGZvbnRDb2xvcjogdGhpcy5vcHRpb25zLnNjYWxlRm9udENvbG9yLFxuXHRcdFx0XHRzaG93TGFiZWxzOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLFxuXHRcdFx0XHRzaG93TGFiZWxCYWNrZHJvcDogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0xhYmVsQmFja2Ryb3AsXG5cdFx0XHRcdGJhY2tkcm9wQ29sb3I6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wQ29sb3IsXG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcnM6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tncm91bmRDb2xvcnMsXG5cdFx0XHRcdGJhY2tkcm9wUGFkZGluZ1kgOiB0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcFBhZGRpbmdZLFxuXHRcdFx0XHRiYWNrZHJvcFBhZGRpbmdYOiB0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcFBhZGRpbmdYLFxuXHRcdFx0XHRsaW5lV2lkdGg6ICh0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGluZSkgPyB0aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGggOiAwLFxuXHRcdFx0XHRsaW5lQ29sb3I6IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVDb2xvcixcblx0XHRcdFx0YW5nbGVMaW5lQ29sb3IgOiB0aGlzLm9wdGlvbnMuYW5nbGVMaW5lQ29sb3IsXG5cdFx0XHRcdGFuZ2xlTGluZVdpZHRoIDogKHRoaXMub3B0aW9ucy5hbmdsZVNob3dMaW5lT3V0KSA/IHRoaXMub3B0aW9ucy5hbmdsZUxpbmVXaWR0aCA6IDAsXG4gICAgICAgIGFuZ2xlTGluZUludGVydmFsOiAodGhpcy5vcHRpb25zLmFuZ2xlTGluZUludGVydmFsKSA/IHRoaXMub3B0aW9ucy5hbmdsZUxpbmVJbnRlcnZhbCA6IDEsXG5cdFx0XHRcdC8vIFBvaW50IGxhYmVscyBhdCB0aGUgZWRnZSBvZiBlYWNoIGxpbmVcblx0XHRcdFx0cG9pbnRMYWJlbEZvbnRDb2xvciA6IHRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udENvbG9yLFxuXHRcdFx0XHRwb2ludExhYmVsRm9udFNpemUgOiB0aGlzLm9wdGlvbnMucG9pbnRMYWJlbEZvbnRTaXplLFxuXHRcdFx0XHRwb2ludExhYmVsRm9udEZhbWlseSA6IHRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udEZhbWlseSxcblx0XHRcdFx0cG9pbnRMYWJlbEZvbnRTdHlsZSA6IHRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udFN0eWxlLFxuXHRcdFx0XHRoZWlnaHQgOiB0aGlzLmNoYXJ0LmhlaWdodCxcblx0XHRcdFx0d2lkdGg6IHRoaXMuY2hhcnQud2lkdGgsXG5cdFx0XHRcdHhDZW50ZXI6IHRoaXMuY2hhcnQud2lkdGgvMixcblx0XHRcdFx0eUNlbnRlcjogdGhpcy5jaGFydC5oZWlnaHQvMixcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdHRlbXBsYXRlU3RyaW5nOiB0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxcblx0XHRcdFx0bGFiZWxzOiBkYXRhLmxhYmVscyxcblx0XHRcdFx0dmFsdWVzQ291bnQ6IGRhdGEuZGF0YXNldHNbMF0uZGF0YS5sZW5ndGhcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnNjYWxlLnNldFNjYWxlU2l6ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVTY2FsZVJhbmdlKGRhdGEuZGF0YXNldHMpO1xuXHRcdFx0dGhpcy5zY2FsZS5idWlsZFlMYWJlbHMoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZVNjYWxlUmFuZ2U6IGZ1bmN0aW9uKGRhdGFzZXRzKXtcblx0XHRcdHZhciB2YWx1ZXNBcnJheSA9IChmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdG90YWxEYXRhQXJyYXkgPSBbXTtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRcdGlmIChkYXRhc2V0LmRhdGEpe1xuXHRcdFx0XHRcdFx0dG90YWxEYXRhQXJyYXkgPSB0b3RhbERhdGFBcnJheS5jb25jYXQoZGF0YXNldC5kYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsIGZ1bmN0aW9uKHBvaW50KXtcblx0XHRcdFx0XHRcdFx0dG90YWxEYXRhQXJyYXkucHVzaChwb2ludC52YWx1ZSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdG90YWxEYXRhQXJyYXk7XG5cdFx0XHR9KSgpO1xuXG5cblx0XHRcdHZhciBzY2FsZVNpemVzID0gKHRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlKSA/XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzdGVwczogdGhpcy5vcHRpb25zLnNjYWxlU3RlcHMsXG5cdFx0XHRcdFx0c3RlcFZhbHVlOiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgsXG5cdFx0XHRcdFx0bWluOiB0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlLFxuXHRcdFx0XHRcdG1heDogdGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSArICh0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyAqIHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aClcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGhlbHBlcnMuY2FsY3VsYXRlU2NhbGVSYW5nZShcblx0XHRcdFx0XHR2YWx1ZXNBcnJheSxcblx0XHRcdFx0XHRoZWxwZXJzLm1pbihbdGhpcy5jaGFydC53aWR0aCwgdGhpcy5jaGFydC5oZWlnaHRdKS8yLFxuXHRcdFx0XHRcdHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLFxuXHRcdFx0XHRcdHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLFxuXHRcdFx0XHRcdHRoaXMub3B0aW9ucy5zY2FsZUludGVnZXJzT25seVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRoZWxwZXJzLmV4dGVuZChcblx0XHRcdFx0dGhpcy5zY2FsZSxcblx0XHRcdFx0c2NhbGVTaXplc1xuXHRcdFx0KTtcblxuXHRcdH0sXG5cdFx0YWRkRGF0YSA6IGZ1bmN0aW9uKHZhbHVlc0FycmF5LGxhYmVsKXtcblx0XHRcdC8vTWFwIHRoZSB2YWx1ZXMgYXJyYXkgZm9yIGVhY2ggb2YgdGhlIGRhdGFzZXRzXG5cdFx0XHR0aGlzLnNjYWxlLnZhbHVlc0NvdW50Kys7XG5cdFx0XHRoZWxwZXJzLmVhY2godmFsdWVzQXJyYXksZnVuY3Rpb24odmFsdWUsZGF0YXNldEluZGV4KXtcblx0XHRcdFx0dmFyIHBvaW50UG9zaXRpb24gPSB0aGlzLnNjYWxlLmdldFBvaW50UG9zaXRpb24odGhpcy5zY2FsZS52YWx1ZXNDb3VudCwgdGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodmFsdWUpKTtcblx0XHRcdFx0dGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLnBvaW50cy5wdXNoKG5ldyB0aGlzLlBvaW50Q2xhc3Moe1xuXHRcdFx0XHRcdHZhbHVlIDogdmFsdWUsXG5cdFx0XHRcdFx0bGFiZWwgOiBsYWJlbCxcblx0XHRcdFx0XHRkYXRhc2V0TGFiZWw6IHRoaXMuZGF0YXNldHNbZGF0YXNldEluZGV4XS5sYWJlbCxcblx0XHRcdFx0XHR4OiBwb2ludFBvc2l0aW9uLngsXG5cdFx0XHRcdFx0eTogcG9pbnRQb3NpdGlvbi55LFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogdGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0ZmlsbENvbG9yIDogdGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLnBvaW50Q29sb3Jcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSx0aGlzKTtcblxuXHRcdFx0dGhpcy5zY2FsZS5sYWJlbHMucHVzaChsYWJlbCk7XG5cblx0XHRcdHRoaXMucmVmbG93KCk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZW1vdmVEYXRhIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuc2NhbGUudmFsdWVzQ291bnQtLTtcblx0XHRcdHRoaXMuc2NhbGUubGFiZWxzLnNoaWZ0KCk7XG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcblx0XHRcdFx0ZGF0YXNldC5wb2ludHMuc2hpZnQoKTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRwb2ludC5zYXZlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0cmVmbG93OiBmdW5jdGlvbigpe1xuXHRcdFx0aGVscGVycy5leHRlbmQodGhpcy5zY2FsZSwge1xuXHRcdFx0XHR3aWR0aCA6IHRoaXMuY2hhcnQud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogdGhpcy5jaGFydC5oZWlnaHQsXG5cdFx0XHRcdHNpemUgOiBoZWxwZXJzLm1pbihbdGhpcy5jaGFydC53aWR0aCwgdGhpcy5jaGFydC5oZWlnaHRdKSxcblx0XHRcdFx0eENlbnRlcjogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5Q2VudGVyOiB0aGlzLmNoYXJ0LmhlaWdodC8yXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0aGlzLmRhdGFzZXRzKTtcblx0XHRcdHRoaXMuc2NhbGUuc2V0U2NhbGVTaXplKCk7XG5cdFx0XHR0aGlzLnNjYWxlLmJ1aWxkWUxhYmVscygpO1xuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKGVhc2Upe1xuXHRcdFx0dmFyIGVhc2VEZWNpbWFsID0gZWFzZSB8fCAxLFxuXHRcdFx0XHRjdHggPSB0aGlzLmNoYXJ0LmN0eDtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcdHRoaXMuc2NhbGUuZHJhdygpO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcblxuXHRcdFx0XHQvL1RyYW5zaXRpb24gZWFjaCBwb2ludCBmaXJzdCBzbyB0aGF0IHRoZSBsaW5lIGFuZCBwb2ludCBkcmF3aW5nIGlzbid0IG91dCBvZiBzeW5jXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cyxmdW5jdGlvbihwb2ludCxpbmRleCl7XG5cdFx0XHRcdFx0aWYgKHBvaW50Lmhhc1ZhbHVlKCkpe1xuXHRcdFx0XHRcdFx0cG9pbnQudHJhbnNpdGlvbih0aGlzLnNjYWxlLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHBvaW50LnZhbHVlKSksIGVhc2VEZWNpbWFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sdGhpcyk7XG5cblxuXG5cdFx0XHRcdC8vRHJhdyB0aGUgbGluZSBiZXR3ZWVuIGFsbCB0aGUgcG9pbnRzXG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLm9wdGlvbnMuZGF0YXNldFN0cm9rZVdpZHRoO1xuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBkYXRhc2V0LnN0cm9rZUNvbG9yO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cyxmdW5jdGlvbihwb2ludCxpbmRleCl7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSAwKXtcblx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8ocG9pbnQueCxwb2ludC55KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnQueCxwb2ludC55KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sdGhpcyk7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBkYXRhc2V0LmZpbGxDb2xvcjtcblx0XHRcdFx0aWYodGhpcy5vcHRpb25zLmRhdGFzZXRGaWxsKXtcblx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vTm93IGRyYXcgdGhlIHBvaW50cyBvdmVyIHRoZSBsaW5lXG5cdFx0XHRcdC8vQSBsaXR0bGUgaW5lZmZpY2llbnQgZG91YmxlIGxvb3BpbmcsIGJ1dCBiZXR0ZXIgdGhhbiB0aGUgbGluZVxuXHRcdFx0XHQvL2xhZ2dpbmcgYmVoaW5kIHRoZSBwb2ludCBwb3NpdGlvbnNcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQucG9pbnRzLGZ1bmN0aW9uKHBvaW50KXtcblx0XHRcdFx0XHRpZiAocG9pbnQuaGFzVmFsdWUoKSl7XG5cdFx0XHRcdFx0XHRwb2ludC5kcmF3KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSx0aGlzKTtcblxuXHRcdH1cblxuXHR9KTtcblxuXG5cblxuXG59KS5jYWxsKHRoaXMpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xufVxuXG52YXIgTUlYSU5TX0tFWSA9ICdtaXhpbnMnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gYWxsb3cgdGhlIGNyZWF0aW9uIG9mIGFub255bW91cyBmdW5jdGlvbnMgd2hpY2ggZG8gbm90XG4vLyBoYXZlIC5uYW1lIHNldCB0byB0aGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgYmVpbmcgYXNzaWduZWQgdG8uXG5mdW5jdGlvbiBpZGVudGl0eShmbikge1xuICByZXR1cm4gZm47XG59XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgIHByb3A6ICdwcm9wJyxcbiAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgfTtcbn0gZWxzZSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG59XG5cbmZ1bmN0aW9uIGZhY3RvcnkoUmVhY3RDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vb3BVcGRhdGVRdWV1ZSkge1xuICAvKipcbiAgICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENsYXNzSW50ZXJmYWNlYC5cbiAgICovXG5cbiAgdmFyIGluamVjdGVkTWl4aW5zID0gW107XG5cbiAgLyoqXG4gICAqIENvbXBvc2l0ZSBjb21wb25lbnRzIGFyZSBoaWdoZXItbGV2ZWwgY29tcG9uZW50cyB0aGF0IGNvbXBvc2Ugb3RoZXIgY29tcG9zaXRlXG4gICAqIG9yIGhvc3QgY29tcG9uZW50cy5cbiAgICpcbiAgICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q2xhc3NgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICAgKiB5b3VyIG5ldyBjbGFzcyB0byBgUmVhY3QuY3JlYXRlQ2xhc3NgLiBUaGUgb25seSByZXF1aXJlbWVudCBvZiB5b3VyIGNsYXNzXG4gICAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICAgKlxuICAgKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBUaGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBzdXBwb3J0cyBhIHNwZWNpZmljIHByb3RvY29sIG9mIG1ldGhvZHMgdGhhdCBoYXZlXG4gICAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gICAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuICAgKiBjbGFzcyBzcGVjaWZpY2F0aW9uIHdpbGwgYmUgYXZhaWxhYmxlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAqXG4gICAqIEBpbnRlcmZhY2UgUmVhY3RDbGFzc0ludGVyZmFjZVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHZhciBSZWFjdENsYXNzSW50ZXJmYWNlID0ge1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIE1peGluIG9iamVjdHMgdG8gaW5jbHVkZSB3aGVuIGRlZmluaW5nIHlvdXIgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge2FycmF5fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIG1peGluczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgc3RhdGljczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgcHJvcCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHByb3BUeXBlczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbnRleHRUeXBlczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldERlZmF1bHRQcm9wczogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uY2UgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIHVzZWRcbiAgICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAgICpcbiAgICAgKiAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIHJldHVybiB7XG4gICAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAgICogICAgICAgZm9vQmF6OiBuZXcgQmF6Rm9vKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldEluaXRpYWxTdGF0ZTogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0Q2hpbGRDb250ZXh0OiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICAgKiBzdHJ1Y3R1cmUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICAgKiBpdCBtdXN0IG5vdCBoYXZlIHNpZGUgZWZmZWN0cy5cbiAgICAgKlxuICAgICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgdmFyIG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XG4gICAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAgICogQHJlcXVpcmVkXG4gICAgICovXG4gICAgcmVuZGVyOiAnREVGSU5FX09OQ0UnLFxuXG4gICAgLy8gPT09PSBEZWxlZ2F0ZSBtZXRob2RzID09PT1cblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgICAqIFRoaXMgbWF5IGhhdmUgc2lkZSBlZmZlY3RzLCBidXQgYW55IGV4dGVybmFsIHN1YnNjcmlwdGlvbnMgb3IgZGF0YSBjcmVhdGVkXG4gICAgICogYnkgdGhpcyBtZXRob2QgbXVzdCBiZSBjbGVhbmVkIHVwIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGAuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkIGFuZCBoYXMgYSBET00gcmVwcmVzZW50YXRpb24uXG4gICAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGJlZm9yZSB0aGUgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wcy5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHN0YXRlIHVzaW5nIGB0aGlzLnNldFN0YXRlYC4gQ3VycmVudCBwcm9wcyBhcmUgYWNjZXNzZWQgdmlhIGB0aGlzLnByb3BzYC5cbiAgICAgKlxuICAgICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgICAqICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgKiAgICAgICBsaWtlc0luY3JlYXNpbmc6IG5leHRQcm9wcy5saWtlQ291bnQgPiB0aGlzLnByb3BzLmxpa2VDb3VudFxuICAgICAqICAgICB9KTtcbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAgICogdHJhbnNpdGlvbiBtYXkgY2F1c2UgYSBzdGF0ZSBjaGFuZ2UsIGJ1dCB0aGUgb3Bwb3NpdGUgaXMgbm90IHRydWUuIElmIHlvdVxuICAgICAqIG5lZWQgaXQsIHlvdSBhcmUgcHJvYmFibHkgbG9va2luZyBmb3IgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICAgKiByZWNlaXZpbmcgbmV3IHByb3BzLCBzdGF0ZSBhbmQvb3IgY29udGV4dC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICAgKiB0cmFuc2l0aW9uIHRvIHRoZSBuZXcgcHJvcHMvc3RhdGUvY29udGV4dCB3aWxsIG5vdCByZXF1aXJlIGEgY29tcG9uZW50XG4gICAgICogdXBkYXRlLlxuICAgICAqXG4gICAgICogICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAqICAgICByZXR1cm4gIWVxdWFsKG5leHRQcm9wcywgdGhpcy5wcm9wcykgfHxcbiAgICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgICAqICAgICAgICFlcXVhbChuZXh0Q29udGV4dCwgdGhpcy5jb250ZXh0KTtcbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIHVwZGF0ZS5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6ICdERUZJTkVfT05DRScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAgICogYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgIHRvIGBuZXh0UHJvcHNgLCBgbmV4dFN0YXRlYFxuICAgICAqIGFuZCBgbmV4dENvbnRleHRgLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcGVyZm9ybSBwcmVwYXJhdGlvbiBiZWZvcmUgYW4gdXBkYXRlIG9jY3Vycy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50J3MgRE9NIHJlcHJlc2VudGF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgICAqIGJlZW4gdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCBoYXZlXG4gICAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBkZWFsbG9jYXRlIGFueSBleHRlcm5hbCByZXNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGVyZSBpcyBubyBgY29tcG9uZW50RGlkVW5tb3VudGAgc2luY2UgeW91ciBjb21wb25lbnQgd2lsbCBoYXZlIGJlZW5cbiAgICAgKiBkZXN0cm95ZWQgYnkgdGhhdCBwb2ludC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIChkZXByZWNhdGVkKSBgY29tcG9uZW50V2lsbE1vdW50YC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlbWVudCBmb3IgKGRlcHJlY2F0ZWQpIGBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzYC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIChkZXByZWNhdGVkKSBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8vID09PT0gQWR2YW5jZWQgbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAb3ZlcnJpZGFibGVcbiAgICAgKi9cbiAgICB1cGRhdGVDb21wb25lbnQ6ICdPVkVSUklERV9CQVNFJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIFJlYWN0Q2xhc3NJbnRlcmZhY2UgYnV0IGZvciBzdGF0aWMgbWV0aG9kcy5cbiAgICovXG4gIHZhciBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgaW5zdGFudGlhdGVkIGFuZCB3aGVuIGl0XG4gICAgICogcmVjZWl2ZXMgbmV3IHByb3BzLiBSZXR1cm4gYW4gb2JqZWN0IHRvIHVwZGF0ZSBzdGF0ZSBpbiByZXNwb25zZSB0b1xuICAgICAqIHByb3AgY2hhbmdlcy4gUmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgbm8gY2hhbmdlIHRvIHN0YXRlLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHJldHVybmVkLCBpdHMga2V5cyB3aWxsIGJlIG1lcmdlZCBpbnRvIHRoZSBleGlzdGluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdCB8fCBudWxsfVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogJ0RFRklORV9NQU5ZX01FUkdFRCdcbiAgfTtcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAgICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAgICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAgICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICAgKi9cbiAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIH0sXG4gICAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG4gICAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlc1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsICdjb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgICBjb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBnZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLFxuICAgICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgJ3Byb3AnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgICB9LFxuICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gICAgfSxcbiAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIF9pbnZhcmlhbnQgc28gY29tcG9uZW50c1xuICAgICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV1cbiAgICAgIDogbnVsbDtcblxuICAgIC8vIERpc2FsbG93IG92ZXJyaWRpbmcgb2YgYmFzZSBjbGFzcyBtZXRob2RzIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gICAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgICAgICd0byBhIG1peGluLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICAgKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciB0eXBlb2ZTcGVjID0gdHlwZW9mIHNwZWM7XG4gICAgICAgIHZhciBpc01peGluVmFsaWQgPSB0eXBlb2ZTcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGlzTWl4aW5WYWxpZCxcbiAgICAgICAgICAgIFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIFwiICtcbiAgICAgICAgICAgICAgJ29yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgJyArXG4gICAgICAgICAgICAgICdhcyB3ZWxsIGFzIGFueSBtaXhpbnMgdGhleSBpbmNsdWRlIHRoZW1zZWx2ZXMuICcgK1xuICAgICAgICAgICAgICAnRXhwZWN0ZWQgb2JqZWN0IGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgICAgIHNwZWMgPT09IG51bGwgPyBudWxsIDogdHlwZW9mU3BlY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gXCIgK1xuICAgICAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgJyArXG4gICAgICAgICdyZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcbiAgICBfaW52YXJpYW50KFxuICAgICAgIWlzVmFsaWRFbGVtZW50KHNwZWMpLFxuICAgICAgXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBcIiArXG4gICAgICAgICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcblxuICAgIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuXG4gICAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gICAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gICAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlLlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgIHZhciBpc0FscmVhZHlEZWZpbmVkID0gcHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGlzQWxyZWFkeURlZmluZWQsIG5hbWUpO1xuXG4gICAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuICAgICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9XG4gICAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgICAhaXNBbHJlYWR5RGVmaW5lZCAmJlxuICAgICAgICAgIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBjYXNlcyBzaG91bGQgYWxyZWFkeSBiZSBjYXVnaHQgYnkgdmFsaWRhdGVNZXRob2RPdmVycmlkZS5cbiAgICAgICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgICAgIGlzUmVhY3RDbGFzc01ldGhvZCAmJlxuICAgICAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyB8fFxuICAgICAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJyksXG4gICAgICAgICAgICAgICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAgICAgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLFxuICAgICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJykge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWScpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIEFkZCB2ZXJib3NlIGRpc3BsYXlOYW1lIHRvIHRoZSBmdW5jdGlvbiwgd2hpY2ggaGVscHMgd2hlbiBsb29raW5nXG4gICAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNSZXNlcnZlZCA9IG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTO1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGEgcmVzZXJ2ZWQgJyArXG4gICAgICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgICAgICAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICtcbiAgICAgICAgICAnY29uc3RydWN0b3IuJyxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcblxuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBuYW1lIGluIENvbnN0cnVjdG9yO1xuICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcbiAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICAgICAgPyBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlW25hbWVdXG4gICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZX01FUkdFRCcsXG4gICAgICAgICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgJyArXG4gICAgICAgICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgICAgICBuYW1lXG4gICAgICAgICk7XG5cbiAgICAgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihDb25zdHJ1Y3RvcltuYW1lXSwgcHJvcGVydHkpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb25lIFRoZSBmaXJzdCBvYmplY3QsIHdoaWNoIGlzIG11dGF0ZWQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAgIF9pbnZhcmlhbnQoXG4gICAgICBvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnLFxuICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLidcbiAgICApO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHR3bykge1xuICAgICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgb25lW2tleV0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICAgICAgICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICtcbiAgICAgICAgICAgICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArXG4gICAgICAgICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICAgICAgICd3aXRoIGNsYXNoaW5nIGtleXMuJyxcbiAgICAgICAgICBrZXlcbiAgICAgICAgKTtcbiAgICAgICAgb25lW2tleV0gPSB0d29ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICAgICAgX2tleSA9IDE7XG4gICAgICAgICAgX2tleSA8IF9sZW47XG4gICAgICAgICAgX2tleSsrXG4gICAgICAgICkge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlciBpcyB0cnlpbmcgdG8gYmluZCgpIGFuIGF1dG9ib3VuZCBtZXRob2Q7IHdlIGVmZmVjdGl2ZWx5IHdpbGxcbiAgICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAgIC8vIGxldCdzIHdhcm4uXG4gICAgICAgIGlmIChuZXdUaGlzICE9PSBjb21wb25lbnQgJiYgbmV3VGhpcyAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgICAgICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICtcbiAgICAgICAgICAgICAgICAnUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2UgJyArXG4gICAgICAgICAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJyxcbiAgICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYWxsIGF1dG8tYm91bmQgbWV0aG9kcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgICB2YXIgcGFpcnMgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgdmFyIGF1dG9CaW5kS2V5ID0gcGFpcnNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcGFpcnNbaSArIDFdO1xuICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XSA9IGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIElzTW91bnRlZFByZU1peGluID0ge1xuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSXNNb3VudGVkUG9zdE1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBtb3JlIHRvIHRoZSBSZWFjdENsYXNzIGJhc2UgY2xhc3MuIFRoZXNlIGFyZSBhbGwgbGVnYWN5IGZlYXR1cmVzIGFuZFxuICAgKiB0aGVyZWZvcmUgbm90IGFscmVhZHkgcGFydCBvZiB0aGUgbW9kZXJuIFJlYWN0Q29tcG9uZW50LlxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBiZWNhdXNlIHN0YXRlIHNob3VsZCBhbHdheXMga2VlcCBhIGNvbnNpc3RlbnRcbiAgICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAgICovXG4gICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKHRoaXMsIG5ld1N0YXRlLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQGZpbmFsXG4gICAgICovXG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQsXG4gICAgICAgICAgJyVzOiBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwICcgK1xuICAgICAgICAgICAgJ3N1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gY29tcG9uZW50V2lsbFVubW91bnQgdG8gJyArXG4gICAgICAgICAgICAncHJldmVudCBtZW1vcnkgbGVha3MuJyxcbiAgICAgICAgICAodGhpcy5jb25zdHJ1Y3RvciAmJiB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSB8fFxuICAgICAgICAgICAgdGhpcy5uYW1lIHx8XG4gICAgICAgICAgICAnQ29tcG9uZW50J1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9fZGlkV2FybklzTW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gISF0aGlzLl9faXNNb3VudGVkO1xuICAgIH1cbiAgfTtcblxuICB2YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uKCkge307XG4gIF9hc3NpZ24oXG4gICAgUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsXG4gICAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q2xhc3NNaXhpblxuICApO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jcmVhdGVjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKHNwZWMpIHtcbiAgICAvLyBUbyBrZWVwIG91ciB3YXJuaW5ncyBtb3JlIHVuZGVyc3RhbmRhYmxlLCB3ZSdsbCB1c2UgYSBsaXR0bGUgaGFjayBoZXJlIHRvXG4gICAgLy8gZW5zdXJlIHRoYXQgQ29uc3RydWN0b3IubmFtZSAhPT0gJ0NvbnN0cnVjdG9yJy4gVGhpcyBtYWtlcyBzdXJlIHdlIGRvbid0XG4gICAgLy8gdW5uZWNlc3NhcmlseSBpZGVudGlmeSBhIGNsYXNzIHdpdGhvdXQgZGlzcGxheU5hbWUgYXMgJ0NvbnN0cnVjdG9yJy5cbiAgICB2YXIgQ29uc3RydWN0b3IgPSBpZGVudGl0eShmdW5jdGlvbihwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBnZXRzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLFxuICAgICAgICAgICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICtcbiAgICAgICAgICAgICdKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnknXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgpIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgICAgIC8vIFJlYWN0Q2xhc3NlcyBkb2Vzbid0IGhhdmUgY29uc3RydWN0b3JzLiBJbnN0ZWFkLCB0aGV5IHVzZSB0aGVcbiAgICAgIC8vIGdldEluaXRpYWxTdGF0ZSBhbmQgY29tcG9uZW50V2lsbE1vdW50IG1ldGhvZHMgZm9yIGluaXRpYWxpemF0aW9uLlxuXG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUgPyB0aGlzLmdldEluaXRpYWxTdGF0ZSgpIDogbnVsbDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgaW5pdGlhbFN0YXRlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSksXG4gICAgICAgICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLFxuICAgICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgICApO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0pO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLl9fcmVhY3RBdXRvQmluZFBhaXJzID0gW107XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQcmVNaXhpbik7XG4gICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQb3N0TWl4aW4pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZGVmYXVsdFByb3BzIHByb3BlcnR5IGFmdGVyIGFsbCBtaXhpbnMgaGF2ZSBiZWVuIG1lcmdlZC5cbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyBpcyBhIHRhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2Ugb2YgdGhlc2UgbWV0aG9kIG5hbWVzIGlzIG9rLFxuICAgICAgLy8gc2luY2UgaXQncyB1c2VkIHdpdGggY3JlYXRlQ2xhc3MuIElmIGl0J3Mgbm90LCB0aGVuIGl0J3MgbGlrZWx5IGFcbiAgICAgIC8vIG1pc3Rha2Ugc28gd2UnbGwgd2FybiB5b3UgdG8gdXNlIHRoZSBzdGF0aWMgcHJvcGVydHksIHByb3BlcnR5XG4gICAgICAvLyBpbml0aWFsaXplciBvciBjb25zdHJ1Y3RvciByZXNwZWN0aXZlbHkuXG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyLFxuICAgICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuICAgICk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLFxuICAgICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICk7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAgICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApO1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyxcbiAgICAgICAgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gJyArXG4gICAgICAgICAgJ0RpZCB5b3UgbWVhbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJy4vZmFjdG9yeScpO1xuXG5pZiAodHlwZW9mIFJlYWN0ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBFcnJvcihcbiAgICAnY3JlYXRlLXJlYWN0LWNsYXNzIGNvdWxkIG5vdCBmaW5kIHRoZSBSZWFjdCBvYmplY3QuIElmIHlvdSBhcmUgdXNpbmcgc2NyaXB0IHRhZ3MsICcgK1xuICAgICAgJ21ha2Ugc3VyZSB0aGF0IFJlYWN0IGlzIGJlaW5nIGxvYWRlZCBiZWZvcmUgY3JlYXRlLXJlYWN0LWNsYXNzLidcbiAgKTtcbn1cblxuLy8gSGFjayB0byBncmFiIE5vb3BVcGRhdGVRdWV1ZSBmcm9tIGlzb21vcnBoaWMgUmVhY3RcbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IG5ldyBSZWFjdC5Db21wb25lbnQoKS51cGRhdGVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gIFJlYWN0LkNvbXBvbmVudCxcbiAgUmVhY3QuaXNWYWxpZEVsZW1lbnQsXG4gIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlXG4pO1xuIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY3JlYXRlQ2xhc3M6IGZ1bmN0aW9uKGNoYXJ0VHlwZSwgbWV0aG9kTmFtZXMsIGRhdGFLZXkpIHtcbiAgICAgICAgdmFyIGV4Y2x1ZGVkUHJvcHMgPSBbJ2RhdGEnLCAnb3B0aW9ucycsICdyZWRyYXcnXTtcbiAgICAgICAgdmFyIGNsYXNzRGF0YSA9IHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBjaGFydFR5cGUgKyAnQ2hhcnQnLFxuICAgICAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9LFxuICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3Byb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByZWY6ICdjYW52YXNzJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZWRQcm9wcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wcm9wc1tuYW1lXSA9IHRoaXMucHJvcHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycsIF9wcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGV4dHJhcyA9IFsnY2xlYXInLCAnc3RvcCcsICdyZXNpemUnLCAndG9CYXNlNjRJbWFnZScsICdnZW5lcmF0ZUxlZ2VuZCcsICd1cGRhdGUnLCAnYWRkRGF0YScsICdyZW1vdmVEYXRhJ107XG4gICAgICAgIGZ1bmN0aW9uIGV4dHJhKHR5cGUpIHtcbiAgICAgICAgICAgIGNsYXNzRGF0YVt0eXBlXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmNoYXJ0W3R5cGVdLmFwcGx5KHRoaXMuc3RhdGUuY2hhcnQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY2xhc3NEYXRhLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVDaGFydCh0aGlzLnByb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjbGFzc0RhdGEuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IHRoaXMuc3RhdGUuY2hhcnQ7XG4gICAgICAgICAgICBjaGFydC5kZXN0cm95KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2xhc3NEYXRhLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbihuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IHRoaXMuc3RhdGUuY2hhcnQ7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnJlZHJhdykge1xuICAgICAgICAgICAgICAgIGNoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVDaGFydChuZXh0UHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhS2V5ID0gZGF0YUtleSB8fCBkYXRhS2V5c1tjaGFydC5uYW1lXTtcbiAgICAgICAgICAgICAgICB1cGRhdGVQb2ludHMobmV4dFByb3BzLCBjaGFydCwgZGF0YUtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0LnNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNjYWxlLnhMYWJlbHMgPSBuZXh0UHJvcHMuZGF0YS5sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0LnNjYWxlLmNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNjYWxlLmNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY2xhc3NEYXRhLmluaXRpYWxpemVDaGFydCA9IGZ1bmN0aW9uKG5leHRQcm9wcykge1xuICAgICAgICAgICAgdmFyIENoYXJ0ID0gcmVxdWlyZSgnY2hhcnQuanMnKTtcbiAgICAgICAgICAgIHZhciBlbCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgICAgICAgdmFyIGN0eCA9IGVsLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IG5ldyBDaGFydChjdHgpW2NoYXJ0VHlwZV0obmV4dFByb3BzLmRhdGEsIG5leHRQcm9wcy5vcHRpb25zIHx8IHt9KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyByZXR1cm4gdGhlIGNoYXJ0anMgaW5zdGFuY2VcbiAgICAgICAgY2xhc3NEYXRhLmdldENoYXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jaGFydDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyByZXR1cm4gdGhlIGNhbnZhc3MgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBjaGFydFxuICAgICAgICBjbGFzc0RhdGEuZ2V0Q2FudmFzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcy5jYW52YXNzO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNsYXNzRGF0YS5nZXRDYW52YXMgPSBjbGFzc0RhdGEuZ2V0Q2FudmFzcztcblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpPTA7IGk8ZXh0cmFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBleHRyYShleHRyYXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaT0wOyBpPG1ldGhvZE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBleHRyYShtZXRob2ROYW1lc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3RDbGFzcyhjbGFzc0RhdGEpO1xuICAgIH1cbn07XG5cbnZhciBkYXRhS2V5cyA9IHtcbiAgICAnTGluZSc6ICdwb2ludHMnLFxuICAgICdSYWRhcic6ICdwb2ludHMnLFxuICAgICdCYXInOiAnYmFycydcbn07XG5cbnZhciB1cGRhdGVQb2ludHMgPSBmdW5jdGlvbihuZXh0UHJvcHMsIGNoYXJ0LCBkYXRhS2V5KSB7XG4gICAgdmFyIG5hbWUgPSBjaGFydC5uYW1lO1xuXG4gICAgaWYgKG5hbWUgPT09ICdQb2xhckFyZWEnIHx8IG5hbWUgPT09ICdQaWUnIHx8IG5hbWUgPT09ICdEb3VnaG51dCcpIHtcbiAgICAgICAgbmV4dFByb3BzLmRhdGEuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50LCBzZWdtZW50SW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2hhcnQuc2VnbWVudHNbc2VnbWVudEluZGV4XSkge1xuICAgICAgICAgICAgICAgIGNoYXJ0LmFkZERhdGEoc2VnbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlZ21lbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFydC5zZWdtZW50c1tzZWdtZW50SW5kZXhdW2tleV0gPSBzZWdtZW50W2tleV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdoaWxlKG5leHRQcm9wcy5kYXRhLmxlbmd0aCA8IGNoYXJ0LnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhcnQucmVtb3ZlRGF0YSgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIlJhZGFyXCIpIHtcbiAgICAgICAgY2hhcnQucmVtb3ZlRGF0YSgpO1xuICAgICAgICBuZXh0UHJvcHMuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHNldCwgc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIHNldC5kYXRhLmZvckVhY2goZnVuY3Rpb24odmFsLCBwb2ludEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihjaGFydC5kYXRhc2V0c1tzZXRJbmRleF1bZGF0YUtleV1bcG9pbnRJbmRleF0pID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkRGF0YShuZXh0UHJvcHMsIGNoYXJ0LCBzZXRJbmRleCwgcG9pbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuZGF0YXNldHNbc2V0SW5kZXhdW2RhdGFLZXldW3BvaW50SW5kZXhdLnZhbHVlID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAoY2hhcnQuc2NhbGUueExhYmVscy5sZW5ndGggPiBuZXh0UHJvcHMuZGF0YS5sYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFydC5yZW1vdmVEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFByb3BzLmRhdGEuZGF0YXNldHMuZm9yRWFjaChmdW5jdGlvbihzZXQsIHNldEluZGV4KSB7XG4gICAgICAgICAgICBzZXQuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgcG9pbnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoY2hhcnQuZGF0YXNldHNbc2V0SW5kZXhdW2RhdGFLZXldW3BvaW50SW5kZXhdKSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZERhdGEobmV4dFByb3BzLCBjaGFydCwgc2V0SW5kZXgsIHBvaW50SW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmRhdGFzZXRzW3NldEluZGV4XVtkYXRhS2V5XVtwb2ludEluZGV4XS52YWx1ZSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxudmFyIGFkZERhdGEgPSBmdW5jdGlvbihuZXh0UHJvcHMsIGNoYXJ0LCBzZXRJbmRleCwgcG9pbnRJbmRleCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBuZXh0UHJvcHMuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHNldCkge1xuICAgICAgICB2YWx1ZXMucHVzaChzZXQuZGF0YVtwb2ludEluZGV4XSk7XG4gICAgfSk7XG4gICAgY2hhcnQuYWRkRGF0YSh2YWx1ZXMsIG5leHRQcm9wcy5kYXRhLmxhYmVsc1tzZXRJbmRleF0pO1xufTtcbiIsInZhciB2YXJzID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdmFycy5jcmVhdGVDbGFzcygnUGllJywgWydnZXRTZWdtZW50c0F0RXZlbnQnXSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgUGllIGZyb20gJ3JlYWN0LWNoYXJ0anMvbGliL1BpZSdcblxuaW1wb3J0IGNoYXJ0U2VsZWN0b3IgZnJvbSAnLi4vc2VsZWN0b3JzL2NoYXJ0J1xuXG5leHBvcnQgY29uc3QgUGllQ2hhcnQgPSAoeyBkYXRhIH0pID0+IChcbiAgICA8UGllIGNsYXNzTmFtZT1cInBpZWNoYXJ0XCIgZGF0YT17ZGF0YX0gLz5cbilcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiBjaGFydFNlbGVjdG9yKHN0YXRlLCBzdGF0ZS5maWx0ZXJzKVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUGllQ2hhcnQpIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgQWN0aW9ucyA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxuICAgICAgICAgICAgey8qIDxidXR0b24+RG93bmxvYWQ8L2J1dHRvbj4gKi99XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvblwiPlN1YnNjcmliZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbnMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBjb25zdCBTdW1tYXJ5SXRlbSA9ICh7IG5hbWUsIGNvdW50IH0pID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImxpc3QtaXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpc3QtaXRlbV9fY291bnRcIj57Y291bnR9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGlzdC1pdGVtX19uYW1lXCI+e25hbWV9PC9kaXY+XG4gICAgPC9kaXY+XG4pXG5cbmV4cG9ydCBkZWZhdWx0IFN1bW1hcnlJdGVtIiwiZXhwb3J0IGRlZmF1bHQgKHN0YXRlLCBmaWx0ZXJzKSA9PiB7XG4gICAgbGV0IHsgZmVhdHVyZXMgfSA9IHN0YXRlLmFyZWFcbiAgICBsZXQgYWdyZWdhdGVkID0gZmVhdHVyZXNcbiAgICAgICAgLmZpbHRlcigoeyBwcm9wZXJ0aWVzIH0pID0+XG4gICAgICAgICAgICBmaWx0ZXJzLmZlYXR1cmVzLmluZGV4T2YocHJvcGVydGllcy50eXBlKSA9PT0gLTFcbiAgICAgICAgKVxuICAgICAgICAucmVkdWNlKChyZXMsIGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGxldCB7IHR5cGUsIHBvcHVsYXRpb24gfSA9IGZlYXR1cmUucHJvcGVydGllc1xuICAgICAgICAgICAgcmVzLnN1bW1hcnkuYnVpbGRpbmdzICs9IDFcbiAgICAgICAgICAgIHJlcy5zdW1tYXJ5LmNpdGl6ZW5zICs9IH5+cGFyc2VGbG9hdChwb3B1bGF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc3VtbWFyeToge1xuICAgICAgICAgICAgICAgICAgICBidWlsZGluZ3M6IDAsXG4gICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3VtbWFyeTogdG9MaXN0T2ZPYmplY3RzKGFncmVnYXRlZC5zdW1tYXJ5KSxcbiAgICB9XG59XG5cbmNvbnN0IHRvTGlzdE9mT2JqZWN0cyA9IChkYXRhKSA9PiAoXG4gICAgT2JqZWN0LmtleXMoZGF0YSkucmVkdWNlKChyZXN1bHQsIGN1cnJlbnRJdGVtKSA9PiB7XG4gICAgICAgIGxldCBbbmFtZSwgY291bnRdID0gW2N1cnJlbnRJdGVtLCBkYXRhW2N1cnJlbnRJdGVtXV1cbiAgICAgICAgcmVzdWx0LnB1c2goeyBuYW1lLCBjb3VudCB9KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSwgW10pXG4pIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgc3VtbWFyeVNlbGVjdG9yIGZyb20gJy4uL3NlbGVjdG9ycy9zdW1tYXJ5J1xuaW1wb3J0IFN1bW1hcnlJdGVtIGZyb20gJy4vU3VtbWFyeUl0ZW0nXG5cbmV4cG9ydCBjb25zdCBTdW1tYXJ5ID0gKHsgc3VtbWFyeSB9KSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJsaXN0XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGlzdF9faGVhZGVyXCI+U3VtbWFyeTwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge3N1bW1hcnkubWFwKFxuICAgICAgICAgICAgICAgICh7bmFtZSwgY291bnR9KSA9PiA8U3VtbWFyeUl0ZW0ga2V5PXtuYW1lfSBuYW1lPXtuYW1lfSBjb3VudD17Y291bnR9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbilcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiBzdW1tYXJ5U2VsZWN0b3Ioc3RhdGUsIHN0YXRlLmZpbHRlcnMpXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShTdW1tYXJ5KSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgZ2V0Q29sb3IgfSBmcm9tICcuLi9jb25zdGFudHMnXG5cbmV4cG9ydCBjb25zdCBMZWdlbmRJdGVtID0gKHsgbmFtZSwgY291bnQsIGlzQWN0aXZlLCBzZXRGZWF0dXJlc0ZpbHRlciB9KSA9PiB7XG4gICAgY29uc3QgY29sb3IgPSBnZXRDb2xvcihuYW1lKVxuICAgIGNvbnN0IGZpbHRlckZlYXR1cmUgPSAobmFtZSkgPT4ge1xuICAgICAgICBzZXRGZWF0dXJlc0ZpbHRlcihuYW1lKVxuICAgIH1cbiAgICBjb25zdCBsZWdlbmRJdGVtQ2xhc3NOYW1lID0gaXNBY3RpdmUgPyBcImxlZ2VuZC1pdGVtXCIgOiBcImxlZ2VuZC1pdGVtIGxlZ2VuZC1pdGVtLS1tdXRlZFwiXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBmaWx0ZXJGZWF0dXJlKG5hbWUpfSBjbGFzc05hbWU9e2xlZ2VuZEl0ZW1DbGFzc05hbWV9PlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgNXB4ICcgKyBjb2xvclxuICAgICAgICB9fSBjbGFzc05hbWU9XCJsZWdlbmQtaXRlbV9fY291bnRcIj57Y291bnR9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZ2VuZC1pdGVtX19uYW1lXCI+e25hbWV9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGVnZW5kSXRlbSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IExlZ2VuZEl0ZW0gZnJvbSAnLi9MZWdlbmRJdGVtJ1xuXG5leHBvcnQgY29uc3QgTGVnZW5kID0gKHsgZGF0YSwgc2V0RmVhdHVyZXNGaWx0ZXIgfSkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibGVnZW5kXCI+XG4gICAgICAgIHtkYXRhLm1hcChcbiAgICAgICAgICAgICh7IG5hbWUsIGNvdW50LCBpc0FjdGl2ZSB9KSA9PiBcbiAgICAgICAgICAgICAgICA8TGVnZW5kSXRlbSBcbiAgICAgICAgICAgICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgICAgICBjb3VudD17Y291bnR9XG4gICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXtpc0FjdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgc2V0RmVhdHVyZXNGaWx0ZXI9e3NldEZlYXR1cmVzRmlsdGVyfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgPC9kaXY+XG4pXG5cblxuZXhwb3J0IGRlZmF1bHQgTGVnZW5kIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IExlZ2VuZCBmcm9tICcuL0xlZ2VuZCdcbmltcG9ydCBTdW1tYXJ5IGZyb20gJy4vU3VtbWFyeSdcbmltcG9ydCBBY3Rpb25zIGZyb20gJy4vQWN0aW9ucydcblxuaW1wb3J0IFBpZUNoYXJ0IGZyb20gJy4vQ2hhcnRKUydcbmltcG9ydCB7IHNldEZlYXR1cmVzRmlsdGVyIH0gZnJvbSAnLi4vYWN0aW9ucy9maWx0ZXJzJ1xuaW1wb3J0IHN0YXRpc3RpY3NTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvbGVnZW5kJ1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGlzQXJlYVNlbGVjdGVkLCBjb2x1bW5zLCBjb2xvcnMsIHN1bW1hcnksIGxlZ2VuZCwgc2V0RmVhdHVyZXNGaWx0ZXIgfSA9IHRoaXMucHJvcHNcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzQXJlYVNlbGVjdGVkID8gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiPlNlbGVjdCBhcmVhIG9mIGludGVyZXN0PC9kaXY+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFBpZUNoYXJ0ICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExlZ2VuZCBzZXRGZWF0dXJlc0ZpbHRlcj17c2V0RmVhdHVyZXNGaWx0ZXJ9IGRhdGE9e2xlZ2VuZH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdW1tYXJ5IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9ucyAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4gc3RhdGlzdGljc1NlbGVjdG9yKHN0YXRlLCBzdGF0ZS5maWx0ZXJzKVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyBzZXRGZWF0dXJlc0ZpbHRlciB9KShTaWRlYmFyKSIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgZmlsdGVycykgPT4gKHtcbiAgICBmZWF0dXJlczogc3RhdGUuYXJlYS5mZWF0dXJlcy5maWx0ZXIoKHsgcHJvcGVydGllcyB9KSA9PiBcbiAgICAgICAgZmlsdGVycy5mZWF0dXJlcy5pbmRleE9mKHByb3BlcnRpZXMudHlwZSkgPT09IC0xXG4gICAgKSxcbiAgICBpc0ZldGNoaW5nOiBzdGF0ZS5hcmVhLmlzRmV0Y2hpbmdcbn0pIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgZmVhdHVyZXNTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvZmVhdHVyZXMnXG5pbXBvcnQgeyBsb2FkQXJlYURhdGEgfSBmcm9tICcuLi9hY3Rpb25zJ1xuaW1wb3J0IHsgZ2V0Q29sb3IsIGJyaWdodGVyQ29sb3IgfSBmcm9tICcuLi9jb25zdGFudHMnXG5cbi8vIExlYWZsZXQgJiBvc21iIGxpYnMgTW92ZWQgdG8gQ0ROXG5cbmxldCBnb29nbGUgPSBMLnRpbGVMYXllcignaHR0cDovL210MC5nb29nbGUuY29tL3Z0L2x5cnM9cyZobD1lbiZ4PXt4fSZ5PXt5fSZ6PXt6fSZzPUdhJywgeyBpZDogMSB9KSxcbiAgICBvc20gPSBMLnRpbGVMYXllcignaHR0cDovL2EudGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmcnLCB7IGlkOiAyIH0pXG5cbmxldCBjb25maWcgPSB7fVxuY29uZmlnLnBhcmFtcyA9IHtcbiAgICBjZW50ZXI6IFs1NS44NzgzNTg3NTU2NDUwOSwgMzcuNzA1MDIxOTk1MjM2M10sXG4gICAgem9vbTogMTYsXG4gICAgbGF5ZXJzOiBbZ29vZ2xlXSxcbiAgICBzY3JvbGx3aGVlbDogZmFsc2UsXG4gICAgbGVnZW5kczogdHJ1ZSxcbiAgICBpbmZvQ29udHJvbDogZmFsc2UsXG4gICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZVxufVxuY29uZmlnLmJhc2VMYXllcnMgPSB7XG4gICAgXCJHb29nbGVcIjogZ29vZ2xlLFxuICAgIFwiT1NNXCI6IG9zbVxufVxuXG5jb25maWcuZmVhdHVyZUdyb3VwID0gbmV3IEwuRmVhdHVyZUdyb3VwKClcbmNvbmZpZy5kcmF3Q29udHJvbCA9IG5ldyBMLkNvbnRyb2wuRHJhdyh7XG4gICAgZHJhdzoge1xuICAgICAgICByZWN0YW5nbGU6IGZhbHNlLFxuICAgICAgICBwb2x5Z29uOiB7XG4gICAgICAgICAgICBpY29uOiBuZXcgTC5EaXZJY29uKHtcbiAgICAgICAgICAgICAgICBpY29uU2l6ZTogbmV3IEwuUG9pbnQoMTcsIDE3KSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdwb2ludCdcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYWxsb3dJbnRlcnNlY3Rpb246IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlsaW5lOiBmYWxzZSxcbiAgICAgICAgY2lyY2xlOiBmYWxzZSxcbiAgICAgICAgbWFya2VyOiBmYWxzZSxcbiAgICAgICAgY2lyY2xlbWFya2VyOiBmYWxzZSxcbiAgICB9LFxuICAgIGVkaXQ6IGZhbHNlXG59KVxuXG5leHBvcnQgY2xhc3MgTWFwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBtYXA6IG51bGwsXG4gICAgICAgIGxheWVyc0NvbnRyb2w6IG51bGwsXG4gICAgICAgIGZlYXR1cmVHcm91cDogbnVsbCxcbiAgICAgICAgcG9seWdvbkxheWVyOiBudWxsLFxuICAgIH1cblxuICAgIF9tYXBOb2RlID0gUmVhY3QuY3JlYXRlUmVmKClcbiAgICBfb3NtYiA9IFJlYWN0LmNyZWF0ZVJlZigpXG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgLy8gY29kZSB0byBydW4ganVzdCBhZnRlciB0aGUgY29tcG9uZW50IFwibW91bnRzXCIgLyBET00gZWxlbWVudHMgYXJlIGNyZWF0ZWRcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBMZWFmbGV0IG1hcCBvYmplY3RcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLm1hcCkgdGhpcy5pbml0KHRoaXMuX21hcE5vZGUuY3VycmVudClcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNGZXRjaGluZykge1xuICAgICAgICAgICAgdGhpcy5fb3NtYi5zZXQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb3NtYi5zZXQoXG4gICAgICAgICAgICAgICAgdGhpcy5mZWF0dXJlc0xpc3RUb0NvbGxlY3Rpb24odGhpcy5wcm9wcy5mZWF0dXJlcylcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAvLyBjb2RlIHRvIHJ1biBqdXN0IGJlZm9yZSB1bm1vdW50aW5nIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gdGhpcyBkZXN0cm95cyB0aGUgTGVhZmxldCBtYXAgb2JqZWN0ICYgcmVsYXRlZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5zdGF0ZS5tYXAuY3VycmVudC5yZW1vdmUoKVxuICAgIH1cblxuICAgIGdldERhdGEgPSAod2l0aEluUG9seWdvbikgPT4ge1xuICAgICAgICBsZXQgeyBnZW9tZXRyeTogeyBjb29yZGluYXRlcyB9IH0gPSB3aXRoSW5Qb2x5Z29uXG4gICAgICAgIHRoaXMucHJvcHMubG9hZEFyZWFEYXRhKGNvb3JkaW5hdGVzKVxuICAgIH1cblxuICAgIGZlYXR1cmVzTGlzdFRvQ29sbGVjdGlvbiA9IChsaXN0KSA9PiAoe1xuICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICAgICAgICBcImZlYXR1cmVzXCI6IGxpc3RcbiAgICB9KVxuXG4gICAgaW5pdERyYXdFdmVudHMgPSAobWFwLCBmZWF0dXJlR3JvdXApID0+IHtcbiAgICAgICAgbWFwLm9uKEwuRHJhdy5FdmVudC5DUkVBVEVELCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBwb2x5Z29uTGF5ZXIgPSBldmVudC5sYXllclxuICAgICAgICAgICAgY29uc29sZS5sb2cocG9seWdvbkxheWVyLnRvR2VvSlNPTigpLmdlb21ldHJ5LmNvb3JkaW5hdGVzKVxuXG4gICAgICAgICAgICAvLyBBZGQgYXJlYSBwb2x5Z29uIGxheWVyIHRvIHRoZSBtYXBcbiAgICAgICAgICAgIEwuVXRpbC5zZXRPcHRpb25zKHBvbHlnb25MYXllciwgeyBpbnRlcmFjdGl2ZTogdHJ1ZSwgZmlsbDogZmFsc2UgfSlcbiAgICAgICAgICAgIGxldCB7IHBvbHlnb25MYXllcjogY3VycmVudExheWVyIH0gPSB0aGlzLnN0YXRlXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXRlKVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRMYXllcikge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVHcm91cC5yZW1vdmVMYXllcihjdXJyZW50TGF5ZXIpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBwb2x5Z29uTGF5ZXI6IG51bGwgfSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmZWF0dXJlR3JvdXAuYWRkTGF5ZXIocG9seWdvbkxheWVyKVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBwb2x5Z29uTGF5ZXIgfSkpXG5cbiAgICAgICAgICAgIC8vIGZldGNoIHdpdGhpbiBkYXRhXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGF0YShwb2x5Z29uTGF5ZXIudG9HZW9KU09OKCkpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHNldE1hcEJvdW5kcyA9ICgpID0+IHtcbiAgICAgICAgbGV0IHBvbHlnb24gPSB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICAgICAgICAgICAgXCJmZWF0dXJlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFszNy42ODQ0NDUsIDU1Ljg3ODE2OF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFszNy44MTU2OSwgNTUuODc4MTY4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzM3LjgxNTY5LCA1NS45NjQ0MzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMzcuNjg0NDQ1LCA1NS45NjQ0MzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMzcuNjg0NDQ1LCA1NS44NzgxNjhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICAgIGxldCBsZWFmbGV0UG9seWdvbiA9IEwuZ2VvSlNPTihwb2x5Z29uLCB7XG4gICAgICAgICAgICBvbkVhY2hGZWF0dXJlKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICAgICAgTC5VdGlsLnNldE9wdGlvbnMobGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjZmZmZmZmXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMobGVhZmxldFBvbHlnb24uZ2V0Qm91bmRzKCkpXG4gICAgICAgIGxlYWZsZXRQb2x5Z29uLmFkZFRvKHRoaXMubWFwKVxuXG4gICAgfVxuXG4gICAgZmluZEZlYXR1cmVCeUlkID0gKGlkKSA9PiAoXG4gICAgICAgIHRoaXMucHJvcHMuZmVhdHVyZXMuZmluZChmZWF0dXJlID0+IGZlYXR1cmUuaWQgPT09IGlkKVxuICAgIClcblxuICAgIHNldE9TTUIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX29zbWIuZWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHsgdHlwZSwgaGVpZ2h0LCBpb3UsIHBvcHVsYXRpb24gfSA9IGZlYXR1cmUucHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29sb3IgPSBnZXRDb2xvcih0eXBlKVxuICAgICAgICAgICAgICAgIGxldCByb29mQ29sb3IgPSBicmlnaHRlckNvbG9yKGNvbG9yKVxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZmVhdHVyZSwge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW91LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vZkNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLl9vc21iLmNsaWNrKChlKSA9PiB7XG4gICAgICAgICAgICBsZXQganNvbiA9IHRoaXMuZmluZEZlYXR1cmVCeUlkKGUuZmVhdHVyZSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pXG4gICAgICAgICAgICBsZXQgY29udGVudCA9ICc8Yj4nICsganNvbi5wcm9wZXJ0aWVzLnR5cGUgKyAnPC9iPidcbiAgICAgICAgICAgIC8vIGNvbnRlbnQgKz0gJzxicj48ZW0+VHlwZTwvZW0+ICcgKyBqc29uLnByb3BlcnRpZXMudHlwZVxuICAgICAgICAgICAgY29udGVudCArPSAnPGJyPjxlbT5IZWlnaHQ8L2VtPiAnICsganNvbi5wcm9wZXJ0aWVzLmhlaWdodFxuICAgICAgICAgICAgY29udGVudCArPSAnPGJyPjxlbT5JT1U8L2VtPiAnICsganNvbi5wcm9wZXJ0aWVzLmlvdVxuICAgICAgICAgICAgTC5wb3B1cCh7IG1heEhlaWdodDogMjAwLCBhdXRvUGFuUGFkZGluZ1RvcExlZnQ6IFs1MCwgNTBdIH0pXG4gICAgICAgICAgICAgICAgLnNldExhdExuZyhMLmxhdExuZyhlLmxhdCwgZS5sb24pKVxuICAgICAgICAgICAgICAgIC5zZXRDb250ZW50KGNvbnRlbnQpXG4gICAgICAgICAgICAgICAgLm9wZW5Pbih0aGlzLm1hcClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBpbml0KGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1hcCkgcmV0dXJuXG4gICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gY3JlYXRlcyB0aGUgTGVhZmxldCBtYXAgb2JqZWN0IGFuZCBpcyBjYWxsZWQgYWZ0ZXIgdGhlIE1hcCBjb21wb25lbnQgbW91bnRzXG4gICAgICAgIGxldCBtYXAgPSBMLm1hcChpZCwgY29uZmlnLnBhcmFtcylcbiAgICAgICAgdGhpcy5tYXAgPSBtYXBcblxuICAgICAgICAvLyBzZXR1cCBvc21iXG4gICAgICAgIHRoaXMuX29zbWIgPSBuZXcgT1NNQnVpbGRpbmdzKG1hcClcblxuICAgICAgICAvLyBhIFRpbGVMYXllciBpcyB1c2VkIGFzIHRoZSBcImJhc2VtYXBcIlxuXG4gICAgICAgIGxldCBsYXllcnNDb250cm9sID0gTC5jb250cm9sLmxheWVycyhjb25maWcuYmFzZUxheWVycywgdW5kZWZpbmVkLCB7IHBvc2l0aW9uOiAndG9wcmlnaHQnLCBjb2xsYXBzZWQ6IGZhbHNlIH0pLmFkZFRvKG1hcClcbiAgICAgICAgbGV0IGZlYXR1cmVHcm91cCA9IGNvbmZpZy5mZWF0dXJlR3JvdXBcblxuICAgICAgICAvLyBhZGQgRHJhd0NvbnRyb2wgdG8gdGhlIG1hcFxuICAgICAgICBtYXAuYWRkQ29udHJvbChjb25maWcuZHJhd0NvbnRyb2wpXG5cbiAgICAgICAgLy8gYWRkIGZlYXR1cmVHcm91cCB0byB0aGUgbWFwXG4gICAgICAgIGZlYXR1cmVHcm91cC5hZGRUbyhtYXApXG5cbiAgICAgICAgLy8gaW5pdCBkcmF3IGNyZWF0ZSBldmVudFxuICAgICAgICB0aGlzLmluaXREcmF3RXZlbnRzKG1hcCwgZmVhdHVyZUdyb3VwKVxuXG4gICAgICAgIC8vIHNldCBvdXIgc3RhdGVcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1hcCwgbGF5ZXJzQ29udHJvbCwgZmVhdHVyZUdyb3VwIH0pXG4gICAgICAgIHRoaXMuc2V0TWFwQm91bmRzKClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0T1NNQigpXG5cbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgLy8gICAgIHRoaXMucHJvcHMubG9hZEFyZWFEYXRhKFtcbiAgICAgICAgLy8gICAgICAgICBbXG4gICAgICAgIC8vICAgICAgICAgICAgIFtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDM3Ljc0Mjc1Nzc5NzI0MTIxLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgNTUuOTEzMzc5MzI0ODEwMDlcbiAgICAgICAgLy8gICAgICAgICAgICAgXSxcbiAgICAgICAgLy8gICAgICAgICAgICAgW1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgMzcuNzY5ODgwMjk0Nzk5ODA1LFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgNTUuOTEzMzc5MzI0ODEwMDlcbiAgICAgICAgLy8gICAgICAgICAgICAgXSxcbiAgICAgICAgLy8gICAgICAgICAgICAgW1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgMzcuNzY5ODgwMjk0Nzk5ODA1LFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgNTUuOTI2MDc2NTUxNTUxMjVcbiAgICAgICAgLy8gICAgICAgICAgICAgXSxcbiAgICAgICAgLy8gICAgICAgICAgICAgW1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgMzcuNzQyNzU3Nzk3MjQxMjEsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICA1NS45MjYwNzY1NTE1NTEyNVxuICAgICAgICAvLyAgICAgICAgICAgICBdLFxuICAgICAgICAvLyAgICAgICAgICAgICBbXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAzNy43NDI3NTc3OTcyNDEyMSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDU1LjkxMzM3OTMyNDgxMDA5XG4gICAgICAgIC8vICAgICAgICAgICAgIF1cbiAgICAgICAgLy8gICAgICAgICBdXG4gICAgICAgIC8vICAgICBdKVxuICAgICAgICAvLyB9LCA1MDApXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiByZWY9e3RoaXMuX21hcE5vZGV9IGlkPVwibWFwXCIgLz5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiBmZWF0dXJlc1NlbGVjdG9yKHN0YXRlLCBzdGF0ZS5maWx0ZXJzKVxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXG4gICAgeyBsb2FkQXJlYURhdGEgfVxuKShNYXApIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnXG5cblxuaW1wb3J0IE1hcCBmcm9tICcuL01hcCdcbmltcG9ydCBTaWRlYmFyIGZyb20gJy4vU2lkZWJhcidcbmltcG9ydCBsb2FkaW5nSG9jIGZyb20gJy4vTG9hZGluZ0luZGljYXRvcidcblxuZXhwb3J0IGNsYXNzIFVyYmFuQW5hbHl0aWNzQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2liZWJhclwiPlxuICAgICAgICAgICAgICAgICAgICA8U2lkZWJhciAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxNYXAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4gKHsgaXNMb2FkaW5nOiBzdGF0ZS5hcmVhLmlzRmV0Y2hpbmcgfSlcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgICBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgbG9hZGluZ0hvYygpXG4pKFVyYmFuQW5hbHl0aWNzQXBwKSIsImNvbnN0IGZpbHRlckRlZmF1bHRTdGF0ZSA9IHtcbiAgICBmZWF0dXJlczogW11cbn1cblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gZmlsdGVyRGVmYXVsdFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1NFVF9GRUFUVVJFU19GSUxURVInOlxuICAgICAgICAgICAgbGV0IHsgZmVhdHVyZSB9ID0gYWN0aW9uXG4gICAgICAgICAgICBpZiAoc3RhdGUuZmVhdHVyZXMuaW5kZXhPZihmZWF0dXJlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVzID0gc3RhdGUuZmVhdHVyZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0gIT09IGZlYXR1cmVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZmVhdHVyZXMgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZXMgPSBzdGF0ZS5mZWF0dXJlcy5jb25jYXQoZmVhdHVyZSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBmZWF0dXJlcyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0NMRUFSX0ZFQVRVUkVTX0ZJTFRFUic6XG4gICAgICAgICAgICByZXR1cm4geyBmZWF0dXJlczogW10gfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxufSIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2FjdGlvbnMnXG5cbmNvbnN0IGFyZWFSZWR1Y2VyRGVmYXVsdFN0YXRlID0ge1xuICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogbnVsbCxcbiAgICBmZWF0dXJlczogW11cbn1cblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gYXJlYVJlZHVjZXJEZWZhdWx0U3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5GRVRDSF9BUkVBLlJFUVVFU1Q6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmc6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlcy5GRVRDSF9BUkVBLlNVQ0NFU1M6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBhY3Rpb24uZmVhdHVyZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlcy5GRVRDSF9BUkVBLkZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogYWN0aW9uLmVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG59IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sdCk6dChlLnJlZHV4TG9nZ2VyPWUucmVkdXhMb2dnZXJ8fHt9KX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUsdCl7ZS5zdXBlcl89dCxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KX1mdW5jdGlvbiByKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJraW5kXCIse3ZhbHVlOmUsZW51bWVyYWJsZTohMH0pLHQmJnQubGVuZ3RoJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhdGhcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gbihlLHQscil7bi5zdXBlcl8uY2FsbCh0aGlzLFwiRVwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmhzXCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIG8oZSx0KXtvLnN1cGVyXy5jYWxsKHRoaXMsXCJOXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gaShlLHQpe2kuc3VwZXJfLmNhbGwodGhpcyxcIkRcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBhKGUsdCxyKXthLnN1cGVyXy5jYWxsKHRoaXMsXCJBXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpbmRleFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIml0ZW1cIix7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gZihlLHQscil7dmFyIG49ZS5zbGljZSgocnx8dCkrMXx8ZS5sZW5ndGgpO3JldHVybiBlLmxlbmd0aD10PDA/ZS5sZW5ndGgrdDp0LGUucHVzaC5hcHBseShlLG4pLGV9ZnVuY3Rpb24gdShlKXt2YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSk7cmV0dXJuXCJvYmplY3RcIiE9PXQ/dDplPT09TWF0aD9cIm1hdGhcIjpudWxsPT09ZT9cIm51bGxcIjpBcnJheS5pc0FycmF5KGUpP1wiYXJyYXlcIjpcIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImRhdGVcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRvU3RyaW5nJiYvXlxcLy4qXFwvLy50ZXN0KGUudG9TdHJpbmcoKSk/XCJyZWdleHBcIjpcIm9iamVjdFwifWZ1bmN0aW9uIGwoZSx0LHIsYyxzLGQscCl7cz1zfHxbXSxwPXB8fFtdO3ZhciBnPXMuc2xpY2UoMCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGQpe2lmKGMpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJmMoZyxkKSlyZXR1cm47aWYoXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgYz9cInVuZGVmaW5lZFwiOk4oYykpKXtpZihjLnByZWZpbHRlciYmYy5wcmVmaWx0ZXIoZyxkKSlyZXR1cm47aWYoYy5ub3JtYWxpemUpe3ZhciBoPWMubm9ybWFsaXplKGcsZCxlLHQpO2gmJihlPWhbMF0sdD1oWzFdKX19fWcucHVzaChkKX1cInJlZ2V4cFwiPT09dShlKSYmXCJyZWdleHBcIj09PXUodCkmJihlPWUudG9TdHJpbmcoKSx0PXQudG9TdHJpbmcoKSk7dmFyIHk9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpLHY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpOKHQpLGI9XCJ1bmRlZmluZWRcIiE9PXl8fHAmJnBbcC5sZW5ndGgtMV0ubGhzJiZwW3AubGVuZ3RoLTFdLmxocy5oYXNPd25Qcm9wZXJ0eShkKSxtPVwidW5kZWZpbmVkXCIhPT12fHxwJiZwW3AubGVuZ3RoLTFdLnJocyYmcFtwLmxlbmd0aC0xXS5yaHMuaGFzT3duUHJvcGVydHkoZCk7aWYoIWImJm0pcihuZXcgbyhnLHQpKTtlbHNlIGlmKCFtJiZiKXIobmV3IGkoZyxlKSk7ZWxzZSBpZih1KGUpIT09dSh0KSlyKG5ldyBuKGcsZSx0KSk7ZWxzZSBpZihcImRhdGVcIj09PXUoZSkmJmUtdCE9PTApcihuZXcgbihnLGUsdCkpO2Vsc2UgaWYoXCJvYmplY3RcIj09PXkmJm51bGwhPT1lJiZudWxsIT09dClpZihwLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5saHM9PT1lfSkubGVuZ3RoKWUhPT10JiZyKG5ldyBuKGcsZSx0KSk7ZWxzZXtpZihwLnB1c2goe2xoczplLHJoczp0fSksQXJyYXkuaXNBcnJheShlKSl7dmFyIHc7ZS5sZW5ndGg7Zm9yKHc9MDt3PGUubGVuZ3RoO3crKyl3Pj10Lmxlbmd0aD9yKG5ldyBhKGcsdyxuZXcgaSh2b2lkIDAsZVt3XSkpKTpsKGVbd10sdFt3XSxyLGMsZyx3LHApO2Zvcig7dzx0Lmxlbmd0aDspcihuZXcgYShnLHcsbmV3IG8odm9pZCAwLHRbdysrXSkpKX1lbHNle3ZhciB4PU9iamVjdC5rZXlzKGUpLFM9T2JqZWN0LmtleXModCk7eC5mb3JFYWNoKGZ1bmN0aW9uKG4sbyl7dmFyIGk9Uy5pbmRleE9mKG4pO2k+PTA/KGwoZVtuXSx0W25dLHIsYyxnLG4scCksUz1mKFMsaSkpOmwoZVtuXSx2b2lkIDAscixjLGcsbixwKX0pLFMuZm9yRWFjaChmdW5jdGlvbihlKXtsKHZvaWQgMCx0W2VdLHIsYyxnLGUscCl9KX1wLmxlbmd0aD1wLmxlbmd0aC0xfWVsc2UgZSE9PXQmJihcIm51bWJlclwiPT09eSYmaXNOYU4oZSkmJmlzTmFOKHQpfHxyKG5ldyBuKGcsZSx0KSkpfWZ1bmN0aW9uIGMoZSx0LHIsbil7cmV0dXJuIG49bnx8W10sbChlLHQsZnVuY3Rpb24oZSl7ZSYmbi5wdXNoKGUpfSxyKSxuLmxlbmd0aD9uOnZvaWQgMH1mdW5jdGlvbiBzKGUsdCxyKXtpZihyLnBhdGgmJnIucGF0aC5sZW5ndGgpe3ZhciBuLG89ZVt0XSxpPXIucGF0aC5sZW5ndGgtMTtmb3Iobj0wO248aTtuKyspbz1vW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMob1tyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZGVsZXRlIG9bci5wYXRoW25dXTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOm9bci5wYXRoW25dXT1yLnJoc319ZWxzZSBzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhlW3RdLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZT1mKGUsdCk7YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjplW3RdPXIucmhzfXJldHVybiBlfWZ1bmN0aW9uIGQoZSx0LHIpe2lmKGUmJnQmJnImJnIua2luZCl7Zm9yKHZhciBuPWUsbz0tMSxpPXIucGF0aD9yLnBhdGgubGVuZ3RoLTE6MDsrK288aTspXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5bci5wYXRoW29dXSYmKG5bci5wYXRoW29dXT1cIm51bWJlclwiPT10eXBlb2Ygci5wYXRoW29dP1tdOnt9KSxuPW5bci5wYXRoW29dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhyLnBhdGg/bltyLnBhdGhbb11dOm4sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpkZWxldGUgbltyLnBhdGhbb11dO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6bltyLnBhdGhbb11dPXIucmhzfX19ZnVuY3Rpb24gcChlLHQscil7aWYoci5wYXRoJiZyLnBhdGgubGVuZ3RoKXt2YXIgbixvPWVbdF0saT1yLnBhdGgubGVuZ3RoLTE7Zm9yKG49MDtuPGk7bisrKW89b1tyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKG9bci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOm9bci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJFXCI6b1tyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjpkZWxldGUgb1tyLnBhdGhbbl1dfX1lbHNlIHN3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKGVbdF0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjplPWYoZSx0KX1yZXR1cm4gZX1mdW5jdGlvbiBnKGUsdCxyKXtpZihlJiZ0JiZyJiZyLmtpbmQpe3ZhciBuLG8saT1lO2ZvcihvPXIucGF0aC5sZW5ndGgtMSxuPTA7bjxvO24rKylcInVuZGVmaW5lZFwiPT10eXBlb2YgaVtyLnBhdGhbbl1dJiYoaVtyLnBhdGhbbl1dPXt9KSxpPWlbci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChpW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjppW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOmlbci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJOXCI6ZGVsZXRlIGlbci5wYXRoW25dXX19fWZ1bmN0aW9uIGgoZSx0LHIpe2lmKGUmJnQpe3ZhciBuPWZ1bmN0aW9uKG4pe3ImJiFyKGUsdCxuKXx8ZChlLHQsbil9O2woZSx0LG4pfX1mdW5jdGlvbiB5KGUpe3JldHVyblwiY29sb3I6IFwiK0ZbZV0uY29sb3IrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCJ9ZnVuY3Rpb24gdihlKXt2YXIgdD1lLmtpbmQscj1lLnBhdGgsbj1lLmxocyxvPWUucmhzLGk9ZS5pbmRleCxhPWUuaXRlbTtzd2l0Y2godCl7Y2FzZVwiRVwiOnJldHVybltyLmpvaW4oXCIuXCIpLG4sXCLihpJcIixvXTtjYXNlXCJOXCI6cmV0dXJuW3Iuam9pbihcIi5cIiksb107Y2FzZVwiRFwiOnJldHVybltyLmpvaW4oXCIuXCIpXTtjYXNlXCJBXCI6cmV0dXJuW3Iuam9pbihcIi5cIikrXCJbXCIraStcIl1cIixhXTtkZWZhdWx0OnJldHVybltdfX1mdW5jdGlvbiBiKGUsdCxyLG4pe3ZhciBvPWMoZSx0KTt0cnl7bj9yLmdyb3VwQ29sbGFwc2VkKFwiZGlmZlwiKTpyLmdyb3VwKFwiZGlmZlwiKX1jYXRjaChlKXtyLmxvZyhcImRpZmZcIil9bz9vLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5raW5kLG49dihlKTtyLmxvZy5hcHBseShyLFtcIiVjIFwiK0ZbdF0udGV4dCx5KHQpXS5jb25jYXQoUChuKSkpfSk6ci5sb2coXCLigJTigJQgbm8gZGlmZiDigJTigJRcIik7dHJ5e3IuZ3JvdXBFbmQoKX1jYXRjaChlKXtyLmxvZyhcIuKAlOKAlCBkaWZmIGVuZCDigJTigJQgXCIpfX1mdW5jdGlvbiBtKGUsdCxyLG4pe3N3aXRjaChcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSkpe2Nhc2VcIm9iamVjdFwiOnJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGVbbl0/ZVtuXS5hcHBseShlLFAocikpOmVbbl07Y2FzZVwiZnVuY3Rpb25cIjpyZXR1cm4gZSh0KTtkZWZhdWx0OnJldHVybiBlfX1mdW5jdGlvbiB3KGUpe3ZhciB0PWUudGltZXN0YW1wLHI9ZS5kdXJhdGlvbjtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3ZhciBpPVtcImFjdGlvblwiXTtyZXR1cm4gaS5wdXNoKFwiJWNcIitTdHJpbmcoZS50eXBlKSksdCYmaS5wdXNoKFwiJWNAIFwiK24pLHImJmkucHVzaChcIiVjKGluIFwiK28udG9GaXhlZCgyKStcIiBtcylcIiksaS5qb2luKFwiIFwiKX19ZnVuY3Rpb24geChlLHQpe3ZhciByPXQubG9nZ2VyLG49dC5hY3Rpb25UcmFuc2Zvcm1lcixvPXQudGl0bGVGb3JtYXR0ZXIsaT12b2lkIDA9PT1vP3codCk6byxhPXQuY29sbGFwc2VkLGY9dC5jb2xvcnMsdT10LmxldmVsLGw9dC5kaWZmLGM9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQudGl0bGVGb3JtYXR0ZXI7ZS5mb3JFYWNoKGZ1bmN0aW9uKG8scyl7dmFyIGQ9by5zdGFydGVkLHA9by5zdGFydGVkVGltZSxnPW8uYWN0aW9uLGg9by5wcmV2U3RhdGUseT1vLmVycm9yLHY9by50b29rLHc9by5uZXh0U3RhdGUseD1lW3MrMV07eCYmKHc9eC5wcmV2U3RhdGUsdj14LnN0YXJ0ZWQtZCk7dmFyIFM9bihnKSxrPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YShmdW5jdGlvbigpe3JldHVybiB3fSxnLG8pOmEsaj1EKHApLEU9Zi50aXRsZT9cImNvbG9yOiBcIitmLnRpdGxlKFMpK1wiO1wiOlwiXCIsQT1bXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCJdO0EucHVzaChFKSx0LnRpbWVzdGFtcCYmQS5wdXNoKFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiKSx0LmR1cmF0aW9uJiZBLnB1c2goXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIpO3ZhciBPPWkoUyxqLHYpO3RyeXtrP2YudGl0bGUmJmM/ci5ncm91cENvbGxhcHNlZC5hcHBseShyLFtcIiVjIFwiK09dLmNvbmNhdChBKSk6ci5ncm91cENvbGxhcHNlZChPKTpmLnRpdGxlJiZjP3IuZ3JvdXAuYXBwbHkocixbXCIlYyBcIitPXS5jb25jYXQoQSkpOnIuZ3JvdXAoTyl9Y2F0Y2goZSl7ci5sb2coTyl9dmFyIE49bSh1LFMsW2hdLFwicHJldlN0YXRlXCIpLFA9bSh1LFMsW1NdLFwiYWN0aW9uXCIpLEM9bSh1LFMsW3ksaF0sXCJlcnJvclwiKSxGPW0odSxTLFt3XSxcIm5leHRTdGF0ZVwiKTtpZihOKWlmKGYucHJldlN0YXRlKXt2YXIgTD1cImNvbG9yOiBcIitmLnByZXZTdGF0ZShoKStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW05dKFwiJWMgcHJldiBzdGF0ZVwiLEwsaCl9ZWxzZSByW05dKFwicHJldiBzdGF0ZVwiLGgpO2lmKFApaWYoZi5hY3Rpb24pe3ZhciBUPVwiY29sb3I6IFwiK2YuYWN0aW9uKFMpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbUF0oXCIlYyBhY3Rpb24gICAgXCIsVCxTKX1lbHNlIHJbUF0oXCJhY3Rpb24gICAgXCIsUyk7aWYoeSYmQylpZihmLmVycm9yKXt2YXIgTT1cImNvbG9yOiBcIitmLmVycm9yKHksaCkrXCI7IGZvbnQtd2VpZ2h0OiBib2xkO1wiO3JbQ10oXCIlYyBlcnJvciAgICAgXCIsTSx5KX1lbHNlIHJbQ10oXCJlcnJvciAgICAgXCIseSk7aWYoRilpZihmLm5leHRTdGF0ZSl7dmFyIF89XCJjb2xvcjogXCIrZi5uZXh0U3RhdGUodykrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltGXShcIiVjIG5leHQgc3RhdGVcIixfLHcpfWVsc2UgcltGXShcIm5leHQgc3RhdGVcIix3KTtsJiZiKGgsdyxyLGspO3RyeXtyLmdyb3VwRW5kKCl9Y2F0Y2goZSl7ci5sb2coXCLigJTigJQgbG9nIGVuZCDigJTigJRcIil9fSl9ZnVuY3Rpb24gUygpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PU9iamVjdC5hc3NpZ24oe30sTCxlKSxyPXQubG9nZ2VyLG49dC5zdGF0ZVRyYW5zZm9ybWVyLG89dC5lcnJvclRyYW5zZm9ybWVyLGk9dC5wcmVkaWNhdGUsYT10LmxvZ0Vycm9ycyxmPXQuZGlmZlByZWRpY2F0ZTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgcilyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O2lmKGUuZ2V0U3RhdGUmJmUuZGlzcGF0Y2gpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJbcmVkdXgtbG9nZ2VyXSByZWR1eC1sb2dnZXIgbm90IGluc3RhbGxlZC4gTWFrZSBzdXJlIHRvIHBhc3MgbG9nZ2VyIGluc3RhbmNlIGFzIG1pZGRsZXdhcmU6XFxuLy8gTG9nZ2VyIHdpdGggZGVmYXVsdCBvcHRpb25zXFxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pXFxuLy8gT3IgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gbG9nZ2VyIHdpdGggY3VzdG9tIG9wdGlvbnMgaHR0cDovL2JpdC5seS9yZWR1eC1sb2dnZXItb3B0aW9uc1xcbmltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7XFxuICAvLyAuLi5vcHRpb25zXFxufSk7XFxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcXG4gIHJlZHVjZXIsXFxuICBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKVxcbilcXG5cIiksZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O3ZhciB1PVtdO3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj1lLmdldFN0YXRlO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24obCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaSYmIWkocixsKSlyZXR1cm4gZShsKTt2YXIgYz17fTt1LnB1c2goYyksYy5zdGFydGVkPU8ubm93KCksYy5zdGFydGVkVGltZT1uZXcgRGF0ZSxjLnByZXZTdGF0ZT1uKHIoKSksYy5hY3Rpb249bDt2YXIgcz12b2lkIDA7aWYoYSl0cnl7cz1lKGwpfWNhdGNoKGUpe2MuZXJyb3I9byhlKX1lbHNlIHM9ZShsKTtjLnRvb2s9Ty5ub3coKS1jLnN0YXJ0ZWQsYy5uZXh0U3RhdGU9bihyKCkpO3ZhciBkPXQuZGlmZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9mKHIsbCk6dC5kaWZmO2lmKHgodSxPYmplY3QuYXNzaWduKHt9LHQse2RpZmY6ZH0pKSx1Lmxlbmd0aD0wLGMuZXJyb3IpdGhyb3cgYy5lcnJvcjtyZXR1cm4gc319fX12YXIgayxqLEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IEFycmF5KHQrMSkuam9pbihlKX0sQT1mdW5jdGlvbihlLHQpe3JldHVybiBFKFwiMFwiLHQtZS50b1N0cmluZygpLmxlbmd0aCkrZX0sRD1mdW5jdGlvbihlKXtyZXR1cm4gQShlLmdldEhvdXJzKCksMikrXCI6XCIrQShlLmdldE1pbnV0ZXMoKSwyKStcIjpcIitBKGUuZ2V0U2Vjb25kcygpLDIpK1wiLlwiK0EoZS5nZXRNaWxsaXNlY29uZHMoKSwzKX0sTz1cInVuZGVmaW5lZFwiIT10eXBlb2YgcGVyZm9ybWFuY2UmJm51bGwhPT1wZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2Uubm93P3BlcmZvcm1hbmNlOkRhdGUsTj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxQPWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbShlKX0sQz1bXTtrPVwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGdsb2JhbD9cInVuZGVmaW5lZFwiOk4oZ2xvYmFsKSkmJmdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30saj1rLkRlZXBEaWZmLGomJkMucHVzaChmdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBqJiZrLkRlZXBEaWZmPT09YyYmKGsuRGVlcERpZmY9aixqPXZvaWQgMCl9KSx0KG4sciksdChvLHIpLHQoaSxyKSx0KGEsciksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYyx7ZGlmZjp7dmFsdWU6YyxlbnVtZXJhYmxlOiEwfSxvYnNlcnZhYmxlRGlmZjp7dmFsdWU6bCxlbnVtZXJhYmxlOiEwfSxhcHBseURpZmY6e3ZhbHVlOmgsZW51bWVyYWJsZTohMH0sYXBwbHlDaGFuZ2U6e3ZhbHVlOmQsZW51bWVyYWJsZTohMH0scmV2ZXJ0Q2hhbmdlOnt2YWx1ZTpnLGVudW1lcmFibGU6ITB9LGlzQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGp9LGVudW1lcmFibGU6ITB9LG5vQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEMmJihDLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSksQz1udWxsKSxjfSxlbnVtZXJhYmxlOiEwfX0pO3ZhciBGPXtFOntjb2xvcjpcIiMyMTk2RjNcIix0ZXh0OlwiQ0hBTkdFRDpcIn0sTjp7Y29sb3I6XCIjNENBRjUwXCIsdGV4dDpcIkFEREVEOlwifSxEOntjb2xvcjpcIiNGNDQzMzZcIix0ZXh0OlwiREVMRVRFRDpcIn0sQTp7Y29sb3I6XCIjMjE5NkYzXCIsdGV4dDpcIkFSUkFZOlwifX0sTD17bGV2ZWw6XCJsb2dcIixsb2dnZXI6Y29uc29sZSxsb2dFcnJvcnM6ITAsY29sbGFwc2VkOnZvaWQgMCxwcmVkaWNhdGU6dm9pZCAwLGR1cmF0aW9uOiExLHRpbWVzdGFtcDohMCxzdGF0ZVRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxhY3Rpb25UcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sZXJyb3JUcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sY29sb3JzOnt0aXRsZTpmdW5jdGlvbigpe3JldHVyblwiaW5oZXJpdFwifSxwcmV2U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm5cIiM5RTlFOUVcIn0sYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuXCIjMDNBOUY0XCJ9LG5leHRTdGF0ZTpmdW5jdGlvbigpe3JldHVyblwiIzRDQUY1MFwifSxlcnJvcjpmdW5jdGlvbigpe3JldHVyblwiI0YyMDQwNFwifX0sZGlmZjohMSxkaWZmUHJlZGljYXRlOnZvaWQgMCx0cmFuc2Zvcm1lcjp2b2lkIDB9LFQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLmRpc3BhdGNoLHI9ZS5nZXRTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByP1MoKSh7ZGlzcGF0Y2g6dCxnZXRTdGF0ZTpyfSk6dm9pZCBjb25zb2xlLmVycm9yKFwiXFxuW3JlZHV4LWxvZ2dlciB2M10gQlJFQUtJTkcgQ0hBTkdFXFxuW3JlZHV4LWxvZ2dlciB2M10gU2luY2UgMy4wLjAgcmVkdXgtbG9nZ2VyIGV4cG9ydHMgYnkgZGVmYXVsdCBsb2dnZXIgd2l0aCBkZWZhdWx0IHNldHRpbmdzLlxcbltyZWR1eC1sb2dnZXIgdjNdIENoYW5nZVxcbltyZWR1eC1sb2dnZXIgdjNdIGltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbltyZWR1eC1sb2dnZXIgdjNdIHRvXFxuW3JlZHV4LWxvZ2dlciB2M10gaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcblwiKX07ZS5kZWZhdWx0cz1MLGUuY3JlYXRlTG9nZ2VyPVMsZS5sb2dnZXI9VCxlLmRlZmF1bHQ9VCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xuIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInXG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSdcblxuaW1wb3J0IHJvb3RTYWdhIGZyb20gJy4vc2FnYXMnXG5pbXBvcnQgYXJlYVJlZHVjZXIgZnJvbSAnLi9yZWR1Y2Vycy9hcmVhJ1xuaW1wb3J0IGZpbHRlcnMgZnJvbSAnLi9yZWR1Y2Vycy9maWx0ZXJzJ1xuXG5jb25zdCBjb21wb3NlRW5oYW5jZXJzID0gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyB8fCBjb21wb3NlXG5cbmNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKVxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGxldCBtaWRkbGV3YXJlcyA9IFtzYWdhTWlkZGxld2FyZV1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoKVxuICAgIG1pZGRsZXdhcmVzLnB1c2gobG9nZ2VyKVxuICB9XG4gIGNvbnN0IHN0b3JlID0ge1xuICAgIC4uLmNyZWF0ZVN0b3JlKFxuICAgIGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICAgIGFyZWE6IGFyZWFSZWR1Y2VyLFxuICAgICAgICBmaWx0ZXJzXG4gICAgfSksXG4gICAgY29tcG9zZUVuaGFuY2VycyhhcHBseU1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpKVxuICApLFxuICBydW5TYWdhOiBzYWdhTWlkZGxld2FyZS5ydW5cbn1cblxuICByZXR1cm4gc3RvcmVcbn0iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmNvbnN0IGJhY2tlbmRTZXJ2ZXIgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4MDgwJ1xuXG5leHBvcnQgZGVmYXVsdCBheGlvcy5jcmVhdGUoe1xuICAgIGJhc2VVUkw6IGAke2JhY2tlbmRTZXJ2ZXJ9L2FwaWBcbn0pIiwiaW1wb3J0IGF4aW9zIGZyb20gJy4uL2FwaS9jbGllbnQnXG5cbmV4cG9ydCBjb25zdCBhcGkgPSB7XG5cbiAgICBmZXRjaEFyZWEoY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgY29uc3QgdXJsID0gYC9zZWxlY3RgXG4gICAgICAgIHJldHVybiBheGlvcy5wb3N0KHVybCwgeyBjb29yZGluYXRlcyB9KVxuICAgIH1cbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYmE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxlYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksamE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxrYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWVhP3ZvaWQgMDpEKFwiMjI3XCIpO1xuZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsaCxnLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIHY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsdil9Y2F0Y2gobCl7dGhpcy5fY2F1Z2h0RXJyb3I9bCx0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgRT17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7bWEuYXBwbHkoRSxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe0UuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihFLmhhc0NhdWdodEVycm9yKCkpe3ZhciB2PUUuY2xlYXJDYXVnaHRFcnJvcigpO0UuX2hhc1JldGhyb3dFcnJvcnx8KEUuX2hhc1JldGhyb3dFcnJvcj0hMCxFLl9yZXRocm93RXJyb3I9dil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmEuYXBwbHkoRSxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBFLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEUuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkUuX2NhdWdodEVycm9yO0UuX2NhdWdodEVycm9yPW51bGw7RS5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RChcIjE5OFwiKX19O2Z1bmN0aW9uIG5hKCl7aWYoRS5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1FLl9yZXRocm93RXJyb3I7RS5fcmV0aHJvd0Vycm9yPW51bGw7RS5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgb2E9bnVsbCxwYT17fTtcbmZ1bmN0aW9uIHFhKCl7aWYob2EpZm9yKHZhciBhIGluIHBhKXt2YXIgYj1wYVthXSxjPW9hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RChcIjk2XCIsYSk7aWYoIXJhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkQoXCI5N1wiLGEpO3JhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7c2EuaGFzT3duUHJvcGVydHkoZyk/RChcIjk5XCIsZyk6dm9pZCAwO3NhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnRhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh0YShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2U/dm9pZCAwOkQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiB0YShhLGIsYyl7dWFbYV0/RChcIjEwMFwiLGEpOnZvaWQgMDt1YVthXT1iO3ZhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHJhPVtdLHNhPXt9LHVhPXt9LHZhPXt9O2Z1bmN0aW9uIHdhKGEpe29hP0QoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107cGEuaGFzT3duUHJvcGVydHkoYykmJnBhW2NdPT09ZHx8KHBhW2NdP0QoXCIxMDJcIixjKTp2b2lkIDAscGFbY109ZCxiPSEwKX1iJiZxYSgpfVxudmFyIENhPU9iamVjdC5mcmVlemUoe3BsdWdpbnM6cmEsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnNhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnVhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6dmEscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfSksRGE9bnVsbCxFYT1udWxsLEZhPW51bGw7ZnVuY3Rpb24gR2EoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1GYShkKTtFLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gSGEoYSxiKXtudWxsPT1iP0QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIElhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBKYT1udWxsO1xuZnVuY3Rpb24gS2EoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspR2EoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZHYShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gS2EoYSwhMCl9ZnVuY3Rpb24gTWEoYSl7cmV0dXJuIEthKGEsITEpfXZhciBOYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9O1xuZnVuY3Rpb24gT2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1EYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gUGEoYSxiKXtudWxsIT09YSYmKEphPUhhKEphLGEpKTthPUphO0phPW51bGw7YSYmKGI/SWEoYSxMYSk6SWEoYSxNYSksSmE/RChcIjk1XCIpOnZvaWQgMCxFLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBRYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxyYS5sZW5ndGg7ZisrKXt2YXIgaD1yYVtmXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1IYShlLGgpKX1QYShlLCExKX12YXIgUmE9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOk5hLGdldExpc3RlbmVyOk9hLHJ1bkV2ZW50c0luQmF0Y2g6UGEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpRYX0pLFNhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEY9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitTYSxUYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK1NhO1xuZnVuY3Rpb24gVWEoYSl7aWYoYVtGXSlyZXR1cm4gYVtGXTtmb3IoOyFhW0ZdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRl07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBWYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RChcIjMzXCIpfWZ1bmN0aW9uIFhhKGEpe3JldHVybiBhW1RhXXx8bnVsbH12YXIgYmI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0ZdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlVhLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0ZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6VmEsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpYYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtUYV09Yn19KTtcbmZ1bmN0aW9uIEwoYSl7ZG8gYT1hW1wicmV0dXJuXCJdO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIGNiKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9TChhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBkYihhLGIsYyl7aWYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIGViKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJmNiKGEuX3RhcmdldEluc3QsZGIsYSl9XG5mdW5jdGlvbiBmYihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9MKGIpOm51bGw7Y2IoYixkYixhKX19ZnVuY3Rpb24gZ2IoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBoYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJmdiKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBpYihhKXtJYShhLGViKX1cbmZ1bmN0aW9uIGpiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxoPTAsZz1lO2c7Zz1MKGcpKWgrKztnPTA7Zm9yKHZhciBrPWY7aztrPUwoaykpZysrO2Zvcig7MDxoLWc7KWU9TChlKSxoLS07Zm9yKDswPGctaDspZj1MKGYpLGctLTtmb3IoO2gtLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUwoZSk7Zj1MKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtoPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztlLnB1c2goYyk7Yz1MKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7aD1kLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9TChkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdiKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KWdiKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIGtiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6aWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7SWEoYSxmYil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpqYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtJYShhLGhiKX19KSxsYj1udWxsO2Z1bmN0aW9uIG1iKCl7IWxiJiZtLmNhblVzZURPTSYmKGxiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGxifXZhciBNPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gbmIoKXtpZihNLl9mYWxsYmFja1RleHQpcmV0dXJuIE0uX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPU0uX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1vYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7TS5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIE0uX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBvYigpe3JldHVyblwidmFsdWVcImluIE0uX3Jvb3Q/TS5fcm9vdC52YWx1ZTpNLl9yb290W21iKCldfVxudmFyIHBiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkMudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBOKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKE4ucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qy50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpDLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8cGIubGVuZ3RoO2ErKyl0aGlzW3BiW2FdXT1udWxsfX0pO04uSW50ZXJmYWNlPXFiO04uZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO0EoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPUEoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cmIoYyk7cmV0dXJuIGN9O3JiKE4pO1xuZnVuY3Rpb24gc2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkQoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHJiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXNiO2EucmVsZWFzZT10Yn12YXIgdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx3Yj1bOSwxMywyNywzMl0seGI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHliPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHliPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgemI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF5YixBYj1tLmNhblVzZURPTSYmKCF4Ynx8eWImJjg8eWImJjExPj15YiksQmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksS2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sTGI9ITE7XG5mdW5jdGlvbiBNYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PXdiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIE5iKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtMYj0hMDtyZXR1cm4gQmI7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QmImJkxiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFFiKGEsYil7aWYoT2IpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IXhiJiZNYihhLGIpPyhhPW5iKCksTS5fcm9vdD1udWxsLE0uX3N0YXJ0VGV4dD1udWxsLE0uX2ZhbGxiYWNrVGV4dD1udWxsLE9iPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBBYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBSYj17ZXZlbnRUeXBlczpLYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoeGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6ZT1LYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6ZT1LYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmU9S2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIE9iP01iKGEsYykmJihlPUtiLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9S2IuY29tcG9zaXRpb25TdGFydCk7ZT8oQWImJihPYnx8ZSE9PUtiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUtiLmNvbXBvc2l0aW9uRW5kJiZPYiYmKGY9bmIoKSk6KE0uX3Jvb3Q9ZCxNLl9zdGFydFRleHQ9b2IoKSxPYj0hMCkpLGU9dWIuZ2V0UG9vbGVkKGUsXG5iLGMsZCksZj9lLmRhdGE9ZjooZj1OYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksaWIoZSksZj1lKTpmPW51bGw7KGE9emI/UGIoYSxjKTpRYihhLGMpKT8oYj12Yi5nZXRQb29sZWQoS2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLGliKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LFNiPW51bGwsVGI9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7U2I9YX19LFViPW51bGwsVmI9bnVsbDtmdW5jdGlvbiBXYihhKXtpZihhPUVhKGEpKXtTYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFNiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9RGEoYS5zdGF0ZU5vZGUpO1NiLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBYYihhKXtVYj9WYj9WYi5wdXNoKGEpOlZiPVthXTpVYj1hfVxuZnVuY3Rpb24gWWIoKXtyZXR1cm4gbnVsbCE9PVVifHxudWxsIT09VmJ9ZnVuY3Rpb24gWmIoKXtpZihVYil7dmFyIGE9VWIsYj1WYjtWYj1VYj1udWxsO1diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylXYihiW2FdKX19dmFyICRiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpUYixlbnF1ZXVlU3RhdGVSZXN0b3JlOlhiLG5lZWRzU3RhdGVSZXN0b3JlOlliLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlpifSk7ZnVuY3Rpb24gYWMoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBiYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBjYygpe312YXIgZGM9ITE7ZnVuY3Rpb24gZWMoYSxiKXtpZihkYylyZXR1cm4gYShiKTtkYz0hMDt0cnl7cmV0dXJuIGFjKGEsYil9ZmluYWxseXtkYz0hMSxZYigpJiYoY2MoKSxaYigpKX19XG52YXIgZmM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFmY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaGMoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGljKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gamMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGtjKGEpe3ZhciBiPWpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBsYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9a2MoYSkpfWZ1bmN0aW9uIG1jKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1qYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG5jPWVhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG9jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxwYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsc2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHVjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHdjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbnhjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseWM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHpjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT15YyYmYVt5Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIEFjKGEpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHNjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgcmM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgcGM6cmV0dXJuXCJSZWFjdENhbGxcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RSZXR1cm5cIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHhjOnJldHVybiBhPWEucmVuZGVyLmRpc3BsYXlOYW1lfHxhLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT1BYyhhKTt2YXIgZj1udWxsO2MmJihmPUFjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hW1wicmV0dXJuXCJdfXdoaWxlKGEpO3JldHVybiBifVxudmFyIENjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxEYz17fSxFYz17fTtmdW5jdGlvbiBGYyhhKXtpZihFYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihEYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBFY1thXT0hMDtEY1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEdjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEhjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEdjKGEsYixjLGQpKXJldHVybiEwO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gVShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIFY9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07VltiXT1uZXcgVShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBTYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFRjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFxuVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Vi50YWJJbmRleD1uZXcgVShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXt2YXIgZT1WLmhhc093blByb3BlcnR5KGIpP1ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChIYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/RmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIFZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBXYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1YYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmVWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFpjKGEsYil7WWMoYSxiKTt2YXIgYz1YYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRjKGEsYi50eXBlLFhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWQoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiAkYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBYYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIGJkPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIGNkKGEsYixjKXthPU4uZ2V0UG9vbGVkKGJkLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7WGIoYyk7aWIoYSk7cmV0dXJuIGF9dmFyIGRkPW51bGwsZWQ9bnVsbDtmdW5jdGlvbiBmZChhKXtQYShhLCExKX1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPVZhKGEpO2lmKG1jKGIpKXJldHVybiBhfWZ1bmN0aW9uIGhkKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGlkPSExO20uY2FuVXNlRE9NJiYoaWQ9aWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gamQoKXtkZCYmKGRkLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSxlZD1kZD1udWxsKX1mdW5jdGlvbiBrZChhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmZ2QoZWQpJiYoYT1jZChlZCxhLGhjKGEpKSxlYyhmZCxhKSl9ZnVuY3Rpb24gbGQoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KGpkKCksZGQ9YixlZD1jLGRkLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSk6XCJ0b3BCbHVyXCI9PT1hJiZqZCgpfVxuZnVuY3Rpb24gbWQoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gZ2QoZWQpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gZ2QoYil9ZnVuY3Rpb24gb2QoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gZ2QoYil9XG52YXIgcGQ9e2V2ZW50VHlwZXM6YmQsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/VmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPWhkOmdjKGUpP2lkP2Y9b2Q6KGY9bWQsaD1sZCk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9bmQpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIGNkKGYsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYkYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxxZD1OLmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxyZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1yZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHRkKCl7cmV0dXJuIHNkfVxudmFyIHVkPXFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSx2ZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSx3ZD17ZXZlbnRUeXBlczp2ZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsXG5iLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9VYShiKTpudWxsKTphPW51bGw7aWYoYT09PWIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOlZhKGEpO2U9bnVsbD09Yj9lOlZhKGIpO3ZhciBoPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUxlYXZlLGEsYyxkKTtoLnR5cGU9XCJtb3VzZWxlYXZlXCI7aC50YXJnZXQ9ZjtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9XG5mO2piKGgsYyxhLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24geGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiB5ZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT14ZChhKTohMX1mdW5jdGlvbiB6ZChhKXsyIT09eGQoYSk/RChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBBZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj14ZChhKSwzPT09Yj9EKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpcmV0dXJuIHpkKGUpLGE7aWYoaD09PWQpcmV0dXJuIHpkKGUpLGI7aD1oLnNpYmxpbmd9RChcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7aD0hMTtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aD9cbnZvaWQgMDpEKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gQmQoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIENkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgRGQ9Ti5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEVkPU4uZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRmQ9cWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIEdkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIEhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9cWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPUdkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/R2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/R2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxLZD11ZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksTGQ9cWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGR9KSxNZD1OLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxOZD11ZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLE9kPXt9LFBkPXt9O2Z1bmN0aW9uIFFkKGEsYil7dmFyIGM9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZD1cIm9uXCIrYztjPVwidG9wXCIrYztiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtPZFthXT1iO1BkW2NdPWJ9XG5cImJsdXIgY2FuY2VsIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWdFbmQgZHJhZ1N0YXJ0IGRyb3AgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIG1vdXNlRG93biBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcmF0ZUNoYW5nZSByZXNldCBzZWVrZWQgc3VibWl0IHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMCl9KTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGRyYWcgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgcGxheWluZyBwcm9ncmVzcyBzY3JvbGwgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hNb3ZlIHRyYW5zaXRpb25FbmQgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITEpfSk7XG52YXIgUmQ9e2V2ZW50VHlwZXM6T2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9UGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVBkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09R2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1GZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1LZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPUxkO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1EZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9TWQ7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9cWQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1OZDticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPUVkO2JyZWFrO2RlZmF1bHQ6YT1cbk59Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtpYihiKTtyZXR1cm4gYn19LFNkPVJkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxUZD1bXTtmdW5jdGlvbiBVZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1VYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLFFhKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxoYyhhLm5hdGl2ZUV2ZW50KSl9dmFyIFZkPSEwO2Z1bmN0aW9uIFdkKGEpe1ZkPSEhYX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMSl9ZnVuY3Rpb24gWmQoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMCl9ZnVuY3Rpb24gWGQoYSxiKXtiYyhZZCxhLGIpfVxuZnVuY3Rpb24gWWQoYSxiKXtpZihWZCl7dmFyIGM9aGMoYik7Yz1VYShjKTtudWxsIT09YyYmXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyYmMiE9PXhkKGMpJiYoYz1udWxsKTtpZihUZC5sZW5ndGgpe3ZhciBkPVRkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2VjKFVkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+VGQubGVuZ3RoJiZUZC5wdXNoKGEpfX19XG52YXIgJGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIFZkfSxzZXRFbmFibGVkOldkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBWZH0sdHJhcEJ1YmJsZWRFdmVudDpXLHRyYXBDYXB0dXJlZEV2ZW50OlpkLGRpc3BhdGNoRXZlbnQ6WWR9KTtmdW5jdGlvbiBhZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJlPXthbmltYXRpb25lbmQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNlPXt9LGRlPXt9O20uY2FuVXNlRE9NJiYoZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGVlKGEpe2lmKGNlW2FdKXJldHVybiBjZVthXTtpZighYmVbYV0pcmV0dXJuIGE7dmFyIGI9YmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGUpcmV0dXJuIGNlW2FdPWJbY107cmV0dXJuIGF9XG52YXIgZmU9e3RvcEFuaW1hdGlvbkVuZDplZShcImFuaW1hdGlvbmVuZFwiKSx0b3BBbmltYXRpb25JdGVyYXRpb246ZWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksdG9wQW5pbWF0aW9uU3RhcnQ6ZWUoXCJhbmltYXRpb25zdGFydFwiKSx0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLFxudG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDplZShcInRyYW5zaXRpb25lbmRcIiksdG9wV2hlZWw6XCJ3aGVlbFwifSxnZT17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLFxudG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn0saGU9e30saWU9MCxqZT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gbWUoYSxiKXt2YXIgYz1sZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1sZShjKX19ZnVuY3Rpb24gbmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIG9lPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUscGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxxZT1udWxsLHJlPW51bGwsc2U9bnVsbCx0ZT0hMTtcbmZ1bmN0aW9uIHVlKGEsYil7aWYodGV8fG51bGw9PXFlfHxxZSE9PWZhKCkpcmV0dXJuIG51bGw7dmFyIGM9cWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmbmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBzZSYmaGEoc2UsYyk/bnVsbDooc2U9YyxhPU4uZ2V0UG9vbGVkKHBlLnNlbGVjdCxyZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXFlLGliKGEpLGEpfVxudmFyIHZlPXtldmVudFR5cGVzOnBlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPWtlKGUpO2Y9dmEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspe3ZhciBnPWZbaF07aWYoIWUuaGFzT3duUHJvcGVydHkoZyl8fCFlW2ddKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9WYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKGdjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXFlPWUscmU9YixzZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6c2U9cmU9cWU9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6dGU9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gdGU9ITEsdWUoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYob2UpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiB1ZShjLGQpfXJldHVybiBudWxsfX07TmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtEYT1iYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO0VhPWJiLmdldEluc3RhbmNlRnJvbU5vZGU7RmE9YmIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtOYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlJkLEVudGVyTGVhdmVFdmVudFBsdWdpbjp3ZCxDaGFuZ2VFdmVudFBsdWdpbjpwZCxTZWxlY3RFdmVudFBsdWdpbjp2ZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlJifSk7XG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeGUoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWUoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wczt2YXIgZj12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2Ugc2M6cmV0dXJuIEJlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugd2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgdGM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgcGM6Zj03O2JyZWFrO2Nhc2UgcWM6Zj05O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YzpmPTEzO2JyZWFrO2Nhc2UgdmM6Zj0xMjticmVhaztjYXNlIHhjOmY9MTQ7YnJlYWs7ZGVmYXVsdDppZihcIm51bWJlclwiPT09dHlwZW9mIGQudGFnKXJldHVybiBiPWQsYi5wZW5kaW5nUHJvcHM9YSxiLmV4cGlyYXRpb25UaW1lPWMsXG5iO0QoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9ZWxzZSBEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IHhlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZShhLGIsYyxkKXthPW5ldyB4ZSgxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENlKGEsYixjKXthPW5ldyB4ZSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGUoYSxiLGMpe2I9bmV3IHhlKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciBFZT1udWxsLEZlPW51bGw7XG5mdW5jdGlvbiBHZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIEhlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0VlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtGZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFZSYmRWUoYSl9ZnVuY3Rpb24gSmUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZlJiZGZShhKX1uZXcgU2V0O1xuZnVuY3Rpb24gS2UoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMSxjYXB0dXJlZFZhbHVlczpudWxsfX1mdW5jdGlvbiBMZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9dmFyIE1lPXZvaWQgMCxOZT12b2lkIDA7XG5mdW5jdGlvbiBPZShhKXtNZT1OZT1udWxsO3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS51cGRhdGVRdWV1ZTtudWxsPT09YyYmKGM9YS51cGRhdGVRdWV1ZT1LZShudWxsKSk7bnVsbCE9PWI/KGE9Yi51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yi51cGRhdGVRdWV1ZT1LZShudWxsKSkpOmE9bnVsbDtNZT1jO05lPWEhPT1jP2E6bnVsbH1mdW5jdGlvbiBQZShhLGIpe09lKGEpO2E9TWU7dmFyIGM9TmU7bnVsbD09PWM/TGUoYSxiKTpudWxsPT09YS5sYXN0fHxudWxsPT09Yy5sYXN0PyhMZShhLGIpLExlKGMsYikpOihMZShhLGIpLGMubGFzdD1iKX1mdW5jdGlvbiBRZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FwdHVyZWRWYWx1ZXM6Yy5jYXB0dXJlZFZhbHVlcyxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGg9ITAsZz1jLmZpcnN0LGs9ITE7bnVsbCE9PWc7KXt2YXIgdj1nLmV4cGlyYXRpb25UaW1lO2lmKHY+Zil7dmFyIGw9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09bHx8bD52KWMuZXhwaXJhdGlvblRpbWU9djtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fFxuKGMuZmlyc3Q9Zy5uZXh0LG51bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihnLmlzUmVwbGFjZSlhPVFlKGcsZCxhLGUpLGg9ITA7ZWxzZSBpZih2PVFlKGcsZCxhLGUpKWE9aD9BKHt9LGEsdik6QShhLHYpLGg9ITE7Zy5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1nLmNhbGxiYWNrJiYodj1jLmNhbGxiYWNrTGlzdCxudWxsPT09diYmKHY9Yy5jYWxsYmFja0xpc3Q9W10pLHYucHVzaChnKSk7bnVsbCE9PWcuY2FwdHVyZWRWYWx1ZSYmKHY9Yy5jYXB0dXJlZFZhbHVlcyxudWxsPT09dj9jLmNhcHR1cmVkVmFsdWVzPVtnLmNhcHR1cmVkVmFsdWVdOnYucHVzaChnLmNhcHR1cmVkVmFsdWUpKX1nPWcubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHxudWxsIT09Yy5jYXB0dXJlZFZhbHVlc3x8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO1xucmV0dXJuIGF9ZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9EKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1ifHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlyZXR1cm4hMDt2YXIgbj1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5zaG91bGRDb21wb25lbnRVcGRhdGU/bi5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8haGEoYixjKXx8IWhhKGQsZSk6ITB9ZnVuY3Rpb24gaChhLGIpe2IudXBkYXRlcj1yO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9ZnVuY3Rpb24gZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXJldHVybiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsYyxkKX12YXIgdj1hLmNhY2hlQ29udGV4dCxsPWEuZ2V0TWFza2VkQ29udGV4dCxwPWEuZ2V0VW5tYXNrZWRDb250ZXh0LHo9YS5pc0NvbnRleHRDb25zdW1lcixCPWEuaGFzQ29udGV4dENoYW5nZWQscj17aXNNb3VudGVkOnlkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5jYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxkKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTpoLGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ayxcbmNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1wKGEpLGU9eihhKSxmPWU/bChhLGQpOmthO2M9bmV3IGMoYixmKTt2YXIgbj1udWxsIT09Yy5zdGF0ZSYmdm9pZCAwIT09Yy5zdGF0ZT9jLnN0YXRlOm51bGw7aChhLGMpO2EubWVtb2l6ZWRTdGF0ZT1uO2I9ayhhLGMsYixuKTtudWxsIT09YiYmdm9pZCAwIT09YiYmKGEubWVtb2l6ZWRTdGF0ZT1BKHt9LGEubWVtb2l6ZWRTdGF0ZSxiKSk7ZSYmdihhLGQsZik7cmV0dXJuIGN9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWEuYWx0ZXJuYXRlLGU9YS5zdGF0ZU5vZGUsZj1hLnBlbmRpbmdQcm9wcyxuPXAoYSk7ZS5wcm9wcz1mO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1rYTtlLmNvbnRleHQ9bChhLG4pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYz1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZS5zdGF0ZSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihlLnN0YXRlPVJlKGQsYSxjLGUsZixiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfSxyZXN1bWVNb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsbj1hLnN0YXRlTm9kZTtuLnByb3BzPWEubWVtb2l6ZWRQcm9wcztuLnN0YXRlPVxuYS5tZW1vaXplZFN0YXRlO3ZhciBoPWEubWVtb2l6ZWRQcm9wcyxyPWEucGVuZGluZ1Byb3BzLHo9bi5jb250ZXh0LHE9cChhKTtxPWwoYSxxKTsoYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cnx8eiE9PXEpJiZnKGEsbixyLHEpO3o9YS5tZW1vaXplZFN0YXRlO2I9bnVsbCE9PWEudXBkYXRlUXVldWU/UmUobnVsbCxhLGEudXBkYXRlUXVldWUsbixyLGIpOno7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGEsbixyLGIpKTtpZihudWxsIT09dSYmdm9pZCAwIT09dSl7Yj1udWxsPT09Ynx8dm9pZCAwPT09Yj91OkEoe30sYix1KTt2YXIgdD1hLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PXQmJih0LmJhc2VTdGF0ZT1BKHt9LHQuYmFzZVN0YXRlLHUpKX1pZighKGghPT1yfHx6IT09Ynx8QigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix6LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSxkKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx1PXAoYik7dT1sKGIsdSk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09cnx8cSE9PXUpJiZnKGIseCxyLHUpO3E9Yi5tZW1vaXplZFN0YXRlO2M9bnVsbCE9PWIudXBkYXRlUXVldWU/UmUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHQ9dm9pZCAwO2ghPT1yJiYodD1rKGIseCxyLGMpKTtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz90OkEoe30sYyx0KTt2YXIgeT1iLnVwZGF0ZVF1ZXVlO251bGwhPT15JiYoeS5iYXNlU3RhdGU9QSh7fSx5LmJhc2VTdGF0ZSx0KSl9aWYoIShoIT09cnx8cSE9PWN8fEIoKXx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLCExOyh0PWYoYixoLHIscSxjLHUpKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlJiZ4LmNvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZ4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTIwNDgpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksZChiLHIpLGUoYixjKSk7eC5wcm9wcz1yO3guc3RhdGU9Yzt4LmNvbnRleHQ9dTtyZXR1cm4gdH19fXZhciBVZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gVmUoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09a2E/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9EKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6RChcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gV2UoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFhlKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9VmUoYSxiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9QWUoYyxhLm1vZGUsZCk7ZC5yZWY9VmUoYSxiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkRlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCxmKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1DZShcIlwiK2IsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjPUFlKGIsYS5tb2RlLGMpLGMucmVmPVZlKGEsbnVsbCxiKSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIHJjOnJldHVybiBiPURlKGIsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFVlKGIpfHx6YyhiKSlyZXR1cm4gYj1CZShiLFxuYS5tb2RlLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7V2UoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09c2M/bChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHJjOnJldHVybiBjLmtleT09PWU/dihhLGIsYyxkKTpudWxsfWlmKFVlKGMpfHx6YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpsKGEsYixjLGQsbnVsbCk7V2UoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXNjP2woYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHJjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx2KGIsYSxkLGUpfWlmKFVlKGQpfHx6YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxsKGIsYSxkLGUsbnVsbCk7V2UoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGUsbCxnLGgpe2Zvcih2YXIgcj1udWxsLGs9bnVsbCxxPWwsdT1sPTAsdD1udWxsO251bGwhPT1xJiZ1PGcubGVuZ3RoO3UrKyl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgbj16KGUscSxnW3VdLGgpO2lmKG51bGw9PT1uKXtudWxsPT09cSYmKHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSxxKTtsPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW47cT10fWlmKHU9PT1nLmxlbmd0aClyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7dTxnLmxlbmd0aDt1KyspaWYocT1wKGUsZ1t1XSxoKSlsPWYocSxsLHUpLG51bGw9PT1rP3I9cTprLnNpYmxpbmc9cSxrPXE7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpO3U8Zy5sZW5ndGg7dSsrKWlmKHQ9QihxLGUsdSxnW3VdLGgpKXtpZihhJiZudWxsIT09dC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/dTp0LmtleSk7bD1mKHQsbCx1KTtudWxsPT09az9yPXQ6ay5zaWJsaW5nPXQ7az10fWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUShlLGwsZyxoKXt2YXIgcj16YyhnKTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygcj9EKFwiMTUwXCIpOnZvaWQgMDtnPXIuY2FsbChnKTtudWxsPT1nP0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaz1cbnI9bnVsbCxxPWwsdT1sPTAsdD1udWxsLG49Zy5uZXh0KCk7bnVsbCE9PXEmJiFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIEg9eihlLHEsbi52YWx1ZSxoKTtpZihudWxsPT09SCl7cXx8KHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PUguYWx0ZXJuYXRlJiZiKGUscSk7bD1mKEgsbCx1KTtudWxsPT09az9yPUg6ay5zaWJsaW5nPUg7az1IO3E9dH1pZihuLmRvbmUpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpbj1wKGUsbi52YWx1ZSxoKSxudWxsIT09biYmKGw9ZihuLGwsdSksbnVsbD09PWs/cj1uOmsuc2libGluZz1uLGs9bik7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpaWYobj1CKHEsZSx1LG4udmFsdWUsaCksbnVsbCE9PW4pe2lmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT1uLmtleT91Om4ua2V5KTtcbmw9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bn1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfXJldHVybiBmdW5jdGlvbihhLGQsZixsKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1zYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgZz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGcpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugb2M6YTp7dmFyIGs9Zi5rZXk7Zm9yKGc9ZDtudWxsIT09Zzspe2lmKGcua2V5PT09aylpZigxMD09PWcudGFnP2YudHlwZT09PXNjOmcudHlwZT09PWYudHlwZSl7YyhhLGcuc2libGluZyk7ZD1lKGcsZi50eXBlPT09c2M/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGwpO2QucmVmPVZlKGEsZyxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZyk7YnJlYWt9ZWxzZSBiKGEsZyk7Zz1nLnNpYmxpbmd9Zi50eXBlPT09XG5zYz8oZD1CZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxsLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKToobD1BZShmLGEubW9kZSxsKSxsLnJlZj1WZShhLGQsZiksbFtcInJldHVyblwiXT1hLGE9bCl9cmV0dXJuIGgoYSk7Y2FzZSByYzphOntmb3IoZz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ZylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sbCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RGUoZixhLm1vZGUsbCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJlxuNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihjKGEsZCksZD1DZShmLGEubW9kZSxsKSxkW1wicmV0dXJuXCJdPWEsYT1kKSxoKGEpO2lmKFVlKGYpKXJldHVybiByKGEsZCxmLGwpO2lmKHpjKGYpKXJldHVybiBRKGEsZCxmLGwpO2cmJldlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpsPWEudHlwZSxEKFwiMTUyXCIsbC5kaXNwbGF5TmFtZXx8bC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWWU9WGUoITApLFplPVhlKCExKTtcbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1plKGIsbnVsbCxjLGQpOlllKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO25jLmN1cnJlbnQ9Yjt2YXIgbD1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGwsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGw9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSYmKGwuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpKWwuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIGg9Zi52YWx1ZTtpZihoPT09bCYmKDAhPT1ofHwxL2g9PT0xL2wpfHxoIT09aCYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1UZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UmUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVplKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WmUoYixiLnN0YXRlTm9kZSxkLGMpOlllKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WWUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6YTp7ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztlPWQuX2N1cnJlbnRWYWx1ZTt2YXIgdD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT10fHxoIT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt2YXIgaz1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1rfHxudWxsPT09aylrPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aztpZigwIT09KHQmaykpeihiLGQsdCxjKTtlbHNlIGlmKGg9PT1mKXthPXIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7ZyhhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1yKGEsYil9cmV0dXJuIGE7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYWYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe2EuZWZmZWN0VGFnfD00fXZhciBoPWEuY3JlYXRlSW5zdGFuY2UsZz1hLmNyZWF0ZVRleHRJbnN0YW5jZSxrPWEuYXBwZW5kSW5pdGlhbENoaWxkLHY9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixsPWEucHJlcGFyZVVwZGF0ZSxwPWEucGVyc2lzdGVuY2Usej1iLmdldFJvb3RIb3N0Q29udGFpbmVyLEI9Yi5wb3BIb3N0Q29udGV4dCxyPWIuZ2V0SG9zdENvbnRleHQsUT1iLnBvcEhvc3RDb250YWluZXIsbj1jLnBvcENvbnRleHRQcm92aWRlcix4PWMucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LFk9ZC5wb3BQcm92aWRlcixHPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxSPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsUz1lLnBvcEh5ZHJhdGlvblN0YXRlLHE9dm9pZCAwLHU9dm9pZCAwLHQ9dm9pZCAwO2EubXV0YXRpb24/KHE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPVxuYykmJmYoYil9LHQ9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmYoYil9KTpwP0QoXCIyMzVcIik6RChcIjIzNlwiKTtyZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG4oYiksYT1iLnN0YXRlTm9kZSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWcmPS02NSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnREaWRDYXRjaD9iLmVmZmVjdFRhZ3w9MjU2OmQuY2FwdHVyZWRWYWx1ZXM9bnVsbCksbnVsbDtjYXNlIDM6UShiKTt4KGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKVMoYiksYi5lZmZlY3RUYWcmPS0zO3EoYik7YT1iLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PWEmJm51bGwhPT1hLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWd8PTI1Nik7cmV0dXJuIG51bGw7Y2FzZSA1OkIoYik7Yz16KCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLEg9Yi5zdGF0ZU5vZGUseT1yKCk7SD1sKEgsZSxwLGQsYyx5KTt1KGEsYixILGUscCxkLGMseSk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9cigpO2lmKFMoYikpRyhiLGMsYSkmJmYoYik7ZWxzZXtwPWgoZSxkLGMsYSxiKTthOmZvcih5PWIuY2hpbGQ7bnVsbCE9PXk7KXtpZig1PT09eS50YWd8fDY9PT15LnRhZylrKHAseS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PXkudGFnJiZudWxsIT09eS5jaGlsZCl7eS5jaGlsZFtcInJldHVyblwiXT15O3k9eS5jaGlsZDtjb250aW51ZX1pZih5PT09YilicmVhaztcbmZvcig7bnVsbD09PXkuc2libGluZzspe2lmKG51bGw9PT15W1wicmV0dXJuXCJdfHx5W1wicmV0dXJuXCJdPT09YilicmVhayBhO3k9eVtcInJldHVyblwiXX15LnNpYmxpbmdbXCJyZXR1cm5cIl09eVtcInJldHVyblwiXTt5PXkuc2libGluZ312KHAsZSxkLGMsYSkmJmYoYik7Yi5zdGF0ZU5vZGU9cH1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdChhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXooKTtjPXIoKTtTKGIpP1IoYikmJmYoYik6Yi5zdGF0ZU5vZGU9ZyhkLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KGQ9Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RChcIjE2NVwiKTtiLnRhZz04O2U9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09XG5wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKWUucHVzaChwLnBlbmRpbmdQcm9wcy52YWx1ZSk7ZWxzZSBpZihudWxsIT09cC5jaGlsZCl7cC5jaGlsZFtcInJldHVyblwiXT1wO3A9cC5jaGlsZDtjb250aW51ZX1mb3IoO251bGw9PT1wLnNpYmxpbmc7KXtpZihudWxsPT09cFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1kLmhhbmRsZXI7ZD1wKGQucHJvcHMsZSk7Yi5jaGlsZD1ZZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxkLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFEoYikscShiKSxudWxsO1xuY2FzZSAxMzpyZXR1cm4gWShiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYmYoYSxiLGMsZCxlKXt2YXIgZj1hLnBvcEhvc3RDb250YWluZXIsaD1hLnBvcEhvc3RDb250ZXh0LGc9Yi5wb3BDb250ZXh0UHJvdmlkZXIsaz1iLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCx2PWMucG9wUHJvdmlkZXI7cmV0dXJue3Rocm93RXhjZXB0aW9uOmZ1bmN0aW9uKGEsYixjKXtiLmVmZmVjdFRhZ3w9NTEyO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Yj17dmFsdWU6Yyxzb3VyY2U6YixzdGFjazpCYyhiKX07ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6T2UoYSk7YS51cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcz1bYl07YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJuO2Nhc2UgMjppZihjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJiFlKGMpKXtPZShhKTtjPWEudXBkYXRlUXVldWU7dmFyIGQ9Yy5jYXB0dXJlZFZhbHVlcztudWxsPT09ZD9cbmMuY2FwdHVyZWRWYWx1ZXM9W2JdOmQucHVzaChiKTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm59fWE9YVtcInJldHVyblwiXX13aGlsZShudWxsIT09YSl9LHVud2luZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBmKGEpLGsoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGgoYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiB2KGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LHVud2luZEludGVycnVwdGVkV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO2JyZWFrO2Nhc2UgMzpmKGEpO2soYSk7YnJlYWs7Y2FzZSA1OmgoYSk7YnJlYWs7Y2FzZSA0OmYoYSk7YnJlYWs7Y2FzZSAxMzp2KGEpfX19fVxuZnVuY3Rpb24gY2YoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmQmMoYyk7bnVsbCE9PWMmJkFjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZBYyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmUmJkplKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmYoYSk7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2MucHJvcHM9YS5tZW1vaXplZFByb3BzLGMuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtiKGEsdCl9YnJlYWs7Y2FzZSA1OmYoYSk7YnJlYWs7Y2FzZSA3OmcoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpwJiZ2KGEpfX1mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hOzspaWYoaChiKSxudWxsPT09Yi5jaGlsZHx8cCYmND09PWIudGFnKXtpZihiPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBrKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIHYoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09XG5iLnRhZ3x8Nj09PWIudGFnKWcoYiksZT9TKGQsYi5zdGF0ZU5vZGUpOlIoZCxiLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBsPWEuZ2V0UHVibGljSW5zdGFuY2UscD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtwfHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciB6PXAuY29tbWl0TW91bnQsQj1wLmNvbW1pdFVwZGF0ZSxyPXAucmVzZXRUZXh0Q29udGVudCxRPXAuY29tbWl0VGV4dFVwZGF0ZSxuPXAuYXBwZW5kQ2hpbGQsXG54PXAuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixZPXAuaW5zZXJ0QmVmb3JlLEc9cC5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxSPXAucmVtb3ZlQ2hpbGQsUz1wLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6aWYoYi5lZmZlY3RUYWcmMjA0OCYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2EucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShjLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtyKGEuc3RhdGVOb2RlKX0sXG5jb21taXRQbGFjZW1lbnQ6ZnVuY3Rpb24oYSl7YTp7Zm9yKHZhciBiPWFbXCJyZXR1cm5cIl07bnVsbCE9PWI7KXtpZihrKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iW1wicmV0dXJuXCJdfUQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpEKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocihiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Y1tcInJldHVyblwiXXx8ayhjW1wicmV0dXJuXCJdKSl7Yz1udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1cbmMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZyljP2Q/RyhiLGUuc3RhdGVOb2RlLGMpOlkoYixlLnN0YXRlTm9kZSxjKTpkP3goYixlLnN0YXRlTm9kZSk6bihiLGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGRbXCJyZXR1cm5cIl09ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWVbXCJyZXR1cm5cIl18fGVbXCJyZXR1cm5cIl09PT1hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXt2KGEpO1xuYVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkIoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7UShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6YyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6YT1cbmMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5wcm9wcz1jLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2I9Yi5tZW1vaXplZFN0YXRlO2EucHJvcHM9Yy5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yy5tZW1vaXplZFN0YXRlO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYixhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1jPWMudXBkYXRlUXVldWU7bnVsbCE9PWMmJlNlKGMsYSk7YnJlYWs7Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9bChjLmNoaWxkLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSAyOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9U2UoYixhKX1icmVhaztjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmXG40JiZ6KGEsYy50eXBlLGMubWVtb2l6ZWRQcm9wcyxjKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdEVycm9yTG9nZ2luZzpmdW5jdGlvbihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnZhciBjPWEudHlwZTtiPWEuc3RhdGVOb2RlO3ZhciBkPWEudXBkYXRlUXVldWU7bnVsbD09PWR8fG51bGw9PT1kLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO3ZhciBmPWQuY2FwdHVyZWRWYWx1ZXM7ZC5jYXB0dXJlZFZhbHVlcz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCYmZShiKTtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcztiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKXtkPWZbY107dmFyIGw9ZC52YWx1ZSxnPWQuc3RhY2s7Y2YoYSxkKTtiLmNvbXBvbmVudERpZENhdGNoKGwse2NvbXBvbmVudFN0YWNrOm51bGwhPT1nP2c6XCJcIn0pfWJyZWFrO1xuY2FzZSAzOmM9YS51cGRhdGVRdWV1ZTtudWxsPT09Y3x8bnVsbD09PWMuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7Zj1jLmNhcHR1cmVkVmFsdWVzO2MuY2FwdHVyZWRWYWx1ZXM9bnVsbDtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKWQ9ZltjXSxjZihhLGQpLGIoZC52YWx1ZSk7YnJlYWs7ZGVmYXVsdDpEKFwiMjY1XCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWwoYyk7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShudWxsKTphLmN1cnJlbnQ9bnVsbCl9fX12YXIgZWY9e307XG5mdW5jdGlvbiBmZihhLGIpe2Z1bmN0aW9uIGMoYSl7YT09PWVmP0QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBkPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxlPWEuZ2V0Um9vdEhvc3RDb250ZXh0O2E9Yi5jcmVhdGVDdXJzb3I7dmFyIGY9Yi5wdXNoLGg9Yi5wb3AsZz1hKGVmKSxrPWEoZWYpLHY9YShlZik7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGMoZy5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYyh2LmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe2goZyxhKTtoKGssYSk7aCh2LGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtrLmN1cnJlbnQ9PT1hJiYoaChnLGEpLGgoayxhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7Zih2LGIsYSk7ZihrLGEsYSk7ZihnLGVmLGEpO2I9ZShiKTtoKGcsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1cbmModi5jdXJyZW50KSxlPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwsej1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7ej1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7ej1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9ejtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseil9cD1hO3o9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9ejtjOyliKGEsYyksYz1nKGMpO2QoYSk7ej1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLEFjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGthKSxrPWUoITEpLHY9a2E7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4ga2E7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8a2E7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxueGQoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gamYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtjKGgsYi5fY2hhbmdlZEJpdHMsYSk7YyhmLGIuX2N1cnJlbnRWYWx1ZSxhKTtjKGUsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9LHBvcFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWguY3VycmVudCxjPWYuY3VycmVudDtkKGUsYSk7ZChmLGEpO2QoaCxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifX19XG5mdW5jdGlvbiBrZigpe3ZhciBhPVtdLGI9LTE7cmV0dXJue2NyZWF0ZUN1cnNvcjpmdW5jdGlvbihhKXtyZXR1cm57Y3VycmVudDphfX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybi0xPT09Yn0scG9wOmZ1bmN0aW9uKGMpezA+Ynx8KGMuY3VycmVudD1hW2JdLGFbYl09bnVsbCxiLS0pfSxwdXNoOmZ1bmN0aW9uKGMsZCl7YisrO2FbYl09Yy5jdXJyZW50O2MuY3VycmVudD1kfSxjaGVja1RoYXRTdGFja0lzRW1wdHk6ZnVuY3Rpb24oKXt9LHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldjpmdW5jdGlvbigpe319fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYigpe2lmKG51bGwhPT1JKWZvcih2YXIgYT1JW1wicmV0dXJuXCJdO251bGwhPT1hOylMYyhhKSxhPWFbXCJyZXR1cm5cIl07WWE9bnVsbDtaPTA7ST1udWxsO05jPSExfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIG51bGwhPT15YSYmeWEuaGFzKGEpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPUNiKGIsYSxaKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1afHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7Yjpzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGY9ZS51cGRhdGVRdWV1ZTtmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTticmVhayBiO2RlZmF1bHQ6Zj0wfWZvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1cbmcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtOYz0hMDticmVha319ZWxzZXthPUtjKGEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MjU1OSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9XG5udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEpe3ZhciBiPVdhKGEuYWx0ZXJuYXRlLGEsWik7bnVsbD09PWImJihiPWQoYSkpO25jLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYyxmKXtjYT9EKFwiMjQzXCIpOnZvaWQgMDtjYT0hMDtpZihjIT09Wnx8YSE9PVlhfHxudWxsPT09SSliKCksWWE9YSxaPWMsST16ZShZYS5jdXJyZW50LG51bGwsWiksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZz0hMTtkb3t0cnl7aWYoZilmb3IoO251bGwhPT1JJiYhUygpOylJPWUoSSk7ZWxzZSBmb3IoO251bGwhPT1JOylJPWUoSSl9Y2F0Y2goT2Mpe2lmKG51bGw9PT1JKXtnPSEwO3EoT2MpO2JyZWFrfWY9STt2YXIgaD1mW1wicmV0dXJuXCJdO2lmKG51bGw9PT1oKXtnPSEwO3EoT2MpO2JyZWFrfUpjKGgsZixPYyk7ST1kKGYpfWJyZWFrfXdoaWxlKDEpO1xuY2E9ITE7aWYoZ3x8bnVsbCE9PUkpcmV0dXJuIG51bGw7aWYoTmMpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5jdXJyZW50LmFsdGVybmF0ZTtEKFwiMjYyXCIpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7YT17dmFsdWU6Yyxzb3VyY2U6YSxzdGFjazpCYyhhKX07UGUoYix7ZXhwaXJhdGlvblRpbWU6ZCxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpudWxsLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOmEsbmV4dDpudWxsfSk7dihiLGQpfWZ1bmN0aW9uIGcoYSxiKXthOntjYSYmIVphP0QoXCIyNjNcIik6dm9pZCAwO2Zvcih2YXIgZD1hW1wicmV0dXJuXCJdO251bGwhPT1kOyl7c3dpdGNoKGQudGFnKXtjYXNlIDI6dmFyIGU9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZENhdGNoJiYhYyhlKSl7aChhLGQsYixcbjEpO2E9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmgoYSxkLGIsMSk7YT12b2lkIDA7YnJlYWsgYX1kPWRbXCJyZXR1cm5cIl19Mz09PWEudGFnJiZoKGEsYSxiLDEpO2E9dm9pZCAwfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7YT0wIT09aWE/aWE6Y2E/WmE/MTpaOmEubW9kZSYxP3phPzEwKigoKGwoKSsxNSkvMTB8MCkrMSk6MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk6MTt6YSYmKDA9PT1kYXx8YT5kYSkmJihkYT1hKTtyZXR1cm4gYX1mdW5jdGlvbiB2KGEsYyl7YTp7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YykmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1jKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBkPVxuYS5zdGF0ZU5vZGU7IWNhJiYwIT09WiYmYzxaJiZiKCk7Y2EmJiFaYSYmWWE9PT1kfHxCKGQsYyk7RmI+eGcmJkQoXCIxODVcIil9ZWxzZXtjPXZvaWQgMDticmVhayBhfWE9YVtcInJldHVyblwiXX1jPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBsKCl7eWU9SWMoKS1QYztyZXR1cm4geWc9KHllLzEwfDApKzJ9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3ZhciBmPWlhO2lhPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7aWE9Zn19ZnVuY3Rpb24geihhKXtpZigwIT09R2Ipe2lmKGE+R2IpcmV0dXJuO21nKFFjKX12YXIgYj1JYygpLVBjO0diPWE7UWM9bGcoUSx7dGltZW91dDoxMCooYS0yKS1ifSl9ZnVuY3Rpb24gQihhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Sz8obGE9Sz1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KEs9Sy5uZXh0U2NoZWR1bGVkUm9vdD1hLEsubmV4dFNjaGVkdWxlZFJvb3Q9bGEpO1xuZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVR8fChKP0hiJiYoYWE9YSxQPTEsRyhhLDEsITEpKToxPT09Yj9uKCk6eihiKSl9ZnVuY3Rpb24gcigpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1LKWZvcih2YXIgYz1LLGQ9bGE7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PUs/RChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xhPUs9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxhKWxhPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxLLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PUspe0s9YztLLm5leHRTY2hlZHVsZWRSb290PWxhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9XG5kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PUspYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1hYTtudWxsIT09YyYmYz09PWImJjE9PT1hP0ZiKys6RmI9MDthYT1iO1A9YX1mdW5jdGlvbiBRKGEpe3goMCwhMCxhKX1mdW5jdGlvbiBuKCl7eCgxLCExLG51bGwpfWZ1bmN0aW9uIHgoYSxiLGMpeyRhPWM7cigpO2lmKGIpZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApJiYoIUlifHxsKCk+PVApOylHKGFhLFAsIUliKSxyKCk7ZWxzZSBmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCk7KUcoYWEsUCwhMSkscigpO251bGwhPT0kYSYmKEdiPTAsUWM9LTEpOzAhPT1QJiZ6KFApOyRhPW51bGw7SWI9ITE7WSgpfWZ1bmN0aW9uIFkoKXtGYj0wO2lmKG51bGwhPT1BYSl7dmFyIGE9QWE7QWE9bnVsbDtmb3IodmFyIGI9XG4wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2god2cpe0JhfHwoQmE9ITAsSmI9d2cpfX19aWYoQmEpdGhyb3cgYT1KYixKYj1udWxsLEJhPSExLGE7fWZ1bmN0aW9uIEcoYSxiLGMpe1Q/RChcIjI0NVwiKTp2b2lkIDA7VD0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITApLG51bGwhPT1jJiYoUygpP2EuZmluaXNoZWRXb3JrPWM6UihhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMSksbnVsbCE9PWMmJlIoYSxjLGIpKSk7VD0hMX1mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PUFhP0FhPVtkXTpBYS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuMDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtaYT1jYT0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/RChcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9EKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWwoKTtuYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBmPWIuZmlyc3RFZmZlY3R9ZWxzZSBmPWI7ZWxzZSBmPWIuZmlyc3RFZmZlY3Q7emcoYy5jb250YWluZXJJbmZvKTtmb3Iodz1mO251bGwhPT13Oyl7dmFyIGg9ITEsaz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXcuZWZmZWN0VGFnJjIwNDgmJkRiKHcuYWx0ZXJuYXRlLHcpLHc9dy5uZXh0RWZmZWN0fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09XG53JiYodz13Lm5leHRFZmZlY3QpKX1mb3Iodz1mO251bGwhPT13Oyl7aD0hMTtrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspe3ZhciBwPXcuZWZmZWN0VGFnO3AmMTYmJk1jKHcpO2lmKHAmMTI4KXt2YXIgbj13LmFsdGVybmF0ZTtudWxsIT09biYma2cobil9c3dpdGNoKHAmMTQpe2Nhc2UgMjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkViKHcpO3cuZWZmZWN0VGFnJj0tMzt3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDQ6d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA4OmdnKHcpfXc9dy5uZXh0RWZmZWN0fX1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfUFnKGMuY29udGFpbmVySW5mbyk7Yy5jdXJyZW50PWI7Zm9yKHc9ZjtudWxsIT09dzspe3A9ITE7bj12b2lkIDA7dHJ5e2ZvcihmPWMsaD1lLGs9ZDtudWxsIT09dzspe3ZhciByPXcuZWZmZWN0VGFnO1xuciYzNiYmaGcoZix3LmFsdGVybmF0ZSx3LGgsayk7ciYyNTYmJmlnKHcscSk7ciYxMjgmJmpnKHcpO3ZhciB0PXcubmV4dEVmZmVjdDt3Lm5leHRFZmZlY3Q9bnVsbDt3PXR9fWNhdGNoKGFiKXtwPSEwLG49YWJ9cCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxuKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9Y2E9WmE9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJih5YT1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gUygpe3JldHVybiBudWxsPT09JGF8fCRhLnRpbWVSZW1haW5pbmcoKT5CZz8hMTpJYj0hMH1mdW5jdGlvbiBxKGEpe251bGw9PT1hYT9EKFwiMjQ2XCIpOnZvaWQgMDthYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0JhfHwoQmE9ITAsSmI9YSl9dmFyIHU9a2YoKSx0PWZmKGEsdSkseT1oZih1KTt1PWpmKHUpO3ZhciBIPWdmKGEpLFxuV2E9JGUoYSx0LHksdSxILHYsaykuYmVnaW5Xb3JrLENiPWFmKGEsdCx5LHUsSCkuY29tcGxldGVXb3JrO3Q9YmYodCx5LHUsdixjKTt2YXIgSmM9dC50aHJvd0V4Y2VwdGlvbixLYz10LnVud2luZFdvcmssTGM9dC51bndpbmRJbnRlcnJ1cHRlZFdvcms7dD1kZihhLGcsdixrLGZ1bmN0aW9uKGEpe251bGw9PT15YT95YT1uZXcgU2V0KFthXSk6eWEuYWRkKGEpfSxsKTt2YXIgRGI9dC5jb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMsTWM9dC5jb21taXRSZXNldFRleHRDb250ZW50LEViPXQuY29tbWl0UGxhY2VtZW50LGdnPXQuY29tbWl0RGVsZXRpb24sd2U9dC5jb21taXRXb3JrLGhnPXQuY29tbWl0TGlmZUN5Y2xlcyxpZz10LmNvbW1pdEVycm9yTG9nZ2luZyxqZz10LmNvbW1pdEF0dGFjaFJlZixrZz10LmNvbW1pdERldGFjaFJlZixJYz1hLm5vdyxsZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxtZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssemc9YS5wcmVwYXJlRm9yQ29tbWl0LFxuQWc9YS5yZXNldEFmdGVyQ29tbWl0LFBjPUljKCkseWc9Mix5ZT1QYyxSYz0wLGlhPTAsY2E9ITEsST1udWxsLFlhPW51bGwsWj0wLHc9bnVsbCxaYT0hMSxOYz0hMSx5YT1udWxsLGxhPW51bGwsSz1udWxsLEdiPTAsUWM9LTEsVD0hMSxhYT1udWxsLFA9MCxkYT0wLEliPSExLEJhPSExLEpiPW51bGwsJGE9bnVsbCxKPSExLEhiPSExLHphPSExLEFhPW51bGwseGc9MUUzLEZiPTAsQmc9MTtyZXR1cm57cmVjYWxjdWxhdGVDdXJyZW50VGltZTpsLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6ayxzY2hlZHVsZVdvcms6dixyZXF1ZXN0V29yazpCLGZsdXNoUm9vdDpmdW5jdGlvbihhLGIpe1Q/RChcIjI1M1wiKTp2b2lkIDA7YWE9YTtQPWI7RyhhLGIsITEpO24oKTtZKCl9LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhKPWMpfHxUfHxuKCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7aWYoSiYmIUhiKXtIYj1cbiEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0hiPSExfX1yZXR1cm4gYShiKX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7VD9EKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBwKGEsYil9ZmluYWxseXtKPWMsbigpfX0sZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPUo7Sj0hMDt0cnl7cChhKX1maW5hbGx5eyhKPWIpfHxUfHx4KDEsITEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9aWE7aWE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtpYT1ifX0sc3luY1VwZGF0ZXM6cCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHphKXJldHVybiBhKGIsYyk7Snx8VHx8MD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKTt2YXIgZD16YSxlPUo7Sj16YT0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3phPWQsKEo9ZSl8fFR8fG4oKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7VHx8XG4wPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApfSxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7YTw9UmMmJihhPVJjKzEpO3JldHVybiBSYz1hfSxsZWdhY3lDb250ZXh0Onl9fVxuZnVuY3Rpb24gbWYoYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsaCl7ZD1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGw9ZyhjKTtjPWsoYyk/dihjLGwpOmx9ZWxzZSBjPWthO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9aDtQZShkLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazp2b2lkIDA9PT1iP251bGw6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2YoZCxlKTtyZXR1cm4gZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9bGYoYSk7dmFyIGQ9YS5yZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcmssaD1hLmxlZ2FjeUNvbnRleHQsZz1oLmZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LGs9aC5pc0NvbnRleHRQcm92aWRlcix2PVxuaC5wcm9jZXNzQ2hpbGRDb250ZXh0O3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IHhlKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYyxmLGgpe3ZhciBnPWMuY3VycmVudCxrPWQoKTtnPWUoZyk7cmV0dXJuIGIoYSxjLGYsayxnLGgpfSx1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGg9ZCgpO3JldHVybiBiKGEsYyxlLGgsZixnKX0sZmx1c2hSb290OmEuZmx1c2hSb290LFxucmVxdWVzdFdvcms6YS5yZXF1ZXN0V29yayxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmEuY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxzeW5jVXBkYXRlczphLnN5bmNVcGRhdGVzLGludGVyYWN0aXZlVXBkYXRlczphLmludGVyYWN0aXZlVXBkYXRlcyxmbHVzaEludGVyYWN0aXZlVXBkYXRlczphLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoQ29udHJvbGxlZDphLmZsdXNoQ29udHJvbGxlZCxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LFxuZmluZEhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9EKFwiMTg4XCIpOkQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9QmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9Q2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBIZShBKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9QmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX1cbnZhciBuZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0Om1mfSksb2Y9bmYmJm1mfHxuZixwZj1vZltcImRlZmF1bHRcIl0/b2ZbXCJkZWZhdWx0XCJdOm9mO2Z1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cmMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHJmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3csc2Y9dm9pZCAwO3NmPXJmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgdGY9dm9pZCAwLHVmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdmY9bnVsbCx3Zj0hMSx4Zj0tMSx5Zj0hMSx6Zj0wLEFmPTMzLEJmPTMzLENmPXZvaWQgMDtDZj1yZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBEZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PURmKXt3Zj0hMTthPXNmKCk7aWYoMD49emYtYSlpZigtMSE9PVxueGYmJnhmPD1hKUNmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybn1lbHNlIENmLmRpZFRpbWVvdXQ9ITE7eGY9LTE7YT12Zjt2Zj1udWxsO251bGwhPT1hJiZhKENmKX19LCExKTt2YXIgRWY9ZnVuY3Rpb24oYSl7eWY9ITE7dmFyIGI9YS16ZitCZjtiPEJmJiZBZjxCZj8oOD5iJiYoYj04KSxCZj1iPEFmP0FmOmIpOkFmPWI7emY9YStCZjt3Znx8KHdmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShEZixcIipcIikpfTt0Zj1mdW5jdGlvbihhLGIpe3ZmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih4Zj1zZigpK2IudGltZW91dCk7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm4gMH07dWY9ZnVuY3Rpb24oKXt2Zj1udWxsO3dmPSExO3hmPS0xfX1lbHNlIHRmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHVmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSB0Zj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHVmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRmYoYSl7dmFyIGI9XCJcIjtlYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIElmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBKZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTmY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gT2YoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBQZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/T2YoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUWY9dm9pZCAwLFJmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU5mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1FmPVFmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1FmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1RZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBTZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFRmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZikuZm9yRWFjaChmdW5jdGlvbihhKXtVZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RmW2JdPVRmW2FdfSl9KTtcbmZ1bmN0aW9uIFZmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFRmLmhhc093blByb3BlcnR5KGUpJiZUZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBXZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWGYoYSxiLGMpe2ImJihXZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWWYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBaZj1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gJGYoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9a2UoYSk7Yj12YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/WmQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oWmQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxaZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KGljKFwiY2FuY2VsXCIsITApJiZaZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KGljKFwiY2xvc2VcIiwhMCkmJlpkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6ZmUuaGFzT3duUHJvcGVydHkoZSkmJlcoZSxmZVtlXSxhKSxjW2VdPSEwKX19XG5mdW5jdGlvbiBhZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1OZi5odG1sJiYoZD1PZihhKSk7ZD09PU5mLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBiZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBjZyhhLGIsYyxkKXt2YXIgZT1ZZihiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7Zj1WYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXG5cImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxjKTtmPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTtmPUpmKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9WGYoYixmLFpmKTt2YXIgaD1mLGc7Zm9yKGcgaW4gaClpZihoLmhhc093blByb3BlcnR5KGcpKXt2YXIgaz1oW2ddO1wic3R5bGVcIj09PWc/VmYoYSxrLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJlJmKGEsaykpOlwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJlNmKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZcblNmKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYodWEuaGFzT3duUHJvcGVydHkoZyk/bnVsbCE9ayYmJGYoZCxnKTpudWxsIT1rJiZVYyhhLGcsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9IZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSGYoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1DKX19XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9VmMoYSxjKTtkPVZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1HZihhLGMpO2Q9R2YoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1KZihhLGMpO2Q9SmYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1YZihiLGQsWmYpO2I9YT12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBnPWNbYV07Zm9yKGIgaW4gZylnLmhhc093blByb3BlcnR5KGIpJiYoaHx8XG4oaD17fSksaFtiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2c9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09ZyYmKG51bGwhPWt8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWEpaWYoZyl7Zm9yKGIgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGh8fChoPXt9KSxoW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmZ1tiXSE9PWtbYl0mJihofHwoaD17fSksaFtiXT1rW2JdKX1lbHNlIGh8fChmfHwoZj1bXSksZi5wdXNoKGEsaCkpLFxuaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmZyE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9nPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmJGYoZSxhKSxmfHxnPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1oJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsaCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBlZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZZYyhhLGUpO1lmKGMsZCk7ZD1ZZihjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGg9YltmXSxnPWJbZisxXTtcInN0eWxlXCI9PT1oP1ZmKGEsZyxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD9SZihhLGcpOlwiY2hpbGRyZW5cIj09PWg/U2YoYSxnKTpVYyhhLGgsZyxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6WmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0hmKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkhmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpIZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBmZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsXG5jKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpLFcoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksJGYoZSxcIm9uQ2hhbmdlXCIpfVhmKGIsYyxaZik7ZD1udWxsO2Zvcih2YXIgaCBpbiBjKWMuaGFzT3duUHJvcGVydHkoaCkmJihmPWNbaF0sXCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTp1YS5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZiYmJGYoZSxoKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUMpfXJldHVybiBkfWZ1bmN0aW9uIG5nKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBvZz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmFnLGNyZWF0ZVRleHROb2RlOmJnLHNldEluaXRpYWxQcm9wZXJ0aWVzOmNnLGRpZmZQcm9wZXJ0aWVzOmRnLHVwZGF0ZVByb3BlcnRpZXM6ZWcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmZyxkaWZmSHlkcmF0ZWRUZXh0Om5nLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9WGEoZCk7ZT92b2lkIDA6RChcIjkwXCIpO21jKGQpO1pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO1RiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQob2cpO3ZhciBwZz1udWxsLHFnPW51bGw7XG5mdW5jdGlvbiByZyhhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1YLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfXJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBzZztYLnVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucmcucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/RChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtYLmZsdXNoUm9vdChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtyZy5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gc2coKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1zZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuc2cucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1YLmNyZWF0ZUNvbnRhaW5lcihhLGIsYyl9dGcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBzZztiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WC51cGRhdGVDb250YWluZXIoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnRnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBzZzthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7WC51cGRhdGVDb250YWluZXIobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTt0Zy5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgc2c7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1gudXBkYXRlQ29udGFpbmVyKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG50Zy5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcmcodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiB1ZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiB2ZyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG52YXIgWD1wZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlBmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1QZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7cGc9VmQ7dmFyIGE9ZmEoKTtpZihuZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChCKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGg9LTEsZz0tMSxrPTAsdj0wLGw9YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgejs7KXtsIT09Ynx8MCE9PWQmJjMhPT1sLm5vZGVUeXBlfHwoaD1mK2QpO2whPT1lfHwwIT09YyYmMyE9PWwubm9kZVR5cGV8fChnPWYrYyk7Mz09PWwubm9kZVR5cGUmJihmKz1sLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oej1sLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bDtsPXp9Zm9yKDs7KXtpZihsPT09YSlicmVhayBiO3A9PT1iJiYrK2s9PT1kJiYoaD1mKTtwPT09ZSYmKyt2PT09YyYmKGc9Zik7aWYobnVsbCE9PSh6PWwubmV4dFNpYmxpbmcpKWJyZWFrO2w9cDtwPWwucGFyZW50Tm9kZX1sPXp9Yj0tMT09PWh8fC0xPT09Zz9udWxsOlxue3N0YXJ0OmgsZW5kOmd9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3FnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O1dkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPXFnLGI9ZmEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZqYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1ttYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9bWUoYyxhKTt2YXIgZj1tZShjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgaD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2guc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShoKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooaC5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGgpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7Yy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxcbmEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9cWc9bnVsbDtXZChwZyk7cGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWFnKGEsYixjLGQpO2FbRl09ZTthW1RhXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtjZyhhLGIsYyxkKTtyZXR1cm4gdmcoYixjKX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBkZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1iZyhhLGIpO2FbRl09ZDtyZXR1cm4gYX0sbm93OnNmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhLGIsYyl7dmcoYixjKSYmYS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW1RhXT1lO2VnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7U2YoYSxcIlwiKX0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LFxuaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1cbmEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW0ZdPWY7YVtUYV09YztyZXR1cm4gZmcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtGXT1jO3JldHVybiBuZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6dGYsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp1Zn0pLENnPVg7YWM9Q2cuYmF0Y2hlZFVwZGF0ZXM7YmM9Q2cuaW50ZXJhY3RpdmVVcGRhdGVzO2NjPUNnLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gRGcoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB0ZyhhLCExLGIpfVxuZnVuY3Rpb24gRWcoYSxiLGMsZCxlKXt1ZyhjKT92b2lkIDA6RChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RGcoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fVgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7dWcoYik/dm9pZCAwOkQoXCIyMDBcIik7cmV0dXJuIHFmKGEsYixudWxsLGMpfVxudmFyIEdnPXtjcmVhdGVQb3J0YWw6RmcsZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOlguZmluZEhvc3RJbnN0YW5jZShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEVnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3VnKGEpP3ZvaWQgMDpEKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7RWcobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9XG5udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBGZy5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WC5iYXRjaGVkVXBkYXRlcyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WC5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlguZmx1c2hTeW5jLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpYLmZsdXNoQ29udHJvbGxlZCxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6UmEsRXZlbnRQbHVnaW5SZWdpc3RyeTpDYSxFdmVudFByb3BhZ2F0b3JzOmtiLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDokYixSZWFjdERPTUNvbXBvbmVudFRyZWU6YmIsUmVhY3RET01FdmVudExpc3RlbmVyOiRkfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB0ZyhhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O1xuWC5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlVhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMy4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIEhnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6R2d9KSxJZz1IZyYmR2d8fEhnO21vZHVsZS5leHBvcnRzPUlnW1wiZGVmYXVsdFwiXT9JZ1tcImRlZmF1bHRcIl06SWc7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCAnbm9ybWFsaXplLmNzcydcbmltcG9ydCAnbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzJ1xuaW1wb3J0ICdsZWFmbGV0LWRyYXcvZGlzdC9sZWFmbGV0LmRyYXcuY3NzJ1xuaW1wb3J0ICcuL3N0eWxlcy9zdHlsZS5jc3MnXG5cbmltcG9ydCByb290U2FnYSBmcm9tICcuL3NhZ2FzJ1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4vY29uZmlndXJlU3RvcmUnXG5pbXBvcnQgVXJiYW5BbmFseXRpY3NBcHAgZnJvbSAnLi9jb21wb25lbnRzL1VyYmFuQW5hbHl0aWNzQXBwJ1xuXG5pbXBvcnQgUmVhY3RHQSBmcm9tICdyZWFjdC1nYSdcblJlYWN0R0EuaW5pdGlhbGl6ZSgnVUEtMTIwMTU5Mjg5LTEnKVxuUmVhY3RHQS5wYWdldmlldyh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxuXG5pbXBvcnQgTG9nUm9ja2V0IGZyb20gJ2xvZ3JvY2tldCdcbkxvZ1JvY2tldC5pbml0KCdoejI5dGwvdWFkX2RlbW9fcHJvZCcpXG5cbmNvbnN0IG1vdW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKClcbmNvbnN0IGpzeCA9IChcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgPFVyYmFuQW5hbHl0aWNzQXBwIC8+XG4gICAgPC9Qcm92aWRlcj5cbilcblJlYWN0RE9NLnJlbmRlcihqc3gsIG1vdW50Tm9kZSlcbnN0b3JlLnJ1blNhZ2Eocm9vdFNhZ2EpIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=